
TASK1B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800200  000039ca  00003a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800294  00800294  00003af2  2**0
                  ALLOC
  3 .stab         00001ec0  00000000  00000000  00003af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a5  00000000  00000000  000059b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00006060  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000186d  00000000  00000000  00006100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000288  00000000  00000000  0000796d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f2  00000000  00000000  00007bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a8  00000000  00000000  000085e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  00008d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f60  00000000  00000000  00009292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__vector_5>
      18:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ec       	ldi	r30, 0xCA	; 202
      fc:	f9 e3       	ldi	r31, 0x39	; 57
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 39       	cpi	r26, 0x94	; 148
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a4 e9       	ldi	r26, 0x94	; 148
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 32       	cpi	r26, 0x23	; 35
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <main>
     122:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <buzzer_pin_config>:
Output: Function to initialize buzzer
Logic: Setting PORTC3 as output which is the pin connected to the buzzer
Example Call: buzzer_pin_config()
*/
void buzzer_pin_config(void)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     132:	87 e2       	ldi	r24, 0x27	; 39
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	27 e2       	ldi	r18, 0x27	; 39
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	f9 01       	movw	r30, r18
     13c:	20 81       	ld	r18, Z
     13e:	28 60       	ori	r18, 0x08	; 8
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     144:	88 e2       	ldi	r24, 0x28	; 40
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	28 e2       	ldi	r18, 0x28	; 40
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	f9 01       	movw	r30, r18
     14e:	20 81       	ld	r18, Z
     150:	27 7f       	andi	r18, 0xF7	; 247
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
}
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <buzzer_on>:
Output: Buzzer turns on
Logic: Turns the buzzer on by writing 1 to PC3
Example Call: buzzer_on ()
*/
void buzzer_on(void)
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	0f 92       	push	r0
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
     166:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
     168:	86 e2       	ldi	r24, 0x26	; 38
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | 0x08;
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	88 60       	ori	r24, 0x08	; 8
     176:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
     178:	88 e2       	ldi	r24, 0x28	; 40
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	29 81       	ldd	r18, Y+1	; 0x01
     17e:	fc 01       	movw	r30, r24
     180:	20 83       	st	Z, r18
}
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <buzzer_off>:
Output: Buzzer turns off
Logic: Turns the buzzer off by writing 0 to PC3
Example Call: buzzer_off()
*/
void buzzer_off(void)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	0f 92       	push	r0
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
     194:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
     196:	86 e2       	ldi	r24, 0x26	; 38
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	fc 01       	movw	r30, r24
     19c:	80 81       	ld	r24, Z
     19e:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	87 7f       	andi	r24, 0xF7	; 247
     1a4:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
     1a6:	88 e2       	ldi	r24, 0x28	; 40
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	29 81       	ldd	r18, Y+1	; 0x01
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
}
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <buzzer_beep>:
Output: Buzzer beeps 1 time
Logic: Turns the buzzer on and off by writing 1 & 0 to PC3
Example Call: buzzer_beep()
*/
void buzzer_beep()
{
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	6c 97       	sbiw	r28, 0x1c	; 28
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
	buzzer_on();
     1d0:	0e 94 ae 00 	call	0x15c	; 0x15c <buzzer_on>
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	a8 e4       	ldi	r26, 0x48	; 72
     1da:	b3 e4       	ldi	r27, 0x43	; 67
     1dc:	89 83       	std	Y+1, r24	; 0x01
     1de:	9a 83       	std	Y+2, r25	; 0x02
     1e0:	ab 83       	std	Y+3, r26	; 0x03
     1e2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     1e4:	69 81       	ldd	r22, Y+1	; 0x01
     1e6:	7a 81       	ldd	r23, Y+2	; 0x02
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	26 e6       	ldi	r18, 0x66	; 102
     1ee:	36 e6       	ldi	r19, 0x66	; 102
     1f0:	46 e6       	ldi	r20, 0x66	; 102
     1f2:	55 e4       	ldi	r21, 0x45	; 69
     1f4:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     1f8:	dc 01       	movw	r26, r24
     1fa:	cb 01       	movw	r24, r22
     1fc:	8d 83       	std	Y+5, r24	; 0x05
     1fe:	9e 83       	std	Y+6, r25	; 0x06
     200:	af 83       	std	Y+7, r26	; 0x07
     202:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     204:	11 e0       	ldi	r17, 0x01	; 1
     206:	6d 81       	ldd	r22, Y+5	; 0x05
     208:	7e 81       	ldd	r23, Y+6	; 0x06
     20a:	8f 81       	ldd	r24, Y+7	; 0x07
     20c:	98 85       	ldd	r25, Y+8	; 0x08
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e8       	ldi	r20, 0x80	; 128
     214:	5f e3       	ldi	r21, 0x3F	; 63
     216:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     21a:	88 23       	and	r24, r24
     21c:	0c f0       	brlt	.+2      	; 0x220 <buzzer_beep+0x68>
     21e:	10 e0       	ldi	r17, 0x00	; 0
     220:	11 23       	and	r17, r17
     222:	29 f0       	breq	.+10     	; 0x22e <buzzer_beep+0x76>
		__ticks = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	9a 87       	std	Y+10, r25	; 0x0a
     22a:	89 87       	std	Y+9, r24	; 0x09
     22c:	46 c0       	rjmp	.+140    	; 0x2ba <buzzer_beep+0x102>
	else if (__tmp > 65535)
     22e:	11 e0       	ldi	r17, 0x01	; 1
     230:	6d 81       	ldd	r22, Y+5	; 0x05
     232:	7e 81       	ldd	r23, Y+6	; 0x06
     234:	8f 81       	ldd	r24, Y+7	; 0x07
     236:	98 85       	ldd	r25, Y+8	; 0x08
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	4f e7       	ldi	r20, 0x7F	; 127
     23e:	57 e4       	ldi	r21, 0x47	; 71
     240:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     244:	18 16       	cp	r1, r24
     246:	0c f0       	brlt	.+2      	; 0x24a <buzzer_beep+0x92>
     248:	10 e0       	ldi	r17, 0x00	; 0
     24a:	11 23       	and	r17, r17
     24c:	61 f1       	breq	.+88     	; 0x2a6 <buzzer_beep+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     24e:	69 81       	ldd	r22, Y+1	; 0x01
     250:	7a 81       	ldd	r23, Y+2	; 0x02
     252:	8b 81       	ldd	r24, Y+3	; 0x03
     254:	9c 81       	ldd	r25, Y+4	; 0x04
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e2       	ldi	r20, 0x20	; 32
     25c:	51 e4       	ldi	r21, 0x41	; 65
     25e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     262:	dc 01       	movw	r26, r24
     264:	cb 01       	movw	r24, r22
     266:	bc 01       	movw	r22, r24
     268:	cd 01       	movw	r24, r26
     26a:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	9a 87       	std	Y+10, r25	; 0x0a
     274:	89 87       	std	Y+9, r24	; 0x09
     276:	12 c0       	rjmp	.+36     	; 0x29c <buzzer_beep+0xe4>
     278:	80 e7       	ldi	r24, 0x70	; 112
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	9c 87       	std	Y+12, r25	; 0x0c
     27e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     280:	8b 85       	ldd	r24, Y+11	; 0x0b
     282:	9c 85       	ldd	r25, Y+12	; 0x0c
     284:	8c 01       	movw	r16, r24
     286:	c8 01       	movw	r24, r16
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <buzzer_beep+0xd0>
     28c:	8c 01       	movw	r16, r24
     28e:	1c 87       	std	Y+12, r17	; 0x0c
     290:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     292:	89 85       	ldd	r24, Y+9	; 0x09
     294:	9a 85       	ldd	r25, Y+10	; 0x0a
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	9a 87       	std	Y+10, r25	; 0x0a
     29a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29c:	89 85       	ldd	r24, Y+9	; 0x09
     29e:	9a 85       	ldd	r25, Y+10	; 0x0a
     2a0:	00 97       	sbiw	r24, 0x00	; 0
     2a2:	51 f7       	brne	.-44     	; 0x278 <buzzer_beep+0xc0>
     2a4:	17 c0       	rjmp	.+46     	; 0x2d4 <buzzer_beep+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a6:	6d 81       	ldd	r22, Y+5	; 0x05
     2a8:	7e 81       	ldd	r23, Y+6	; 0x06
     2aa:	8f 81       	ldd	r24, Y+7	; 0x07
     2ac:	98 85       	ldd	r25, Y+8	; 0x08
     2ae:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     2b2:	dc 01       	movw	r26, r24
     2b4:	cb 01       	movw	r24, r22
     2b6:	9a 87       	std	Y+10, r25	; 0x0a
     2b8:	89 87       	std	Y+9, r24	; 0x09
     2ba:	89 85       	ldd	r24, Y+9	; 0x09
     2bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2be:	9e 87       	std	Y+14, r25	; 0x0e
     2c0:	8d 87       	std	Y+13, r24	; 0x0d
     2c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c6:	8c 01       	movw	r16, r24
     2c8:	c8 01       	movw	r24, r16
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <buzzer_beep+0x112>
     2ce:	8c 01       	movw	r16, r24
     2d0:	1e 87       	std	Y+14, r17	; 0x0e
     2d2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
	buzzer_off();
     2d4:	0e 94 c5 00 	call	0x18a	; 0x18a <buzzer_off>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	a8 e4       	ldi	r26, 0x48	; 72
     2de:	b3 e4       	ldi	r27, 0x43	; 67
     2e0:	8f 87       	std	Y+15, r24	; 0x0f
     2e2:	98 8b       	std	Y+16, r25	; 0x10
     2e4:	a9 8b       	std	Y+17, r26	; 0x11
     2e6:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2e8:	6f 85       	ldd	r22, Y+15	; 0x0f
     2ea:	78 89       	ldd	r23, Y+16	; 0x10
     2ec:	89 89       	ldd	r24, Y+17	; 0x11
     2ee:	9a 89       	ldd	r25, Y+18	; 0x12
     2f0:	26 e6       	ldi	r18, 0x66	; 102
     2f2:	36 e6       	ldi	r19, 0x66	; 102
     2f4:	46 e6       	ldi	r20, 0x66	; 102
     2f6:	55 e4       	ldi	r21, 0x45	; 69
     2f8:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     2fc:	dc 01       	movw	r26, r24
     2fe:	cb 01       	movw	r24, r22
     300:	8b 8b       	std	Y+19, r24	; 0x13
     302:	9c 8b       	std	Y+20, r25	; 0x14
     304:	ad 8b       	std	Y+21, r26	; 0x15
     306:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     308:	11 e0       	ldi	r17, 0x01	; 1
     30a:	6b 89       	ldd	r22, Y+19	; 0x13
     30c:	7c 89       	ldd	r23, Y+20	; 0x14
     30e:	8d 89       	ldd	r24, Y+21	; 0x15
     310:	9e 89       	ldd	r25, Y+22	; 0x16
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e8       	ldi	r20, 0x80	; 128
     318:	5f e3       	ldi	r21, 0x3F	; 63
     31a:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     31e:	88 23       	and	r24, r24
     320:	0c f0       	brlt	.+2      	; 0x324 <buzzer_beep+0x16c>
     322:	10 e0       	ldi	r17, 0x00	; 0
     324:	11 23       	and	r17, r17
     326:	29 f0       	breq	.+10     	; 0x332 <buzzer_beep+0x17a>
		__ticks = 1;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	98 8f       	std	Y+24, r25	; 0x18
     32e:	8f 8b       	std	Y+23, r24	; 0x17
     330:	46 c0       	rjmp	.+140    	; 0x3be <buzzer_beep+0x206>
	else if (__tmp > 65535)
     332:	11 e0       	ldi	r17, 0x01	; 1
     334:	6b 89       	ldd	r22, Y+19	; 0x13
     336:	7c 89       	ldd	r23, Y+20	; 0x14
     338:	8d 89       	ldd	r24, Y+21	; 0x15
     33a:	9e 89       	ldd	r25, Y+22	; 0x16
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	3f ef       	ldi	r19, 0xFF	; 255
     340:	4f e7       	ldi	r20, 0x7F	; 127
     342:	57 e4       	ldi	r21, 0x47	; 71
     344:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     348:	18 16       	cp	r1, r24
     34a:	0c f0       	brlt	.+2      	; 0x34e <buzzer_beep+0x196>
     34c:	10 e0       	ldi	r17, 0x00	; 0
     34e:	11 23       	and	r17, r17
     350:	61 f1       	breq	.+88     	; 0x3aa <buzzer_beep+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     352:	6f 85       	ldd	r22, Y+15	; 0x0f
     354:	78 89       	ldd	r23, Y+16	; 0x10
     356:	89 89       	ldd	r24, Y+17	; 0x11
     358:	9a 89       	ldd	r25, Y+18	; 0x12
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e2       	ldi	r20, 0x20	; 32
     360:	51 e4       	ldi	r21, 0x41	; 65
     362:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	bc 01       	movw	r22, r24
     36c:	cd 01       	movw	r24, r26
     36e:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	98 8f       	std	Y+24, r25	; 0x18
     378:	8f 8b       	std	Y+23, r24	; 0x17
     37a:	12 c0       	rjmp	.+36     	; 0x3a0 <buzzer_beep+0x1e8>
     37c:	80 e7       	ldi	r24, 0x70	; 112
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	9a 8f       	std	Y+26, r25	; 0x1a
     382:	89 8f       	std	Y+25, r24	; 0x19
     384:	89 8d       	ldd	r24, Y+25	; 0x19
     386:	9a 8d       	ldd	r25, Y+26	; 0x1a
     388:	8c 01       	movw	r16, r24
     38a:	c8 01       	movw	r24, r16
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <buzzer_beep+0x1d4>
     390:	8c 01       	movw	r16, r24
     392:	1a 8f       	std	Y+26, r17	; 0x1a
     394:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     396:	8f 89       	ldd	r24, Y+23	; 0x17
     398:	98 8d       	ldd	r25, Y+24	; 0x18
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	98 8f       	std	Y+24, r25	; 0x18
     39e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a0:	8f 89       	ldd	r24, Y+23	; 0x17
     3a2:	98 8d       	ldd	r25, Y+24	; 0x18
     3a4:	00 97       	sbiw	r24, 0x00	; 0
     3a6:	51 f7       	brne	.-44     	; 0x37c <buzzer_beep+0x1c4>
     3a8:	17 c0       	rjmp	.+46     	; 0x3d8 <buzzer_beep+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3aa:	6b 89       	ldd	r22, Y+19	; 0x13
     3ac:	7c 89       	ldd	r23, Y+20	; 0x14
     3ae:	8d 89       	ldd	r24, Y+21	; 0x15
     3b0:	9e 89       	ldd	r25, Y+22	; 0x16
     3b2:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	98 8f       	std	Y+24, r25	; 0x18
     3bc:	8f 8b       	std	Y+23, r24	; 0x17
     3be:	8f 89       	ldd	r24, Y+23	; 0x17
     3c0:	98 8d       	ldd	r25, Y+24	; 0x18
     3c2:	9c 8f       	std	Y+28, r25	; 0x1c
     3c4:	8b 8f       	std	Y+27, r24	; 0x1b
     3c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3ca:	8c 01       	movw	r16, r24
     3cc:	c8 01       	movw	r24, r16
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <buzzer_beep+0x216>
     3d2:	8c 01       	movw	r16, r24
     3d4:	1c 8f       	std	Y+28, r17	; 0x1c
     3d6:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(200);
}
     3d8:	6c 96       	adiw	r28, 0x1c	; 28
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	08 95       	ret

000003ee <lcd_set_4bit>:
int i;


//Function to Reset LCD
void lcd_set_4bit()
{
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	c0 57       	subi	r28, 0x70	; 112
     3fc:	d0 40       	sbci	r29, 0x00	; 0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	a0 e8       	ldi	r26, 0x80	; 128
     40e:	bf e3       	ldi	r27, 0x3F	; 63
     410:	89 83       	std	Y+1, r24	; 0x01
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	ab 83       	std	Y+3, r26	; 0x03
     416:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     418:	69 81       	ldd	r22, Y+1	; 0x01
     41a:	7a 81       	ldd	r23, Y+2	; 0x02
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	9c 81       	ldd	r25, Y+4	; 0x04
     420:	26 e6       	ldi	r18, 0x66	; 102
     422:	36 e6       	ldi	r19, 0x66	; 102
     424:	46 e6       	ldi	r20, 0x66	; 102
     426:	55 e4       	ldi	r21, 0x45	; 69
     428:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     42c:	dc 01       	movw	r26, r24
     42e:	cb 01       	movw	r24, r22
     430:	8d 83       	std	Y+5, r24	; 0x05
     432:	9e 83       	std	Y+6, r25	; 0x06
     434:	af 83       	std	Y+7, r26	; 0x07
     436:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     438:	11 e0       	ldi	r17, 0x01	; 1
     43a:	6d 81       	ldd	r22, Y+5	; 0x05
     43c:	7e 81       	ldd	r23, Y+6	; 0x06
     43e:	8f 81       	ldd	r24, Y+7	; 0x07
     440:	98 85       	ldd	r25, Y+8	; 0x08
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e8       	ldi	r20, 0x80	; 128
     448:	5f e3       	ldi	r21, 0x3F	; 63
     44a:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     44e:	88 23       	and	r24, r24
     450:	0c f0       	brlt	.+2      	; 0x454 <lcd_set_4bit+0x66>
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	11 23       	and	r17, r17
     456:	29 f0       	breq	.+10     	; 0x462 <lcd_set_4bit+0x74>
		__ticks = 1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	9a 87       	std	Y+10, r25	; 0x0a
     45e:	89 87       	std	Y+9, r24	; 0x09
     460:	46 c0       	rjmp	.+140    	; 0x4ee <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     462:	11 e0       	ldi	r17, 0x01	; 1
     464:	6d 81       	ldd	r22, Y+5	; 0x05
     466:	7e 81       	ldd	r23, Y+6	; 0x06
     468:	8f 81       	ldd	r24, Y+7	; 0x07
     46a:	98 85       	ldd	r25, Y+8	; 0x08
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	3f ef       	ldi	r19, 0xFF	; 255
     470:	4f e7       	ldi	r20, 0x7F	; 127
     472:	57 e4       	ldi	r21, 0x47	; 71
     474:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     478:	18 16       	cp	r1, r24
     47a:	0c f0       	brlt	.+2      	; 0x47e <lcd_set_4bit+0x90>
     47c:	10 e0       	ldi	r17, 0x00	; 0
     47e:	11 23       	and	r17, r17
     480:	61 f1       	breq	.+88     	; 0x4da <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     482:	69 81       	ldd	r22, Y+1	; 0x01
     484:	7a 81       	ldd	r23, Y+2	; 0x02
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	9c 81       	ldd	r25, Y+4	; 0x04
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e2       	ldi	r20, 0x20	; 32
     490:	51 e4       	ldi	r21, 0x41	; 65
     492:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     496:	dc 01       	movw	r26, r24
     498:	cb 01       	movw	r24, r22
     49a:	bc 01       	movw	r22, r24
     49c:	cd 01       	movw	r24, r26
     49e:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	9a 87       	std	Y+10, r25	; 0x0a
     4a8:	89 87       	std	Y+9, r24	; 0x09
     4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <lcd_set_4bit+0xe2>
     4ac:	80 e7       	ldi	r24, 0x70	; 112
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	9c 87       	std	Y+12, r25	; 0x0c
     4b2:	8b 87       	std	Y+11, r24	; 0x0b
     4b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     4b6:	9c 85       	ldd	r25, Y+12	; 0x0c
     4b8:	8c 01       	movw	r16, r24
     4ba:	c8 01       	movw	r24, r16
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <lcd_set_4bit+0xce>
     4c0:	8c 01       	movw	r16, r24
     4c2:	1c 87       	std	Y+12, r17	; 0x0c
     4c4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c6:	89 85       	ldd	r24, Y+9	; 0x09
     4c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	9a 87       	std	Y+10, r25	; 0x0a
     4ce:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d0:	89 85       	ldd	r24, Y+9	; 0x09
     4d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	51 f7       	brne	.-44     	; 0x4ac <lcd_set_4bit+0xbe>
     4d8:	17 c0       	rjmp	.+46     	; 0x508 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4da:	6d 81       	ldd	r22, Y+5	; 0x05
     4dc:	7e 81       	ldd	r23, Y+6	; 0x06
     4de:	8f 81       	ldd	r24, Y+7	; 0x07
     4e0:	98 85       	ldd	r25, Y+8	; 0x08
     4e2:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	9a 87       	std	Y+10, r25	; 0x0a
     4ec:	89 87       	std	Y+9, r24	; 0x09
     4ee:	89 85       	ldd	r24, Y+9	; 0x09
     4f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f2:	9e 87       	std	Y+14, r25	; 0x0e
     4f4:	8d 87       	std	Y+13, r24	; 0x0d
     4f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     4f8:	9e 85       	ldd	r25, Y+14	; 0x0e
     4fa:	8c 01       	movw	r16, r24
     4fc:	f8 01       	movw	r30, r16
     4fe:	31 97       	sbiw	r30, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_set_4bit+0x110>
     502:	8f 01       	movw	r16, r30
     504:	1e 87       	std	Y+14, r17	; 0x0e
     506:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     508:	88 e2       	ldi	r24, 0x28	; 40
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	28 e2       	ldi	r18, 0x28	; 40
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	2e 7f       	andi	r18, 0xFE	; 254
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     51a:	88 e2       	ldi	r24, 0x28	; 40
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	28 e2       	ldi	r18, 0x28	; 40
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	f9 01       	movw	r30, r18
     524:	20 81       	ld	r18, Z
     526:	2d 7f       	andi	r18, 0xFD	; 253
     528:	fc 01       	movw	r30, r24
     52a:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     52c:	88 e2       	ldi	r24, 0x28	; 40
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	20 e3       	ldi	r18, 0x30	; 48
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     536:	88 e2       	ldi	r24, 0x28	; 40
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	28 e2       	ldi	r18, 0x28	; 40
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	f9 01       	movw	r30, r18
     540:	20 81       	ld	r18, Z
     542:	24 60       	ori	r18, 0x04	; 4
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 ea       	ldi	r26, 0xA0	; 160
     54e:	b0 e4       	ldi	r27, 0x40	; 64
     550:	8f 87       	std	Y+15, r24	; 0x0f
     552:	98 8b       	std	Y+16, r25	; 0x10
     554:	a9 8b       	std	Y+17, r26	; 0x11
     556:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     558:	6f 85       	ldd	r22, Y+15	; 0x0f
     55a:	78 89       	ldd	r23, Y+16	; 0x10
     55c:	89 89       	ldd	r24, Y+17	; 0x11
     55e:	9a 89       	ldd	r25, Y+18	; 0x12
     560:	26 e6       	ldi	r18, 0x66	; 102
     562:	36 e6       	ldi	r19, 0x66	; 102
     564:	46 e6       	ldi	r20, 0x66	; 102
     566:	55 e4       	ldi	r21, 0x45	; 69
     568:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	8b 8b       	std	Y+19, r24	; 0x13
     572:	9c 8b       	std	Y+20, r25	; 0x14
     574:	ad 8b       	std	Y+21, r26	; 0x15
     576:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     578:	11 e0       	ldi	r17, 0x01	; 1
     57a:	6b 89       	ldd	r22, Y+19	; 0x13
     57c:	7c 89       	ldd	r23, Y+20	; 0x14
     57e:	8d 89       	ldd	r24, Y+21	; 0x15
     580:	9e 89       	ldd	r25, Y+22	; 0x16
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e8       	ldi	r20, 0x80	; 128
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     58e:	88 23       	and	r24, r24
     590:	0c f0       	brlt	.+2      	; 0x594 <lcd_set_4bit+0x1a6>
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	11 23       	and	r17, r17
     596:	29 f0       	breq	.+10     	; 0x5a2 <lcd_set_4bit+0x1b4>
		__ticks = 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	98 8f       	std	Y+24, r25	; 0x18
     59e:	8f 8b       	std	Y+23, r24	; 0x17
     5a0:	46 c0       	rjmp	.+140    	; 0x62e <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     5a2:	11 e0       	ldi	r17, 0x01	; 1
     5a4:	6b 89       	ldd	r22, Y+19	; 0x13
     5a6:	7c 89       	ldd	r23, Y+20	; 0x14
     5a8:	8d 89       	ldd	r24, Y+21	; 0x15
     5aa:	9e 89       	ldd	r25, Y+22	; 0x16
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	3f ef       	ldi	r19, 0xFF	; 255
     5b0:	4f e7       	ldi	r20, 0x7F	; 127
     5b2:	57 e4       	ldi	r21, 0x47	; 71
     5b4:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     5b8:	18 16       	cp	r1, r24
     5ba:	0c f0       	brlt	.+2      	; 0x5be <lcd_set_4bit+0x1d0>
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	11 23       	and	r17, r17
     5c0:	61 f1       	breq	.+88     	; 0x61a <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c2:	6f 85       	ldd	r22, Y+15	; 0x0f
     5c4:	78 89       	ldd	r23, Y+16	; 0x10
     5c6:	89 89       	ldd	r24, Y+17	; 0x11
     5c8:	9a 89       	ldd	r25, Y+18	; 0x12
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 e2       	ldi	r20, 0x20	; 32
     5d0:	51 e4       	ldi	r21, 0x41	; 65
     5d2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	bc 01       	movw	r22, r24
     5dc:	cd 01       	movw	r24, r26
     5de:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	98 8f       	std	Y+24, r25	; 0x18
     5e8:	8f 8b       	std	Y+23, r24	; 0x17
     5ea:	12 c0       	rjmp	.+36     	; 0x610 <lcd_set_4bit+0x222>
     5ec:	80 e7       	ldi	r24, 0x70	; 112
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	9a 8f       	std	Y+26, r25	; 0x1a
     5f2:	89 8f       	std	Y+25, r24	; 0x19
     5f4:	89 8d       	ldd	r24, Y+25	; 0x19
     5f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5f8:	8c 01       	movw	r16, r24
     5fa:	c8 01       	movw	r24, r16
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <lcd_set_4bit+0x20e>
     600:	8c 01       	movw	r16, r24
     602:	1a 8f       	std	Y+26, r17	; 0x1a
     604:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     606:	8f 89       	ldd	r24, Y+23	; 0x17
     608:	98 8d       	ldd	r25, Y+24	; 0x18
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	98 8f       	std	Y+24, r25	; 0x18
     60e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     610:	8f 89       	ldd	r24, Y+23	; 0x17
     612:	98 8d       	ldd	r25, Y+24	; 0x18
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	51 f7       	brne	.-44     	; 0x5ec <lcd_set_4bit+0x1fe>
     618:	17 c0       	rjmp	.+46     	; 0x648 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     61a:	6b 89       	ldd	r22, Y+19	; 0x13
     61c:	7c 89       	ldd	r23, Y+20	; 0x14
     61e:	8d 89       	ldd	r24, Y+21	; 0x15
     620:	9e 89       	ldd	r25, Y+22	; 0x16
     622:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	98 8f       	std	Y+24, r25	; 0x18
     62c:	8f 8b       	std	Y+23, r24	; 0x17
     62e:	8f 89       	ldd	r24, Y+23	; 0x17
     630:	98 8d       	ldd	r25, Y+24	; 0x18
     632:	9c 8f       	std	Y+28, r25	; 0x1c
     634:	8b 8f       	std	Y+27, r24	; 0x1b
     636:	8b 8d       	ldd	r24, Y+27	; 0x1b
     638:	9c 8d       	ldd	r25, Y+28	; 0x1c
     63a:	8c 01       	movw	r16, r24
     63c:	f8 01       	movw	r30, r16
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <lcd_set_4bit+0x250>
     642:	8f 01       	movw	r16, r30
     644:	1c 8f       	std	Y+28, r17	; 0x1c
     646:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     648:	88 e2       	ldi	r24, 0x28	; 40
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	28 e2       	ldi	r18, 0x28	; 40
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	f9 01       	movw	r30, r18
     652:	20 81       	ld	r18, Z
     654:	2b 7f       	andi	r18, 0xFB	; 251
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	a0 e8       	ldi	r26, 0x80	; 128
     660:	bf e3       	ldi	r27, 0x3F	; 63
     662:	8d 8f       	std	Y+29, r24	; 0x1d
     664:	9e 8f       	std	Y+30, r25	; 0x1e
     666:	af 8f       	std	Y+31, r26	; 0x1f
     668:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     66a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     66c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     66e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     670:	98 a1       	lds	r25, 0x48
     672:	26 e6       	ldi	r18, 0x66	; 102
     674:	36 e6       	ldi	r19, 0x66	; 102
     676:	46 e6       	ldi	r20, 0x66	; 102
     678:	55 e4       	ldi	r21, 0x45	; 69
     67a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	89 a3       	lds	r24, 0x59
     684:	9a a3       	lds	r25, 0x5a
     686:	ab a3       	lds	r26, 0x5b
     688:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     68a:	11 e0       	ldi	r17, 0x01	; 1
     68c:	69 a1       	lds	r22, 0x49
     68e:	7a a1       	lds	r23, 0x4a
     690:	8b a1       	lds	r24, 0x4b
     692:	9c a1       	lds	r25, 0x4c
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e8       	ldi	r20, 0x80	; 128
     69a:	5f e3       	ldi	r21, 0x3F	; 63
     69c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     6a0:	88 23       	and	r24, r24
     6a2:	0c f0       	brlt	.+2      	; 0x6a6 <lcd_set_4bit+0x2b8>
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	11 23       	and	r17, r17
     6a8:	29 f0       	breq	.+10     	; 0x6b4 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	9e a3       	lds	r25, 0x5e
     6b0:	8d a3       	lds	r24, 0x5d
     6b2:	46 c0       	rjmp	.+140    	; 0x740 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     6b4:	11 e0       	ldi	r17, 0x01	; 1
     6b6:	69 a1       	lds	r22, 0x49
     6b8:	7a a1       	lds	r23, 0x4a
     6ba:	8b a1       	lds	r24, 0x4b
     6bc:	9c a1       	lds	r25, 0x4c
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	3f ef       	ldi	r19, 0xFF	; 255
     6c2:	4f e7       	ldi	r20, 0x7F	; 127
     6c4:	57 e4       	ldi	r21, 0x47	; 71
     6c6:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     6ca:	18 16       	cp	r1, r24
     6cc:	0c f0       	brlt	.+2      	; 0x6d0 <lcd_set_4bit+0x2e2>
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	11 23       	and	r17, r17
     6d2:	61 f1       	breq	.+88     	; 0x72c <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6d6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6da:	98 a1       	lds	r25, 0x48
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	40 e2       	ldi	r20, 0x20	; 32
     6e2:	51 e4       	ldi	r21, 0x41	; 65
     6e4:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     6e8:	dc 01       	movw	r26, r24
     6ea:	cb 01       	movw	r24, r22
     6ec:	bc 01       	movw	r22, r24
     6ee:	cd 01       	movw	r24, r26
     6f0:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	9e a3       	lds	r25, 0x5e
     6fa:	8d a3       	lds	r24, 0x5d
     6fc:	12 c0       	rjmp	.+36     	; 0x722 <lcd_set_4bit+0x334>
     6fe:	80 e7       	ldi	r24, 0x70	; 112
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	98 a7       	lds	r25, 0x78
     704:	8f a3       	lds	r24, 0x5f
     706:	8f a1       	lds	r24, 0x4f
     708:	98 a5       	lds	r25, 0x68
     70a:	8c 01       	movw	r16, r24
     70c:	c8 01       	movw	r24, r16
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <lcd_set_4bit+0x320>
     712:	8c 01       	movw	r16, r24
     714:	18 a7       	lds	r17, 0x78
     716:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     718:	8d a1       	lds	r24, 0x4d
     71a:	9e a1       	lds	r25, 0x4e
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	9e a3       	lds	r25, 0x5e
     720:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     722:	8d a1       	lds	r24, 0x4d
     724:	9e a1       	lds	r25, 0x4e
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	51 f7       	brne	.-44     	; 0x6fe <lcd_set_4bit+0x310>
     72a:	17 c0       	rjmp	.+46     	; 0x75a <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     72c:	69 a1       	lds	r22, 0x49
     72e:	7a a1       	lds	r23, 0x4a
     730:	8b a1       	lds	r24, 0x4b
     732:	9c a1       	lds	r25, 0x4c
     734:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     738:	dc 01       	movw	r26, r24
     73a:	cb 01       	movw	r24, r22
     73c:	9e a3       	lds	r25, 0x5e
     73e:	8d a3       	lds	r24, 0x5d
     740:	8d a1       	lds	r24, 0x4d
     742:	9e a1       	lds	r25, 0x4e
     744:	9a a7       	lds	r25, 0x7a
     746:	89 a7       	lds	r24, 0x79
     748:	89 a5       	lds	r24, 0x69
     74a:	9a a5       	lds	r25, 0x6a
     74c:	8c 01       	movw	r16, r24
     74e:	f8 01       	movw	r30, r16
     750:	31 97       	sbiw	r30, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <lcd_set_4bit+0x362>
     754:	8f 01       	movw	r16, r30
     756:	1a a7       	lds	r17, 0x7a
     758:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     75a:	88 e2       	ldi	r24, 0x28	; 40
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	28 e2       	ldi	r18, 0x28	; 40
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	2e 7f       	andi	r18, 0xFE	; 254
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     76c:	88 e2       	ldi	r24, 0x28	; 40
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	28 e2       	ldi	r18, 0x28	; 40
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	2d 7f       	andi	r18, 0xFD	; 253
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     77e:	88 e2       	ldi	r24, 0x28	; 40
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	20 e3       	ldi	r18, 0x30	; 48
     784:	fc 01       	movw	r30, r24
     786:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     788:	88 e2       	ldi	r24, 0x28	; 40
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	28 e2       	ldi	r18, 0x28	; 40
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	f9 01       	movw	r30, r18
     792:	20 81       	ld	r18, Z
     794:	24 60       	ori	r18, 0x04	; 4
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	a0 ea       	ldi	r26, 0xA0	; 160
     7a0:	b0 e4       	ldi	r27, 0x40	; 64
     7a2:	8b a7       	lds	r24, 0x7b
     7a4:	9c a7       	lds	r25, 0x7c
     7a6:	ad a7       	lds	r26, 0x7d
     7a8:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7aa:	6b a5       	lds	r22, 0x6b
     7ac:	7c a5       	lds	r23, 0x6c
     7ae:	8d a5       	lds	r24, 0x6d
     7b0:	9e a5       	lds	r25, 0x6e
     7b2:	26 e6       	ldi	r18, 0x66	; 102
     7b4:	36 e6       	ldi	r19, 0x66	; 102
     7b6:	46 e6       	ldi	r20, 0x66	; 102
     7b8:	55 e4       	ldi	r21, 0x45	; 69
     7ba:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	8f a7       	lds	r24, 0x7f
     7c4:	98 ab       	sts	0x58, r25
     7c6:	a9 ab       	sts	0x59, r26
     7c8:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     7ca:	11 e0       	ldi	r17, 0x01	; 1
     7cc:	6f a5       	lds	r22, 0x6f
     7ce:	78 a9       	sts	0x48, r23
     7d0:	89 a9       	sts	0x49, r24
     7d2:	9a a9       	sts	0x4a, r25
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e8       	ldi	r20, 0x80	; 128
     7da:	5f e3       	ldi	r21, 0x3F	; 63
     7dc:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     7e0:	88 23       	and	r24, r24
     7e2:	0c f0       	brlt	.+2      	; 0x7e6 <lcd_set_4bit+0x3f8>
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	11 23       	and	r17, r17
     7e8:	29 f0       	breq	.+10     	; 0x7f4 <lcd_set_4bit+0x406>
		__ticks = 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	9c ab       	sts	0x5c, r25
     7f0:	8b ab       	sts	0x5b, r24
     7f2:	46 c0       	rjmp	.+140    	; 0x880 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     7f4:	11 e0       	ldi	r17, 0x01	; 1
     7f6:	6f a5       	lds	r22, 0x6f
     7f8:	78 a9       	sts	0x48, r23
     7fa:	89 a9       	sts	0x49, r24
     7fc:	9a a9       	sts	0x4a, r25
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	3f ef       	ldi	r19, 0xFF	; 255
     802:	4f e7       	ldi	r20, 0x7F	; 127
     804:	57 e4       	ldi	r21, 0x47	; 71
     806:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     80a:	18 16       	cp	r1, r24
     80c:	0c f0       	brlt	.+2      	; 0x810 <lcd_set_4bit+0x422>
     80e:	10 e0       	ldi	r17, 0x00	; 0
     810:	11 23       	and	r17, r17
     812:	61 f1       	breq	.+88     	; 0x86c <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     814:	6b a5       	lds	r22, 0x6b
     816:	7c a5       	lds	r23, 0x6c
     818:	8d a5       	lds	r24, 0x6d
     81a:	9e a5       	lds	r25, 0x6e
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e2       	ldi	r20, 0x20	; 32
     822:	51 e4       	ldi	r21, 0x41	; 65
     824:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     828:	dc 01       	movw	r26, r24
     82a:	cb 01       	movw	r24, r22
     82c:	bc 01       	movw	r22, r24
     82e:	cd 01       	movw	r24, r26
     830:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	9c ab       	sts	0x5c, r25
     83a:	8b ab       	sts	0x5b, r24
     83c:	12 c0       	rjmp	.+36     	; 0x862 <lcd_set_4bit+0x474>
     83e:	80 e7       	ldi	r24, 0x70	; 112
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	9e ab       	sts	0x5e, r25
     844:	8d ab       	sts	0x5d, r24
     846:	8d a9       	sts	0x4d, r24
     848:	9e a9       	sts	0x4e, r25
     84a:	8c 01       	movw	r16, r24
     84c:	c8 01       	movw	r24, r16
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <lcd_set_4bit+0x460>
     852:	8c 01       	movw	r16, r24
     854:	1e ab       	sts	0x5e, r17
     856:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     858:	8b a9       	sts	0x4b, r24
     85a:	9c a9       	sts	0x4c, r25
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	9c ab       	sts	0x5c, r25
     860:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     862:	8b a9       	sts	0x4b, r24
     864:	9c a9       	sts	0x4c, r25
     866:	00 97       	sbiw	r24, 0x00	; 0
     868:	51 f7       	brne	.-44     	; 0x83e <lcd_set_4bit+0x450>
     86a:	17 c0       	rjmp	.+46     	; 0x89a <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     86c:	6f a5       	lds	r22, 0x6f
     86e:	78 a9       	sts	0x48, r23
     870:	89 a9       	sts	0x49, r24
     872:	9a a9       	sts	0x4a, r25
     874:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	9c ab       	sts	0x5c, r25
     87e:	8b ab       	sts	0x5b, r24
     880:	8b a9       	sts	0x4b, r24
     882:	9c a9       	sts	0x4c, r25
     884:	98 af       	sts	0x78, r25
     886:	8f ab       	sts	0x5f, r24
     888:	8f a9       	sts	0x4f, r24
     88a:	98 ad       	sts	0x68, r25
     88c:	8c 01       	movw	r16, r24
     88e:	f8 01       	movw	r30, r16
     890:	31 97       	sbiw	r30, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <lcd_set_4bit+0x4a2>
     894:	8f 01       	movw	r16, r30
     896:	18 af       	sts	0x78, r17
     898:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     89a:	88 e2       	ldi	r24, 0x28	; 40
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	28 e2       	ldi	r18, 0x28	; 40
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	2b 7f       	andi	r18, 0xFB	; 251
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	a0 e8       	ldi	r26, 0x80	; 128
     8b2:	bf e3       	ldi	r27, 0x3F	; 63
     8b4:	89 af       	sts	0x79, r24
     8b6:	9a af       	sts	0x7a, r25
     8b8:	ab af       	sts	0x7b, r26
     8ba:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     8bc:	69 ad       	sts	0x69, r22
     8be:	7a ad       	sts	0x6a, r23
     8c0:	8b ad       	sts	0x6b, r24
     8c2:	9c ad       	sts	0x6c, r25
     8c4:	26 e6       	ldi	r18, 0x66	; 102
     8c6:	36 e6       	ldi	r19, 0x66	; 102
     8c8:	46 e6       	ldi	r20, 0x66	; 102
     8ca:	55 e4       	ldi	r21, 0x45	; 69
     8cc:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	9e 01       	movw	r18, r28
     8d6:	23 5c       	subi	r18, 0xC3	; 195
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	f9 01       	movw	r30, r18
     8dc:	80 83       	st	Z, r24
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	a2 83       	std	Z+2, r26	; 0x02
     8e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8e4:	11 e0       	ldi	r17, 0x01	; 1
     8e6:	ce 01       	movw	r24, r28
     8e8:	cd 96       	adiw	r24, 0x3d	; 61
     8ea:	fc 01       	movw	r30, r24
     8ec:	60 81       	ld	r22, Z
     8ee:	71 81       	ldd	r23, Z+1	; 0x01
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	93 81       	ldd	r25, Z+3	; 0x03
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e8       	ldi	r20, 0x80	; 128
     8fa:	5f e3       	ldi	r21, 0x3F	; 63
     8fc:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     900:	88 23       	and	r24, r24
     902:	0c f0       	brlt	.+2      	; 0x906 <lcd_set_4bit+0x518>
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	11 23       	and	r17, r17
     908:	49 f0       	breq	.+18     	; 0x91c <lcd_set_4bit+0x52e>
		__ticks = 1;
     90a:	ce 01       	movw	r24, r28
     90c:	8f 5b       	subi	r24, 0xBF	; 191
     90e:	9f 4f       	sbci	r25, 0xFF	; 255
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	fc 01       	movw	r30, r24
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	20 83       	st	Z, r18
     91a:	6e c0       	rjmp	.+220    	; 0x9f8 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     91c:	11 e0       	ldi	r17, 0x01	; 1
     91e:	ce 01       	movw	r24, r28
     920:	cd 96       	adiw	r24, 0x3d	; 61
     922:	fc 01       	movw	r30, r24
     924:	60 81       	ld	r22, Z
     926:	71 81       	ldd	r23, Z+1	; 0x01
     928:	82 81       	ldd	r24, Z+2	; 0x02
     92a:	93 81       	ldd	r25, Z+3	; 0x03
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	3f ef       	ldi	r19, 0xFF	; 255
     930:	4f e7       	ldi	r20, 0x7F	; 127
     932:	57 e4       	ldi	r21, 0x47	; 71
     934:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     938:	18 16       	cp	r1, r24
     93a:	0c f0       	brlt	.+2      	; 0x93e <lcd_set_4bit+0x550>
     93c:	10 e0       	ldi	r17, 0x00	; 0
     93e:	11 23       	and	r17, r17
     940:	09 f4       	brne	.+2      	; 0x944 <lcd_set_4bit+0x556>
     942:	49 c0       	rjmp	.+146    	; 0x9d6 <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     944:	69 ad       	sts	0x69, r22
     946:	7a ad       	sts	0x6a, r23
     948:	8b ad       	sts	0x6b, r24
     94a:	9c ad       	sts	0x6c, r25
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	40 e2       	ldi	r20, 0x20	; 32
     952:	51 e4       	ldi	r21, 0x41	; 65
     954:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	8e 01       	movw	r16, r28
     95e:	0f 5b       	subi	r16, 0xBF	; 191
     960:	1f 4f       	sbci	r17, 0xFF	; 255
     962:	bc 01       	movw	r22, r24
     964:	cd 01       	movw	r24, r26
     966:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	f8 01       	movw	r30, r16
     970:	91 83       	std	Z+1, r25	; 0x01
     972:	80 83       	st	Z, r24
     974:	27 c0       	rjmp	.+78     	; 0x9c4 <lcd_set_4bit+0x5d6>
     976:	ce 01       	movw	r24, r28
     978:	8d 5b       	subi	r24, 0xBD	; 189
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	20 e7       	ldi	r18, 0x70	; 112
     97e:	31 e0       	ldi	r19, 0x01	; 1
     980:	fc 01       	movw	r30, r24
     982:	31 83       	std	Z+1, r19	; 0x01
     984:	20 83       	st	Z, r18
     986:	ce 01       	movw	r24, r28
     988:	8d 5b       	subi	r24, 0xBD	; 189
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	fc 01       	movw	r30, r24
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	8c 01       	movw	r16, r24
     994:	c8 01       	movw	r24, r16
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	f1 f7       	brne	.-4      	; 0x996 <lcd_set_4bit+0x5a8>
     99a:	8c 01       	movw	r16, r24
     99c:	ce 01       	movw	r24, r28
     99e:	8d 5b       	subi	r24, 0xBD	; 189
     9a0:	9f 4f       	sbci	r25, 0xFF	; 255
     9a2:	fc 01       	movw	r30, r24
     9a4:	11 83       	std	Z+1, r17	; 0x01
     9a6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a8:	ce 01       	movw	r24, r28
     9aa:	8f 5b       	subi	r24, 0xBF	; 191
     9ac:	9f 4f       	sbci	r25, 0xFF	; 255
     9ae:	9e 01       	movw	r18, r28
     9b0:	2f 5b       	subi	r18, 0xBF	; 191
     9b2:	3f 4f       	sbci	r19, 0xFF	; 255
     9b4:	f9 01       	movw	r30, r18
     9b6:	20 81       	ld	r18, Z
     9b8:	31 81       	ldd	r19, Z+1	; 0x01
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	30 40       	sbci	r19, 0x00	; 0
     9be:	fc 01       	movw	r30, r24
     9c0:	31 83       	std	Z+1, r19	; 0x01
     9c2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c4:	ce 01       	movw	r24, r28
     9c6:	8f 5b       	subi	r24, 0xBF	; 191
     9c8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ca:	fc 01       	movw	r30, r24
     9cc:	80 81       	ld	r24, Z
     9ce:	91 81       	ldd	r25, Z+1	; 0x01
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	89 f6       	brne	.-94     	; 0x976 <lcd_set_4bit+0x588>
     9d4:	2e c0       	rjmp	.+92     	; 0xa32 <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d6:	8e 01       	movw	r16, r28
     9d8:	0f 5b       	subi	r16, 0xBF	; 191
     9da:	1f 4f       	sbci	r17, 0xFF	; 255
     9dc:	ce 01       	movw	r24, r28
     9de:	cd 96       	adiw	r24, 0x3d	; 61
     9e0:	fc 01       	movw	r30, r24
     9e2:	60 81       	ld	r22, Z
     9e4:	71 81       	ldd	r23, Z+1	; 0x01
     9e6:	82 81       	ldd	r24, Z+2	; 0x02
     9e8:	93 81       	ldd	r25, Z+3	; 0x03
     9ea:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	f8 01       	movw	r30, r16
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	80 83       	st	Z, r24
     9f8:	ce 01       	movw	r24, r28
     9fa:	8b 5b       	subi	r24, 0xBB	; 187
     9fc:	9f 4f       	sbci	r25, 0xFF	; 255
     9fe:	9e 01       	movw	r18, r28
     a00:	2f 5b       	subi	r18, 0xBF	; 191
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	f9 01       	movw	r30, r18
     a06:	20 81       	ld	r18, Z
     a08:	31 81       	ldd	r19, Z+1	; 0x01
     a0a:	fc 01       	movw	r30, r24
     a0c:	31 83       	std	Z+1, r19	; 0x01
     a0e:	20 83       	st	Z, r18
     a10:	ce 01       	movw	r24, r28
     a12:	8b 5b       	subi	r24, 0xBB	; 187
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	fc 01       	movw	r30, r24
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	8c 01       	movw	r16, r24
     a1e:	c8 01       	movw	r24, r16
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <lcd_set_4bit+0x632>
     a24:	8c 01       	movw	r16, r24
     a26:	ce 01       	movw	r24, r28
     a28:	8b 5b       	subi	r24, 0xBB	; 187
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	fc 01       	movw	r30, r24
     a2e:	11 83       	std	Z+1, r17	; 0x01
     a30:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a32:	88 e2       	ldi	r24, 0x28	; 40
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	28 e2       	ldi	r18, 0x28	; 40
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	f9 01       	movw	r30, r18
     a3c:	20 81       	ld	r18, Z
     a3e:	2e 7f       	andi	r18, 0xFE	; 254
     a40:	fc 01       	movw	r30, r24
     a42:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a44:	88 e2       	ldi	r24, 0x28	; 40
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	28 e2       	ldi	r18, 0x28	; 40
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	f9 01       	movw	r30, r18
     a4e:	20 81       	ld	r18, Z
     a50:	2d 7f       	andi	r18, 0xFD	; 253
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     a56:	88 e2       	ldi	r24, 0x28	; 40
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	20 e3       	ldi	r18, 0x30	; 48
     a5c:	fc 01       	movw	r30, r24
     a5e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     a60:	88 e2       	ldi	r24, 0x28	; 40
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	28 e2       	ldi	r18, 0x28	; 40
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	f9 01       	movw	r30, r18
     a6a:	20 81       	ld	r18, Z
     a6c:	24 60       	ori	r18, 0x04	; 4
     a6e:	fc 01       	movw	r30, r24
     a70:	20 83       	st	Z, r18
     a72:	9e 01       	movw	r18, r28
     a74:	29 5b       	subi	r18, 0xB9	; 185
     a76:	3f 4f       	sbci	r19, 0xFF	; 255
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 ea       	ldi	r26, 0xA0	; 160
     a7e:	b0 e4       	ldi	r27, 0x40	; 64
     a80:	f9 01       	movw	r30, r18
     a82:	80 83       	st	Z, r24
     a84:	91 83       	std	Z+1, r25	; 0x01
     a86:	a2 83       	std	Z+2, r26	; 0x02
     a88:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     a8a:	8e 01       	movw	r16, r28
     a8c:	05 5b       	subi	r16, 0xB5	; 181
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	ce 01       	movw	r24, r28
     a92:	89 5b       	subi	r24, 0xB9	; 185
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	fc 01       	movw	r30, r24
     a98:	60 81       	ld	r22, Z
     a9a:	71 81       	ldd	r23, Z+1	; 0x01
     a9c:	82 81       	ldd	r24, Z+2	; 0x02
     a9e:	93 81       	ldd	r25, Z+3	; 0x03
     aa0:	26 e6       	ldi	r18, 0x66	; 102
     aa2:	36 e6       	ldi	r19, 0x66	; 102
     aa4:	46 e6       	ldi	r20, 0x66	; 102
     aa6:	55 e4       	ldi	r21, 0x45	; 69
     aa8:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	f8 01       	movw	r30, r16
     ab2:	80 83       	st	Z, r24
     ab4:	91 83       	std	Z+1, r25	; 0x01
     ab6:	a2 83       	std	Z+2, r26	; 0x02
     ab8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     aba:	ce 01       	movw	r24, r28
     abc:	85 5b       	subi	r24, 0xB5	; 181
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	11 e0       	ldi	r17, 0x01	; 1
     ac2:	fc 01       	movw	r30, r24
     ac4:	60 81       	ld	r22, Z
     ac6:	71 81       	ldd	r23, Z+1	; 0x01
     ac8:	82 81       	ldd	r24, Z+2	; 0x02
     aca:	93 81       	ldd	r25, Z+3	; 0x03
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 e8       	ldi	r20, 0x80	; 128
     ad2:	5f e3       	ldi	r21, 0x3F	; 63
     ad4:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     ad8:	88 23       	and	r24, r24
     ada:	0c f0       	brlt	.+2      	; 0xade <lcd_set_4bit+0x6f0>
     adc:	10 e0       	ldi	r17, 0x00	; 0
     ade:	11 23       	and	r17, r17
     ae0:	49 f0       	breq	.+18     	; 0xaf4 <lcd_set_4bit+0x706>
		__ticks = 1;
     ae2:	ce 01       	movw	r24, r28
     ae4:	81 5b       	subi	r24, 0xB1	; 177
     ae6:	9f 4f       	sbci	r25, 0xFF	; 255
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	fc 01       	movw	r30, r24
     aee:	31 83       	std	Z+1, r19	; 0x01
     af0:	20 83       	st	Z, r18
     af2:	74 c0       	rjmp	.+232    	; 0xbdc <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     af4:	ce 01       	movw	r24, r28
     af6:	85 5b       	subi	r24, 0xB5	; 181
     af8:	9f 4f       	sbci	r25, 0xFF	; 255
     afa:	11 e0       	ldi	r17, 0x01	; 1
     afc:	fc 01       	movw	r30, r24
     afe:	60 81       	ld	r22, Z
     b00:	71 81       	ldd	r23, Z+1	; 0x01
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	3f ef       	ldi	r19, 0xFF	; 255
     b0a:	4f e7       	ldi	r20, 0x7F	; 127
     b0c:	57 e4       	ldi	r21, 0x47	; 71
     b0e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     b12:	18 16       	cp	r1, r24
     b14:	0c f0       	brlt	.+2      	; 0xb18 <lcd_set_4bit+0x72a>
     b16:	10 e0       	ldi	r17, 0x00	; 0
     b18:	11 23       	and	r17, r17
     b1a:	09 f4       	brne	.+2      	; 0xb1e <lcd_set_4bit+0x730>
     b1c:	4d c0       	rjmp	.+154    	; 0xbb8 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b1e:	ce 01       	movw	r24, r28
     b20:	89 5b       	subi	r24, 0xB9	; 185
     b22:	9f 4f       	sbci	r25, 0xFF	; 255
     b24:	fc 01       	movw	r30, r24
     b26:	60 81       	ld	r22, Z
     b28:	71 81       	ldd	r23, Z+1	; 0x01
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	40 e2       	ldi	r20, 0x20	; 32
     b34:	51 e4       	ldi	r21, 0x41	; 65
     b36:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	8e 01       	movw	r16, r28
     b40:	01 5b       	subi	r16, 0xB1	; 177
     b42:	1f 4f       	sbci	r17, 0xFF	; 255
     b44:	bc 01       	movw	r22, r24
     b46:	cd 01       	movw	r24, r26
     b48:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	f8 01       	movw	r30, r16
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
     b56:	27 c0       	rjmp	.+78     	; 0xba6 <lcd_set_4bit+0x7b8>
     b58:	ce 01       	movw	r24, r28
     b5a:	8f 5a       	subi	r24, 0xAF	; 175
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	20 e7       	ldi	r18, 0x70	; 112
     b60:	31 e0       	ldi	r19, 0x01	; 1
     b62:	fc 01       	movw	r30, r24
     b64:	31 83       	std	Z+1, r19	; 0x01
     b66:	20 83       	st	Z, r18
     b68:	ce 01       	movw	r24, r28
     b6a:	8f 5a       	subi	r24, 0xAF	; 175
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	fc 01       	movw	r30, r24
     b70:	80 81       	ld	r24, Z
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	8c 01       	movw	r16, r24
     b76:	c8 01       	movw	r24, r16
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <lcd_set_4bit+0x78a>
     b7c:	8c 01       	movw	r16, r24
     b7e:	ce 01       	movw	r24, r28
     b80:	8f 5a       	subi	r24, 0xAF	; 175
     b82:	9f 4f       	sbci	r25, 0xFF	; 255
     b84:	fc 01       	movw	r30, r24
     b86:	11 83       	std	Z+1, r17	; 0x01
     b88:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8a:	ce 01       	movw	r24, r28
     b8c:	81 5b       	subi	r24, 0xB1	; 177
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	9e 01       	movw	r18, r28
     b92:	21 5b       	subi	r18, 0xB1	; 177
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	f9 01       	movw	r30, r18
     b98:	20 81       	ld	r18, Z
     b9a:	31 81       	ldd	r19, Z+1	; 0x01
     b9c:	21 50       	subi	r18, 0x01	; 1
     b9e:	30 40       	sbci	r19, 0x00	; 0
     ba0:	fc 01       	movw	r30, r24
     ba2:	31 83       	std	Z+1, r19	; 0x01
     ba4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba6:	ce 01       	movw	r24, r28
     ba8:	81 5b       	subi	r24, 0xB1	; 177
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	fc 01       	movw	r30, r24
     bae:	80 81       	ld	r24, Z
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	89 f6       	brne	.-94     	; 0xb58 <lcd_set_4bit+0x76a>
     bb6:	2f c0       	rjmp	.+94     	; 0xc16 <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bb8:	8e 01       	movw	r16, r28
     bba:	01 5b       	subi	r16, 0xB1	; 177
     bbc:	1f 4f       	sbci	r17, 0xFF	; 255
     bbe:	ce 01       	movw	r24, r28
     bc0:	85 5b       	subi	r24, 0xB5	; 181
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	fc 01       	movw	r30, r24
     bc6:	60 81       	ld	r22, Z
     bc8:	71 81       	ldd	r23, Z+1	; 0x01
     bca:	82 81       	ldd	r24, Z+2	; 0x02
     bcc:	93 81       	ldd	r25, Z+3	; 0x03
     bce:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	f8 01       	movw	r30, r16
     bd8:	91 83       	std	Z+1, r25	; 0x01
     bda:	80 83       	st	Z, r24
     bdc:	ce 01       	movw	r24, r28
     bde:	8d 5a       	subi	r24, 0xAD	; 173
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	9e 01       	movw	r18, r28
     be4:	21 5b       	subi	r18, 0xB1	; 177
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
     be8:	f9 01       	movw	r30, r18
     bea:	20 81       	ld	r18, Z
     bec:	31 81       	ldd	r19, Z+1	; 0x01
     bee:	fc 01       	movw	r30, r24
     bf0:	31 83       	std	Z+1, r19	; 0x01
     bf2:	20 83       	st	Z, r18
     bf4:	ce 01       	movw	r24, r28
     bf6:	8d 5a       	subi	r24, 0xAD	; 173
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	8c 01       	movw	r16, r24
     c02:	c8 01       	movw	r24, r16
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <lcd_set_4bit+0x816>
     c08:	8c 01       	movw	r16, r24
     c0a:	ce 01       	movw	r24, r28
     c0c:	8d 5a       	subi	r24, 0xAD	; 173
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	fc 01       	movw	r30, r24
     c12:	11 83       	std	Z+1, r17	; 0x01
     c14:	00 83       	st	Z, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     c16:	88 e2       	ldi	r24, 0x28	; 40
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	28 e2       	ldi	r18, 0x28	; 40
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	f9 01       	movw	r30, r18
     c20:	20 81       	ld	r18, Z
     c22:	2b 7f       	andi	r18, 0xFB	; 251
     c24:	fc 01       	movw	r30, r24
     c26:	20 83       	st	Z, r18
     c28:	9e 01       	movw	r18, r28
     c2a:	2b 5a       	subi	r18, 0xAB	; 171
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a0 e8       	ldi	r26, 0x80	; 128
     c34:	bf e3       	ldi	r27, 0x3F	; 63
     c36:	f9 01       	movw	r30, r18
     c38:	80 83       	st	Z, r24
     c3a:	91 83       	std	Z+1, r25	; 0x01
     c3c:	a2 83       	std	Z+2, r26	; 0x02
     c3e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     c40:	8e 01       	movw	r16, r28
     c42:	07 5a       	subi	r16, 0xA7	; 167
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	ce 01       	movw	r24, r28
     c48:	8b 5a       	subi	r24, 0xAB	; 171
     c4a:	9f 4f       	sbci	r25, 0xFF	; 255
     c4c:	fc 01       	movw	r30, r24
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	93 81       	ldd	r25, Z+3	; 0x03
     c56:	26 e6       	ldi	r18, 0x66	; 102
     c58:	36 e6       	ldi	r19, 0x66	; 102
     c5a:	46 e6       	ldi	r20, 0x66	; 102
     c5c:	55 e4       	ldi	r21, 0x45	; 69
     c5e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	f8 01       	movw	r30, r16
     c68:	80 83       	st	Z, r24
     c6a:	91 83       	std	Z+1, r25	; 0x01
     c6c:	a2 83       	std	Z+2, r26	; 0x02
     c6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c70:	ce 01       	movw	r24, r28
     c72:	87 5a       	subi	r24, 0xA7	; 167
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	11 e0       	ldi	r17, 0x01	; 1
     c78:	fc 01       	movw	r30, r24
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e8       	ldi	r20, 0x80	; 128
     c88:	5f e3       	ldi	r21, 0x3F	; 63
     c8a:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     c8e:	88 23       	and	r24, r24
     c90:	0c f0       	brlt	.+2      	; 0xc94 <lcd_set_4bit+0x8a6>
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	11 23       	and	r17, r17
     c96:	49 f0       	breq	.+18     	; 0xcaa <lcd_set_4bit+0x8bc>
		__ticks = 1;
     c98:	ce 01       	movw	r24, r28
     c9a:	83 5a       	subi	r24, 0xA3	; 163
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	21 e0       	ldi	r18, 0x01	; 1
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	31 83       	std	Z+1, r19	; 0x01
     ca6:	20 83       	st	Z, r18
     ca8:	74 c0       	rjmp	.+232    	; 0xd92 <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     caa:	ce 01       	movw	r24, r28
     cac:	87 5a       	subi	r24, 0xA7	; 167
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	11 e0       	ldi	r17, 0x01	; 1
     cb2:	fc 01       	movw	r30, r24
     cb4:	60 81       	ld	r22, Z
     cb6:	71 81       	ldd	r23, Z+1	; 0x01
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	4f e7       	ldi	r20, 0x7F	; 127
     cc2:	57 e4       	ldi	r21, 0x47	; 71
     cc4:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     cc8:	18 16       	cp	r1, r24
     cca:	0c f0       	brlt	.+2      	; 0xcce <lcd_set_4bit+0x8e0>
     ccc:	10 e0       	ldi	r17, 0x00	; 0
     cce:	11 23       	and	r17, r17
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <lcd_set_4bit+0x8e6>
     cd2:	4d c0       	rjmp	.+154    	; 0xd6e <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd4:	ce 01       	movw	r24, r28
     cd6:	8b 5a       	subi	r24, 0xAB	; 171
     cd8:	9f 4f       	sbci	r25, 0xFF	; 255
     cda:	fc 01       	movw	r30, r24
     cdc:	60 81       	ld	r22, Z
     cde:	71 81       	ldd	r23, Z+1	; 0x01
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e2       	ldi	r20, 0x20	; 32
     cea:	51 e4       	ldi	r21, 0x41	; 65
     cec:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	8e 01       	movw	r16, r28
     cf6:	03 5a       	subi	r16, 0xA3	; 163
     cf8:	1f 4f       	sbci	r17, 0xFF	; 255
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	f8 01       	movw	r30, r16
     d08:	91 83       	std	Z+1, r25	; 0x01
     d0a:	80 83       	st	Z, r24
     d0c:	27 c0       	rjmp	.+78     	; 0xd5c <lcd_set_4bit+0x96e>
     d0e:	ce 01       	movw	r24, r28
     d10:	81 5a       	subi	r24, 0xA1	; 161
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	20 e7       	ldi	r18, 0x70	; 112
     d16:	31 e0       	ldi	r19, 0x01	; 1
     d18:	fc 01       	movw	r30, r24
     d1a:	31 83       	std	Z+1, r19	; 0x01
     d1c:	20 83       	st	Z, r18
     d1e:	ce 01       	movw	r24, r28
     d20:	81 5a       	subi	r24, 0xA1	; 161
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	fc 01       	movw	r30, r24
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	8c 01       	movw	r16, r24
     d2c:	c8 01       	movw	r24, r16
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <lcd_set_4bit+0x940>
     d32:	8c 01       	movw	r16, r24
     d34:	ce 01       	movw	r24, r28
     d36:	81 5a       	subi	r24, 0xA1	; 161
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	fc 01       	movw	r30, r24
     d3c:	11 83       	std	Z+1, r17	; 0x01
     d3e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d40:	ce 01       	movw	r24, r28
     d42:	83 5a       	subi	r24, 0xA3	; 163
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	9e 01       	movw	r18, r28
     d48:	23 5a       	subi	r18, 0xA3	; 163
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	f9 01       	movw	r30, r18
     d4e:	20 81       	ld	r18, Z
     d50:	31 81       	ldd	r19, Z+1	; 0x01
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	30 40       	sbci	r19, 0x00	; 0
     d56:	fc 01       	movw	r30, r24
     d58:	31 83       	std	Z+1, r19	; 0x01
     d5a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	ce 01       	movw	r24, r28
     d5e:	83 5a       	subi	r24, 0xA3	; 163
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	fc 01       	movw	r30, r24
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	89 f6       	brne	.-94     	; 0xd0e <lcd_set_4bit+0x920>
     d6c:	2f c0       	rjmp	.+94     	; 0xdcc <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6e:	8e 01       	movw	r16, r28
     d70:	03 5a       	subi	r16, 0xA3	; 163
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	ce 01       	movw	r24, r28
     d76:	87 5a       	subi	r24, 0xA7	; 167
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	fc 01       	movw	r30, r24
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	f8 01       	movw	r30, r16
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24
     d92:	ce 01       	movw	r24, r28
     d94:	8f 59       	subi	r24, 0x9F	; 159
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	9e 01       	movw	r18, r28
     d9a:	23 5a       	subi	r18, 0xA3	; 163
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	f9 01       	movw	r30, r18
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	fc 01       	movw	r30, r24
     da6:	31 83       	std	Z+1, r19	; 0x01
     da8:	20 83       	st	Z, r18
     daa:	ce 01       	movw	r24, r28
     dac:	8f 59       	subi	r24, 0x9F	; 159
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	fc 01       	movw	r30, r24
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	8c 01       	movw	r16, r24
     db8:	c8 01       	movw	r24, r16
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <lcd_set_4bit+0x9cc>
     dbe:	8c 01       	movw	r16, r24
     dc0:	ce 01       	movw	r24, r28
     dc2:	8f 59       	subi	r24, 0x9F	; 159
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	fc 01       	movw	r30, r24
     dc8:	11 83       	std	Z+1, r17	; 0x01
     dca:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     dcc:	88 e2       	ldi	r24, 0x28	; 40
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	28 e2       	ldi	r18, 0x28	; 40
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	f9 01       	movw	r30, r18
     dd6:	20 81       	ld	r18, Z
     dd8:	2e 7f       	andi	r18, 0xFE	; 254
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     dde:	88 e2       	ldi	r24, 0x28	; 40
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	28 e2       	ldi	r18, 0x28	; 40
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	f9 01       	movw	r30, r18
     de8:	20 81       	ld	r18, Z
     dea:	2d 7f       	andi	r18, 0xFD	; 253
     dec:	fc 01       	movw	r30, r24
     dee:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     df0:	88 e2       	ldi	r24, 0x28	; 40
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	20 e2       	ldi	r18, 0x20	; 32
     df6:	fc 01       	movw	r30, r24
     df8:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     dfa:	88 e2       	ldi	r24, 0x28	; 40
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	28 e2       	ldi	r18, 0x28	; 40
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	f9 01       	movw	r30, r18
     e04:	20 81       	ld	r18, Z
     e06:	24 60       	ori	r18, 0x04	; 4
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
     e0c:	9e 01       	movw	r18, r28
     e0e:	2d 59       	subi	r18, 0x9D	; 157
     e10:	3f 4f       	sbci	r19, 0xFF	; 255
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 ea       	ldi	r26, 0xA0	; 160
     e18:	b0 e4       	ldi	r27, 0x40	; 64
     e1a:	f9 01       	movw	r30, r18
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	a2 83       	std	Z+2, r26	; 0x02
     e22:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     e24:	8e 01       	movw	r16, r28
     e26:	09 59       	subi	r16, 0x99	; 153
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	ce 01       	movw	r24, r28
     e2c:	8d 59       	subi	r24, 0x9D	; 157
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	fc 01       	movw	r30, r24
     e32:	60 81       	ld	r22, Z
     e34:	71 81       	ldd	r23, Z+1	; 0x01
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	26 e6       	ldi	r18, 0x66	; 102
     e3c:	36 e6       	ldi	r19, 0x66	; 102
     e3e:	46 e6       	ldi	r20, 0x66	; 102
     e40:	55 e4       	ldi	r21, 0x45	; 69
     e42:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	f8 01       	movw	r30, r16
     e4c:	80 83       	st	Z, r24
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	a2 83       	std	Z+2, r26	; 0x02
     e52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e54:	ce 01       	movw	r24, r28
     e56:	89 59       	subi	r24, 0x99	; 153
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	11 e0       	ldi	r17, 0x01	; 1
     e5c:	fc 01       	movw	r30, r24
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
     e72:	88 23       	and	r24, r24
     e74:	0c f0       	brlt	.+2      	; 0xe78 <lcd_set_4bit+0xa8a>
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	11 23       	and	r17, r17
     e7a:	49 f0       	breq	.+18     	; 0xe8e <lcd_set_4bit+0xaa0>
		__ticks = 1;
     e7c:	ce 01       	movw	r24, r28
     e7e:	85 59       	subi	r24, 0x95	; 149
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	fc 01       	movw	r30, r24
     e88:	31 83       	std	Z+1, r19	; 0x01
     e8a:	20 83       	st	Z, r18
     e8c:	74 c0       	rjmp	.+232    	; 0xf76 <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     e8e:	ce 01       	movw	r24, r28
     e90:	89 59       	subi	r24, 0x99	; 153
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	11 e0       	ldi	r17, 0x01	; 1
     e96:	fc 01       	movw	r30, r24
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
     ea6:	57 e4       	ldi	r21, 0x47	; 71
     ea8:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
     eac:	18 16       	cp	r1, r24
     eae:	0c f0       	brlt	.+2      	; 0xeb2 <lcd_set_4bit+0xac4>
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	11 23       	and	r17, r17
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <lcd_set_4bit+0xaca>
     eb6:	4d c0       	rjmp	.+154    	; 0xf52 <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb8:	ce 01       	movw	r24, r28
     eba:	8d 59       	subi	r24, 0x9D	; 157
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	fc 01       	movw	r30, r24
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e2       	ldi	r20, 0x20	; 32
     ece:	51 e4       	ldi	r21, 0x41	; 65
     ed0:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8e 01       	movw	r16, r28
     eda:	05 59       	subi	r16, 0x95	; 149
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	f8 01       	movw	r30, r16
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	80 83       	st	Z, r24
     ef0:	27 c0       	rjmp	.+78     	; 0xf40 <lcd_set_4bit+0xb52>
     ef2:	ce 01       	movw	r24, r28
     ef4:	83 59       	subi	r24, 0x93	; 147
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	20 e7       	ldi	r18, 0x70	; 112
     efa:	31 e0       	ldi	r19, 0x01	; 1
     efc:	fc 01       	movw	r30, r24
     efe:	31 83       	std	Z+1, r19	; 0x01
     f00:	20 83       	st	Z, r18
     f02:	ce 01       	movw	r24, r28
     f04:	83 59       	subi	r24, 0x93	; 147
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	fc 01       	movw	r30, r24
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	8c 01       	movw	r16, r24
     f10:	c8 01       	movw	r24, r16
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <lcd_set_4bit+0xb24>
     f16:	8c 01       	movw	r16, r24
     f18:	ce 01       	movw	r24, r28
     f1a:	83 59       	subi	r24, 0x93	; 147
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	fc 01       	movw	r30, r24
     f20:	11 83       	std	Z+1, r17	; 0x01
     f22:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f24:	ce 01       	movw	r24, r28
     f26:	85 59       	subi	r24, 0x95	; 149
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	9e 01       	movw	r18, r28
     f2c:	25 59       	subi	r18, 0x95	; 149
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	f9 01       	movw	r30, r18
     f32:	20 81       	ld	r18, Z
     f34:	31 81       	ldd	r19, Z+1	; 0x01
     f36:	21 50       	subi	r18, 0x01	; 1
     f38:	30 40       	sbci	r19, 0x00	; 0
     f3a:	fc 01       	movw	r30, r24
     f3c:	31 83       	std	Z+1, r19	; 0x01
     f3e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f40:	ce 01       	movw	r24, r28
     f42:	85 59       	subi	r24, 0x95	; 149
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	fc 01       	movw	r30, r24
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	89 f6       	brne	.-94     	; 0xef2 <lcd_set_4bit+0xb04>
     f50:	2f c0       	rjmp	.+94     	; 0xfb0 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f52:	8e 01       	movw	r16, r28
     f54:	05 59       	subi	r16, 0x95	; 149
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	ce 01       	movw	r24, r28
     f5a:	89 59       	subi	r24, 0x99	; 153
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	fc 01       	movw	r30, r24
     f60:	60 81       	ld	r22, Z
     f62:	71 81       	ldd	r23, Z+1	; 0x01
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	f8 01       	movw	r30, r16
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	80 83       	st	Z, r24
     f76:	ce 01       	movw	r24, r28
     f78:	81 59       	subi	r24, 0x91	; 145
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	9e 01       	movw	r18, r28
     f7e:	25 59       	subi	r18, 0x95	; 149
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	f9 01       	movw	r30, r18
     f84:	20 81       	ld	r18, Z
     f86:	31 81       	ldd	r19, Z+1	; 0x01
     f88:	fc 01       	movw	r30, r24
     f8a:	31 83       	std	Z+1, r19	; 0x01
     f8c:	20 83       	st	Z, r18
     f8e:	ce 01       	movw	r24, r28
     f90:	81 59       	subi	r24, 0x91	; 145
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	fc 01       	movw	r30, r24
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	8c 01       	movw	r16, r24
     f9c:	c8 01       	movw	r24, r16
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <lcd_set_4bit+0xbb0>
     fa2:	8c 01       	movw	r16, r24
     fa4:	ce 01       	movw	r24, r28
     fa6:	81 59       	subi	r24, 0x91	; 145
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	fc 01       	movw	r30, r24
     fac:	11 83       	std	Z+1, r17	; 0x01
     fae:	00 83       	st	Z, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     fb0:	88 e2       	ldi	r24, 0x28	; 40
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	28 e2       	ldi	r18, 0x28	; 40
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	2b 7f       	andi	r18, 0xFB	; 251
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
}
     fc2:	c0 59       	subi	r28, 0x90	; 144
     fc4:	df 4f       	sbci	r29, 0xFF	; 255
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	2e 97       	sbiw	r28, 0x0e	; 14
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a0 e8       	ldi	r26, 0x80	; 128
     ff8:	bf e3       	ldi	r27, 0x3F	; 63
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	ab 83       	std	Y+3, r26	; 0x03
    1000:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1002:	69 81       	ldd	r22, Y+1	; 0x01
    1004:	7a 81       	ldd	r23, Y+2	; 0x02
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	26 e6       	ldi	r18, 0x66	; 102
    100c:	36 e6       	ldi	r19, 0x66	; 102
    100e:	46 e6       	ldi	r20, 0x66	; 102
    1010:	55 e4       	ldi	r21, 0x45	; 69
    1012:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	af 83       	std	Y+7, r26	; 0x07
    1020:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1022:	11 e0       	ldi	r17, 0x01	; 1
    1024:	6d 81       	ldd	r22, Y+5	; 0x05
    1026:	7e 81       	ldd	r23, Y+6	; 0x06
    1028:	8f 81       	ldd	r24, Y+7	; 0x07
    102a:	98 85       	ldd	r25, Y+8	; 0x08
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    1038:	88 23       	and	r24, r24
    103a:	0c f0       	brlt	.+2      	; 0x103e <lcd_init+0x64>
    103c:	10 e0       	ldi	r17, 0x00	; 0
    103e:	11 23       	and	r17, r17
    1040:	29 f0       	breq	.+10     	; 0x104c <lcd_init+0x72>
		__ticks = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9a 87       	std	Y+10, r25	; 0x0a
    1048:	89 87       	std	Y+9, r24	; 0x09
    104a:	46 c0       	rjmp	.+140    	; 0x10d8 <lcd_init+0xfe>
	else if (__tmp > 65535)
    104c:	11 e0       	ldi	r17, 0x01	; 1
    104e:	6d 81       	ldd	r22, Y+5	; 0x05
    1050:	7e 81       	ldd	r23, Y+6	; 0x06
    1052:	8f 81       	ldd	r24, Y+7	; 0x07
    1054:	98 85       	ldd	r25, Y+8	; 0x08
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	4f e7       	ldi	r20, 0x7F	; 127
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    1062:	18 16       	cp	r1, r24
    1064:	0c f0       	brlt	.+2      	; 0x1068 <lcd_init+0x8e>
    1066:	10 e0       	ldi	r17, 0x00	; 0
    1068:	11 23       	and	r17, r17
    106a:	61 f1       	breq	.+88     	; 0x10c4 <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106c:	69 81       	ldd	r22, Y+1	; 0x01
    106e:	7a 81       	ldd	r23, Y+2	; 0x02
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e2       	ldi	r20, 0x20	; 32
    107a:	51 e4       	ldi	r21, 0x41	; 65
    107c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	9a 87       	std	Y+10, r25	; 0x0a
    1092:	89 87       	std	Y+9, r24	; 0x09
    1094:	12 c0       	rjmp	.+36     	; 0x10ba <lcd_init+0xe0>
    1096:	80 e7       	ldi	r24, 0x70	; 112
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	9c 87       	std	Y+12, r25	; 0x0c
    109c:	8b 87       	std	Y+11, r24	; 0x0b
    109e:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a2:	8c 01       	movw	r16, r24
    10a4:	c8 01       	movw	r24, r16
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <lcd_init+0xcc>
    10aa:	8c 01       	movw	r16, r24
    10ac:	1c 87       	std	Y+12, r17	; 0x0c
    10ae:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	89 85       	ldd	r24, Y+9	; 0x09
    10b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	9a 87       	std	Y+10, r25	; 0x0a
    10b8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	51 f7       	brne	.-44     	; 0x1096 <lcd_init+0xbc>
    10c2:	17 c0       	rjmp	.+46     	; 0x10f2 <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c4:	6d 81       	ldd	r22, Y+5	; 0x05
    10c6:	7e 81       	ldd	r23, Y+6	; 0x06
    10c8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ca:	98 85       	ldd	r25, Y+8	; 0x08
    10cc:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	9a 87       	std	Y+10, r25	; 0x0a
    10d6:	89 87       	std	Y+9, r24	; 0x09
    10d8:	89 85       	ldd	r24, Y+9	; 0x09
    10da:	9a 85       	ldd	r25, Y+10	; 0x0a
    10dc:	9e 87       	std	Y+14, r25	; 0x0e
    10de:	8d 87       	std	Y+13, r24	; 0x0d
    10e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e4:	8c 01       	movw	r16, r24
    10e6:	c8 01       	movw	r24, r16
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <lcd_init+0x10e>
    10ec:	8c 01       	movw	r16, r24
    10ee:	1e 87       	std	Y+14, r17	; 0x0e
    10f0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
    10f2:	88 e2       	ldi	r24, 0x28	; 40
    10f4:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
    1104:	8e e0       	ldi	r24, 0x0E	; 14
    1106:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
    110a:	80 e8       	ldi	r24, 0x80	; 128
    110c:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
}
    1110:	2e 96       	adiw	r28, 0x0e	; 14
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	08 95       	ret

00001126 <lcd_wr_command>:

	 
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	6e 97       	sbiw	r28, 0x1e	; 30
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    1140:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1142:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	80 7f       	andi	r24, 0xF0	; 240
    1148:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    114a:	88 e2       	ldi	r24, 0x28	; 40
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	28 e2       	ldi	r18, 0x28	; 40
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	2f 70       	andi	r18, 0x0F	; 15
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
	lcd_port |= temp;
    115c:	88 e2       	ldi	r24, 0x28	; 40
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	28 e2       	ldi	r18, 0x28	; 40
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	f9 01       	movw	r30, r18
    1166:	30 81       	ld	r19, Z
    1168:	29 81       	ldd	r18, Y+1	; 0x01
    116a:	23 2b       	or	r18, r19
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    1170:	88 e2       	ldi	r24, 0x28	; 40
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	28 e2       	ldi	r18, 0x28	; 40
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	f9 01       	movw	r30, r18
    117a:	20 81       	ld	r18, Z
    117c:	2e 7f       	andi	r18, 0xFE	; 254
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1182:	88 e2       	ldi	r24, 0x28	; 40
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	28 e2       	ldi	r18, 0x28	; 40
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	f9 01       	movw	r30, r18
    118c:	20 81       	ld	r18, Z
    118e:	2d 7f       	andi	r18, 0xFD	; 253
    1190:	fc 01       	movw	r30, r24
    1192:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1194:	88 e2       	ldi	r24, 0x28	; 40
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	28 e2       	ldi	r18, 0x28	; 40
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	f9 01       	movw	r30, r18
    119e:	20 81       	ld	r18, Z
    11a0:	24 60       	ori	r18, 0x04	; 4
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 ea       	ldi	r26, 0xA0	; 160
    11ac:	b0 e4       	ldi	r27, 0x40	; 64
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	9b 83       	std	Y+3, r25	; 0x03
    11b2:	ac 83       	std	Y+4, r26	; 0x04
    11b4:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6a 81       	ldd	r22, Y+2	; 0x02
    11b8:	7b 81       	ldd	r23, Y+3	; 0x03
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	26 e6       	ldi	r18, 0x66	; 102
    11c0:	36 e6       	ldi	r19, 0x66	; 102
    11c2:	46 e6       	ldi	r20, 0x66	; 102
    11c4:	55 e4       	ldi	r21, 0x45	; 69
    11c6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8e 83       	std	Y+6, r24	; 0x06
    11d0:	9f 83       	std	Y+7, r25	; 0x07
    11d2:	a8 87       	std	Y+8, r26	; 0x08
    11d4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    11d6:	11 e0       	ldi	r17, 0x01	; 1
    11d8:	6e 81       	ldd	r22, Y+6	; 0x06
    11da:	7f 81       	ldd	r23, Y+7	; 0x07
    11dc:	88 85       	ldd	r24, Y+8	; 0x08
    11de:	99 85       	ldd	r25, Y+9	; 0x09
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	0c f0       	brlt	.+2      	; 0x11f2 <lcd_wr_command+0xcc>
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	11 23       	and	r17, r17
    11f4:	29 f0       	breq	.+10     	; 0x1200 <lcd_wr_command+0xda>
		__ticks = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9b 87       	std	Y+11, r25	; 0x0b
    11fc:	8a 87       	std	Y+10, r24	; 0x0a
    11fe:	46 c0       	rjmp	.+140    	; 0x128c <lcd_wr_command+0x166>
	else if (__tmp > 65535)
    1200:	11 e0       	ldi	r17, 0x01	; 1
    1202:	6e 81       	ldd	r22, Y+6	; 0x06
    1204:	7f 81       	ldd	r23, Y+7	; 0x07
    1206:	88 85       	ldd	r24, Y+8	; 0x08
    1208:	99 85       	ldd	r25, Y+9	; 0x09
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	3f ef       	ldi	r19, 0xFF	; 255
    120e:	4f e7       	ldi	r20, 0x7F	; 127
    1210:	57 e4       	ldi	r21, 0x47	; 71
    1212:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    1216:	18 16       	cp	r1, r24
    1218:	0c f0       	brlt	.+2      	; 0x121c <lcd_wr_command+0xf6>
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	11 23       	and	r17, r17
    121e:	61 f1       	breq	.+88     	; 0x1278 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1220:	6a 81       	ldd	r22, Y+2	; 0x02
    1222:	7b 81       	ldd	r23, Y+3	; 0x03
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e2       	ldi	r20, 0x20	; 32
    122e:	51 e4       	ldi	r21, 0x41	; 65
    1230:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9b 87       	std	Y+11, r25	; 0x0b
    1246:	8a 87       	std	Y+10, r24	; 0x0a
    1248:	12 c0       	rjmp	.+36     	; 0x126e <lcd_wr_command+0x148>
    124a:	80 e7       	ldi	r24, 0x70	; 112
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	9d 87       	std	Y+13, r25	; 0x0d
    1250:	8c 87       	std	Y+12, r24	; 0x0c
    1252:	8c 85       	ldd	r24, Y+12	; 0x0c
    1254:	9d 85       	ldd	r25, Y+13	; 0x0d
    1256:	8c 01       	movw	r16, r24
    1258:	c8 01       	movw	r24, r16
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <lcd_wr_command+0x134>
    125e:	8c 01       	movw	r16, r24
    1260:	1d 87       	std	Y+13, r17	; 0x0d
    1262:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	8a 85       	ldd	r24, Y+10	; 0x0a
    1266:	9b 85       	ldd	r25, Y+11	; 0x0b
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	9b 87       	std	Y+11, r25	; 0x0b
    126c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1270:	9b 85       	ldd	r25, Y+11	; 0x0b
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	51 f7       	brne	.-44     	; 0x124a <lcd_wr_command+0x124>
    1276:	17 c0       	rjmp	.+46     	; 0x12a6 <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1278:	6e 81       	ldd	r22, Y+6	; 0x06
    127a:	7f 81       	ldd	r23, Y+7	; 0x07
    127c:	88 85       	ldd	r24, Y+8	; 0x08
    127e:	99 85       	ldd	r25, Y+9	; 0x09
    1280:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	9b 87       	std	Y+11, r25	; 0x0b
    128a:	8a 87       	std	Y+10, r24	; 0x0a
    128c:	8a 85       	ldd	r24, Y+10	; 0x0a
    128e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1290:	9f 87       	std	Y+15, r25	; 0x0f
    1292:	8e 87       	std	Y+14, r24	; 0x0e
    1294:	8e 85       	ldd	r24, Y+14	; 0x0e
    1296:	9f 85       	ldd	r25, Y+15	; 0x0f
    1298:	8c 01       	movw	r16, r24
    129a:	f8 01       	movw	r30, r16
    129c:	31 97       	sbiw	r30, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <lcd_wr_command+0x176>
    12a0:	8f 01       	movw	r16, r30
    12a2:	1f 87       	std	Y+15, r17	; 0x0f
    12a4:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    12a6:	88 e2       	ldi	r24, 0x28	; 40
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	28 e2       	ldi	r18, 0x28	; 40
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	f9 01       	movw	r30, r18
    12b0:	20 81       	ld	r18, Z
    12b2:	2b 7f       	andi	r18, 0xFB	; 251
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
    12b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ba:	8f 70       	andi	r24, 0x0F	; 15
    12bc:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    12be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c0:	82 95       	swap	r24
    12c2:	80 7f       	andi	r24, 0xF0	; 240
    12c4:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    12c6:	88 e2       	ldi	r24, 0x28	; 40
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	28 e2       	ldi	r18, 0x28	; 40
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	20 81       	ld	r18, Z
    12d2:	2f 70       	andi	r18, 0x0F	; 15
    12d4:	fc 01       	movw	r30, r24
    12d6:	20 83       	st	Z, r18
	lcd_port |= cmd;
    12d8:	88 e2       	ldi	r24, 0x28	; 40
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	28 e2       	ldi	r18, 0x28	; 40
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	f9 01       	movw	r30, r18
    12e2:	30 81       	ld	r19, Z
    12e4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    12e6:	23 2b       	or	r18, r19
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    12ec:	88 e2       	ldi	r24, 0x28	; 40
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	28 e2       	ldi	r18, 0x28	; 40
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	f9 01       	movw	r30, r18
    12f6:	20 81       	ld	r18, Z
    12f8:	2e 7f       	andi	r18, 0xFE	; 254
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    12fe:	88 e2       	ldi	r24, 0x28	; 40
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	28 e2       	ldi	r18, 0x28	; 40
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	f9 01       	movw	r30, r18
    1308:	20 81       	ld	r18, Z
    130a:	2d 7f       	andi	r18, 0xFD	; 253
    130c:	fc 01       	movw	r30, r24
    130e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1310:	88 e2       	ldi	r24, 0x28	; 40
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	28 e2       	ldi	r18, 0x28	; 40
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	f9 01       	movw	r30, r18
    131a:	20 81       	ld	r18, Z
    131c:	24 60       	ori	r18, 0x04	; 4
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a0 ea       	ldi	r26, 0xA0	; 160
    1328:	b0 e4       	ldi	r27, 0x40	; 64
    132a:	88 8b       	std	Y+16, r24	; 0x10
    132c:	99 8b       	std	Y+17, r25	; 0x11
    132e:	aa 8b       	std	Y+18, r26	; 0x12
    1330:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1332:	68 89       	ldd	r22, Y+16	; 0x10
    1334:	79 89       	ldd	r23, Y+17	; 0x11
    1336:	8a 89       	ldd	r24, Y+18	; 0x12
    1338:	9b 89       	ldd	r25, Y+19	; 0x13
    133a:	26 e6       	ldi	r18, 0x66	; 102
    133c:	36 e6       	ldi	r19, 0x66	; 102
    133e:	46 e6       	ldi	r20, 0x66	; 102
    1340:	55 e4       	ldi	r21, 0x45	; 69
    1342:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	8c 8b       	std	Y+20, r24	; 0x14
    134c:	9d 8b       	std	Y+21, r25	; 0x15
    134e:	ae 8b       	std	Y+22, r26	; 0x16
    1350:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1352:	11 e0       	ldi	r17, 0x01	; 1
    1354:	6c 89       	ldd	r22, Y+20	; 0x14
    1356:	7d 89       	ldd	r23, Y+21	; 0x15
    1358:	8e 89       	ldd	r24, Y+22	; 0x16
    135a:	9f 89       	ldd	r25, Y+23	; 0x17
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	5f e3       	ldi	r21, 0x3F	; 63
    1364:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    1368:	88 23       	and	r24, r24
    136a:	0c f0       	brlt	.+2      	; 0x136e <lcd_wr_command+0x248>
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	11 23       	and	r17, r17
    1370:	29 f0       	breq	.+10     	; 0x137c <lcd_wr_command+0x256>
		__ticks = 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	99 8f       	std	Y+25, r25	; 0x19
    1378:	88 8f       	std	Y+24, r24	; 0x18
    137a:	46 c0       	rjmp	.+140    	; 0x1408 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    137c:	11 e0       	ldi	r17, 0x01	; 1
    137e:	6c 89       	ldd	r22, Y+20	; 0x14
    1380:	7d 89       	ldd	r23, Y+21	; 0x15
    1382:	8e 89       	ldd	r24, Y+22	; 0x16
    1384:	9f 89       	ldd	r25, Y+23	; 0x17
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    1392:	18 16       	cp	r1, r24
    1394:	0c f0       	brlt	.+2      	; 0x1398 <lcd_wr_command+0x272>
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	11 23       	and	r17, r17
    139a:	61 f1       	breq	.+88     	; 0x13f4 <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139c:	68 89       	ldd	r22, Y+16	; 0x10
    139e:	79 89       	ldd	r23, Y+17	; 0x11
    13a0:	8a 89       	ldd	r24, Y+18	; 0x12
    13a2:	9b 89       	ldd	r25, Y+19	; 0x13
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	51 e4       	ldi	r21, 0x41	; 65
    13ac:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	99 8f       	std	Y+25, r25	; 0x19
    13c2:	88 8f       	std	Y+24, r24	; 0x18
    13c4:	12 c0       	rjmp	.+36     	; 0x13ea <lcd_wr_command+0x2c4>
    13c6:	80 e7       	ldi	r24, 0x70	; 112
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	9b 8f       	std	Y+27, r25	; 0x1b
    13cc:	8a 8f       	std	Y+26, r24	; 0x1a
    13ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13d2:	8c 01       	movw	r16, r24
    13d4:	c8 01       	movw	r24, r16
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <lcd_wr_command+0x2b0>
    13da:	8c 01       	movw	r16, r24
    13dc:	1b 8f       	std	Y+27, r17	; 0x1b
    13de:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e0:	88 8d       	ldd	r24, Y+24	; 0x18
    13e2:	99 8d       	ldd	r25, Y+25	; 0x19
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	99 8f       	std	Y+25, r25	; 0x19
    13e8:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ea:	88 8d       	ldd	r24, Y+24	; 0x18
    13ec:	99 8d       	ldd	r25, Y+25	; 0x19
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	51 f7       	brne	.-44     	; 0x13c6 <lcd_wr_command+0x2a0>
    13f2:	17 c0       	rjmp	.+46     	; 0x1422 <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f4:	6c 89       	ldd	r22, Y+20	; 0x14
    13f6:	7d 89       	ldd	r23, Y+21	; 0x15
    13f8:	8e 89       	ldd	r24, Y+22	; 0x16
    13fa:	9f 89       	ldd	r25, Y+23	; 0x17
    13fc:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	99 8f       	std	Y+25, r25	; 0x19
    1406:	88 8f       	std	Y+24, r24	; 0x18
    1408:	88 8d       	ldd	r24, Y+24	; 0x18
    140a:	99 8d       	ldd	r25, Y+25	; 0x19
    140c:	9d 8f       	std	Y+29, r25	; 0x1d
    140e:	8c 8f       	std	Y+28, r24	; 0x1c
    1410:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1412:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1414:	8c 01       	movw	r16, r24
    1416:	f8 01       	movw	r30, r16
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <lcd_wr_command+0x2f2>
    141c:	8f 01       	movw	r16, r30
    141e:	1d 8f       	std	Y+29, r17	; 0x1d
    1420:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1422:	88 e2       	ldi	r24, 0x28	; 40
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	28 e2       	ldi	r18, 0x28	; 40
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	f9 01       	movw	r30, r18
    142c:	20 81       	ld	r18, Z
    142e:	2b 7f       	andi	r18, 0xFB	; 251
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
}
    1434:	6e 96       	adiw	r28, 0x1e	; 30
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <lcd_wr_char>:

//Function to write data on LCD
void lcd_wr_char(char letter)
{
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	6e 97       	sbiw	r28, 0x1e	; 30
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1464:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1466:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 7f       	andi	r24, 0xF0	; 240
    146c:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    146e:	88 e2       	ldi	r24, 0x28	; 40
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	28 e2       	ldi	r18, 0x28	; 40
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	f9 01       	movw	r30, r18
    1478:	20 81       	ld	r18, Z
    147a:	2f 70       	andi	r18, 0x0F	; 15
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
	lcd_port |= temp;
    1480:	88 e2       	ldi	r24, 0x28	; 40
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	28 e2       	ldi	r18, 0x28	; 40
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	f9 01       	movw	r30, r18
    148a:	30 81       	ld	r19, Z
    148c:	29 81       	ldd	r18, Y+1	; 0x01
    148e:	23 2b       	or	r18, r19
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1494:	88 e2       	ldi	r24, 0x28	; 40
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	28 e2       	ldi	r18, 0x28	; 40
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	f9 01       	movw	r30, r18
    149e:	20 81       	ld	r18, Z
    14a0:	21 60       	ori	r18, 0x01	; 1
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    14a6:	88 e2       	ldi	r24, 0x28	; 40
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	28 e2       	ldi	r18, 0x28	; 40
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	f9 01       	movw	r30, r18
    14b0:	20 81       	ld	r18, Z
    14b2:	2d 7f       	andi	r18, 0xFD	; 253
    14b4:	fc 01       	movw	r30, r24
    14b6:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    14b8:	88 e2       	ldi	r24, 0x28	; 40
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	28 e2       	ldi	r18, 0x28	; 40
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	f9 01       	movw	r30, r18
    14c2:	20 81       	ld	r18, Z
    14c4:	24 60       	ori	r18, 0x04	; 4
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 ea       	ldi	r26, 0xA0	; 160
    14d0:	b0 e4       	ldi	r27, 0x40	; 64
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	9b 83       	std	Y+3, r25	; 0x03
    14d6:	ac 83       	std	Y+4, r26	; 0x04
    14d8:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    14da:	6a 81       	ldd	r22, Y+2	; 0x02
    14dc:	7b 81       	ldd	r23, Y+3	; 0x03
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	9d 81       	ldd	r25, Y+5	; 0x05
    14e2:	26 e6       	ldi	r18, 0x66	; 102
    14e4:	36 e6       	ldi	r19, 0x66	; 102
    14e6:	46 e6       	ldi	r20, 0x66	; 102
    14e8:	55 e4       	ldi	r21, 0x45	; 69
    14ea:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8e 83       	std	Y+6, r24	; 0x06
    14f4:	9f 83       	std	Y+7, r25	; 0x07
    14f6:	a8 87       	std	Y+8, r26	; 0x08
    14f8:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    14fa:	11 e0       	ldi	r17, 0x01	; 1
    14fc:	6e 81       	ldd	r22, Y+6	; 0x06
    14fe:	7f 81       	ldd	r23, Y+7	; 0x07
    1500:	88 85       	ldd	r24, Y+8	; 0x08
    1502:	99 85       	ldd	r25, Y+9	; 0x09
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5f e3       	ldi	r21, 0x3F	; 63
    150c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    1510:	88 23       	and	r24, r24
    1512:	0c f0       	brlt	.+2      	; 0x1516 <lcd_wr_char+0xcc>
    1514:	10 e0       	ldi	r17, 0x00	; 0
    1516:	11 23       	and	r17, r17
    1518:	29 f0       	breq	.+10     	; 0x1524 <lcd_wr_char+0xda>
		__ticks = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9b 87       	std	Y+11, r25	; 0x0b
    1520:	8a 87       	std	Y+10, r24	; 0x0a
    1522:	46 c0       	rjmp	.+140    	; 0x15b0 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    1524:	11 e0       	ldi	r17, 0x01	; 1
    1526:	6e 81       	ldd	r22, Y+6	; 0x06
    1528:	7f 81       	ldd	r23, Y+7	; 0x07
    152a:	88 85       	ldd	r24, Y+8	; 0x08
    152c:	99 85       	ldd	r25, Y+9	; 0x09
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    153a:	18 16       	cp	r1, r24
    153c:	0c f0       	brlt	.+2      	; 0x1540 <lcd_wr_char+0xf6>
    153e:	10 e0       	ldi	r17, 0x00	; 0
    1540:	11 23       	and	r17, r17
    1542:	61 f1       	breq	.+88     	; 0x159c <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	6a 81       	ldd	r22, Y+2	; 0x02
    1546:	7b 81       	ldd	r23, Y+3	; 0x03
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9b 87       	std	Y+11, r25	; 0x0b
    156a:	8a 87       	std	Y+10, r24	; 0x0a
    156c:	12 c0       	rjmp	.+36     	; 0x1592 <lcd_wr_char+0x148>
    156e:	80 e7       	ldi	r24, 0x70	; 112
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	9d 87       	std	Y+13, r25	; 0x0d
    1574:	8c 87       	std	Y+12, r24	; 0x0c
    1576:	8c 85       	ldd	r24, Y+12	; 0x0c
    1578:	9d 85       	ldd	r25, Y+13	; 0x0d
    157a:	8c 01       	movw	r16, r24
    157c:	c8 01       	movw	r24, r16
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <lcd_wr_char+0x134>
    1582:	8c 01       	movw	r16, r24
    1584:	1d 87       	std	Y+13, r17	; 0x0d
    1586:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1588:	8a 85       	ldd	r24, Y+10	; 0x0a
    158a:	9b 85       	ldd	r25, Y+11	; 0x0b
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	9b 87       	std	Y+11, r25	; 0x0b
    1590:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1592:	8a 85       	ldd	r24, Y+10	; 0x0a
    1594:	9b 85       	ldd	r25, Y+11	; 0x0b
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	51 f7       	brne	.-44     	; 0x156e <lcd_wr_char+0x124>
    159a:	17 c0       	rjmp	.+46     	; 0x15ca <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159c:	6e 81       	ldd	r22, Y+6	; 0x06
    159e:	7f 81       	ldd	r23, Y+7	; 0x07
    15a0:	88 85       	ldd	r24, Y+8	; 0x08
    15a2:	99 85       	ldd	r25, Y+9	; 0x09
    15a4:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9b 87       	std	Y+11, r25	; 0x0b
    15ae:	8a 87       	std	Y+10, r24	; 0x0a
    15b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b4:	9f 87       	std	Y+15, r25	; 0x0f
    15b6:	8e 87       	std	Y+14, r24	; 0x0e
    15b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    15bc:	8c 01       	movw	r16, r24
    15be:	f8 01       	movw	r30, r16
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <lcd_wr_char+0x176>
    15c4:	8f 01       	movw	r16, r30
    15c6:	1f 87       	std	Y+15, r17	; 0x0f
    15c8:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    15ca:	88 e2       	ldi	r24, 0x28	; 40
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	28 e2       	ldi	r18, 0x28	; 40
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	f9 01       	movw	r30, r18
    15d4:	20 81       	ld	r18, Z
    15d6:	2b 7f       	andi	r18, 0xFB	; 251
    15d8:	fc 01       	movw	r30, r24
    15da:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    15dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15de:	8f 70       	andi	r24, 0x0F	; 15
    15e0:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    15e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15e4:	82 95       	swap	r24
    15e6:	80 7f       	andi	r24, 0xF0	; 240
    15e8:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    15ea:	88 e2       	ldi	r24, 0x28	; 40
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	28 e2       	ldi	r18, 0x28	; 40
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	f9 01       	movw	r30, r18
    15f4:	20 81       	ld	r18, Z
    15f6:	2f 70       	andi	r18, 0x0F	; 15
    15f8:	fc 01       	movw	r30, r24
    15fa:	20 83       	st	Z, r18
	lcd_port |= letter;
    15fc:	88 e2       	ldi	r24, 0x28	; 40
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	28 e2       	ldi	r18, 0x28	; 40
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	f9 01       	movw	r30, r18
    1606:	30 81       	ld	r19, Z
    1608:	2e 8d       	ldd	r18, Y+30	; 0x1e
    160a:	23 2b       	or	r18, r19
    160c:	fc 01       	movw	r30, r24
    160e:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1610:	88 e2       	ldi	r24, 0x28	; 40
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	28 e2       	ldi	r18, 0x28	; 40
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	f9 01       	movw	r30, r18
    161a:	20 81       	ld	r18, Z
    161c:	21 60       	ori	r18, 0x01	; 1
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1622:	88 e2       	ldi	r24, 0x28	; 40
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	28 e2       	ldi	r18, 0x28	; 40
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	f9 01       	movw	r30, r18
    162c:	20 81       	ld	r18, Z
    162e:	2d 7f       	andi	r18, 0xFD	; 253
    1630:	fc 01       	movw	r30, r24
    1632:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1634:	88 e2       	ldi	r24, 0x28	; 40
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	28 e2       	ldi	r18, 0x28	; 40
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	f9 01       	movw	r30, r18
    163e:	20 81       	ld	r18, Z
    1640:	24 60       	ori	r18, 0x04	; 4
    1642:	fc 01       	movw	r30, r24
    1644:	20 83       	st	Z, r18
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a0 ea       	ldi	r26, 0xA0	; 160
    164c:	b0 e4       	ldi	r27, 0x40	; 64
    164e:	88 8b       	std	Y+16, r24	; 0x10
    1650:	99 8b       	std	Y+17, r25	; 0x11
    1652:	aa 8b       	std	Y+18, r26	; 0x12
    1654:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1656:	68 89       	ldd	r22, Y+16	; 0x10
    1658:	79 89       	ldd	r23, Y+17	; 0x11
    165a:	8a 89       	ldd	r24, Y+18	; 0x12
    165c:	9b 89       	ldd	r25, Y+19	; 0x13
    165e:	26 e6       	ldi	r18, 0x66	; 102
    1660:	36 e6       	ldi	r19, 0x66	; 102
    1662:	46 e6       	ldi	r20, 0x66	; 102
    1664:	55 e4       	ldi	r21, 0x45	; 69
    1666:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	8c 8b       	std	Y+20, r24	; 0x14
    1670:	9d 8b       	std	Y+21, r25	; 0x15
    1672:	ae 8b       	std	Y+22, r26	; 0x16
    1674:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1676:	11 e0       	ldi	r17, 0x01	; 1
    1678:	6c 89       	ldd	r22, Y+20	; 0x14
    167a:	7d 89       	ldd	r23, Y+21	; 0x15
    167c:	8e 89       	ldd	r24, Y+22	; 0x16
    167e:	9f 89       	ldd	r25, Y+23	; 0x17
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e8       	ldi	r20, 0x80	; 128
    1686:	5f e3       	ldi	r21, 0x3F	; 63
    1688:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    168c:	88 23       	and	r24, r24
    168e:	0c f0       	brlt	.+2      	; 0x1692 <lcd_wr_char+0x248>
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	11 23       	and	r17, r17
    1694:	29 f0       	breq	.+10     	; 0x16a0 <lcd_wr_char+0x256>
		__ticks = 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	99 8f       	std	Y+25, r25	; 0x19
    169c:	88 8f       	std	Y+24, r24	; 0x18
    169e:	46 c0       	rjmp	.+140    	; 0x172c <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    16a0:	11 e0       	ldi	r17, 0x01	; 1
    16a2:	6c 89       	ldd	r22, Y+20	; 0x14
    16a4:	7d 89       	ldd	r23, Y+21	; 0x15
    16a6:	8e 89       	ldd	r24, Y+22	; 0x16
    16a8:	9f 89       	ldd	r25, Y+23	; 0x17
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	0c f0       	brlt	.+2      	; 0x16bc <lcd_wr_char+0x272>
    16ba:	10 e0       	ldi	r17, 0x00	; 0
    16bc:	11 23       	and	r17, r17
    16be:	61 f1       	breq	.+88     	; 0x1718 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	68 89       	ldd	r22, Y+16	; 0x10
    16c2:	79 89       	ldd	r23, Y+17	; 0x11
    16c4:	8a 89       	ldd	r24, Y+18	; 0x12
    16c6:	9b 89       	ldd	r25, Y+19	; 0x13
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	99 8f       	std	Y+25, r25	; 0x19
    16e6:	88 8f       	std	Y+24, r24	; 0x18
    16e8:	12 c0       	rjmp	.+36     	; 0x170e <lcd_wr_char+0x2c4>
    16ea:	80 e7       	ldi	r24, 0x70	; 112
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	9b 8f       	std	Y+27, r25	; 0x1b
    16f0:	8a 8f       	std	Y+26, r24	; 0x1a
    16f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16f6:	8c 01       	movw	r16, r24
    16f8:	c8 01       	movw	r24, r16
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <lcd_wr_char+0x2b0>
    16fe:	8c 01       	movw	r16, r24
    1700:	1b 8f       	std	Y+27, r17	; 0x1b
    1702:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	88 8d       	ldd	r24, Y+24	; 0x18
    1706:	99 8d       	ldd	r25, Y+25	; 0x19
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	99 8f       	std	Y+25, r25	; 0x19
    170c:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170e:	88 8d       	ldd	r24, Y+24	; 0x18
    1710:	99 8d       	ldd	r25, Y+25	; 0x19
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	51 f7       	brne	.-44     	; 0x16ea <lcd_wr_char+0x2a0>
    1716:	17 c0       	rjmp	.+46     	; 0x1746 <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1718:	6c 89       	ldd	r22, Y+20	; 0x14
    171a:	7d 89       	ldd	r23, Y+21	; 0x15
    171c:	8e 89       	ldd	r24, Y+22	; 0x16
    171e:	9f 89       	ldd	r25, Y+23	; 0x17
    1720:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	99 8f       	std	Y+25, r25	; 0x19
    172a:	88 8f       	std	Y+24, r24	; 0x18
    172c:	88 8d       	ldd	r24, Y+24	; 0x18
    172e:	99 8d       	ldd	r25, Y+25	; 0x19
    1730:	9d 8f       	std	Y+29, r25	; 0x1d
    1732:	8c 8f       	std	Y+28, r24	; 0x1c
    1734:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1736:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1738:	8c 01       	movw	r16, r24
    173a:	f8 01       	movw	r30, r16
    173c:	31 97       	sbiw	r30, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <lcd_wr_char+0x2f2>
    1740:	8f 01       	movw	r16, r30
    1742:	1d 8f       	std	Y+29, r17	; 0x1d
    1744:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1746:	88 e2       	ldi	r24, 0x28	; 40
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	28 e2       	ldi	r18, 0x28	; 40
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	f9 01       	movw	r30, r18
    1750:	20 81       	ld	r18, Z
    1752:	2b 7f       	andi	r18, 0xFB	; 251
    1754:	fc 01       	movw	r30, r24
    1756:	20 83       	st	Z, r18
}
    1758:	6e 96       	adiw	r28, 0x1e	; 30
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <lcd_home>:


void lcd_home()
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	0f 92       	push	r0
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    1792:	0b c0       	rjmp	.+22     	; 0x17aa <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	fc 01       	movw	r30, r24
    179a:	80 81       	ld	r24, Z
    179c:	0e 94 25 0a 	call	0x144a	; 0x144a <lcd_wr_char>
		str++;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	9a 83       	std	Y+2, r25	; 0x02
    17a8:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	fc 01       	movw	r30, r24
    17b0:	80 81       	ld	r24, Z
    17b2:	88 23       	and	r24, r24
    17b4:	79 f7       	brne	.-34     	; 0x1794 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	0f 92       	push	r0
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	91 05       	cpc	r25, r1
    17da:	99 f0       	breq	.+38     	; 0x1802 <lcd_cursor+0x42>
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	24 f4       	brge	.+8      	; 0x17ea <lcd_cursor+0x2a>
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	41 f0       	breq	.+16     	; 0x17f8 <lcd_cursor+0x38>
    17e8:	1b c0       	rjmp	.+54     	; 0x1820 <lcd_cursor+0x60>
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	91 05       	cpc	r25, r1
    17ee:	71 f0       	breq	.+28     	; 0x180c <lcd_cursor+0x4c>
    17f0:	84 30       	cpi	r24, 0x04	; 4
    17f2:	91 05       	cpc	r25, r1
    17f4:	81 f0       	breq	.+32     	; 0x1816 <lcd_cursor+0x56>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	81 58       	subi	r24, 0x81	; 129
    17fc:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
    1800:	10 c0       	rjmp	.+32     	; 0x1822 <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	81 54       	subi	r24, 0x41	; 65
    1806:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
    180a:	0b c0       	rjmp	.+22     	; 0x1822 <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	8d 56       	subi	r24, 0x6D	; 109
    1810:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	8d 52       	subi	r24, 0x2D	; 45
    181a:	0e 94 93 08 	call	0x1126	; 0x1126 <lcd_wr_command>
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <lcd_cursor+0x62>
		default: break;
    1820:	00 00       	nop
	}
}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <lcd_print>:

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	27 97       	sbiw	r28, 0x07	; 7
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	8a 83       	std	Y+2, r24	; 0x02
    1842:	6b 83       	std	Y+3, r22	; 0x03
    1844:	5d 83       	std	Y+5, r21	; 0x05
    1846:	4c 83       	std	Y+4, r20	; 0x04
    1848:	3f 83       	std	Y+7, r19	; 0x07
    184a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    184c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	88 23       	and	r24, r24
    1852:	19 f0       	breq	.+6      	; 0x185a <lcd_print+0x2e>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	88 23       	and	r24, r24
    1858:	19 f4       	brne	.+6      	; 0x1860 <lcd_print+0x34>
	{
		lcd_home();
    185a:	0e 94 b7 0b 	call	0x176e	; 0x176e <lcd_home>
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	6b 81       	ldd	r22, Y+3	; 0x03
    1864:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1868:	8e 81       	ldd	r24, Y+6	; 0x06
    186a:	9f 81       	ldd	r25, Y+7	; 0x07
    186c:	85 30       	cpi	r24, 0x05	; 5
    186e:	91 05       	cpc	r25, r1
    1870:	19 f0       	breq	.+6      	; 0x1878 <lcd_print+0x4c>
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	b1 f4       	brne	.+44     	; 0x18a4 <lcd_print+0x78>
	{
		million=value/10000+48;
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	9d 81       	ldd	r25, Y+5	; 0x05
    187c:	20 e1       	ldi	r18, 0x10	; 16
    187e:	37 e2       	ldi	r19, 0x27	; 39
    1880:	b9 01       	movw	r22, r18
    1882:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    1886:	9b 01       	movw	r18, r22
    1888:	c9 01       	movw	r24, r18
    188a:	c0 96       	adiw	r24, 0x30	; 48
    188c:	90 93 15 03 	sts	0x0315, r25
    1890:	80 93 14 03 	sts	0x0314, r24
		lcd_wr_char(million);
    1894:	80 91 14 03 	lds	r24, 0x0314
    1898:	90 91 15 03 	lds	r25, 0x0315
    189c:	0e 94 25 0a 	call	0x144a	; 0x144a <lcd_wr_char>
		flag=1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	9f 81       	ldd	r25, Y+7	; 0x07
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	91 05       	cpc	r25, r1
    18ac:	19 f0       	breq	.+6      	; 0x18b4 <lcd_print+0x88>
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	19 f5       	brne	.+70     	; 0x18fa <lcd_print+0xce>
	{
		temp = value/1000;
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	9d 81       	ldd	r25, Y+5	; 0x05
    18b8:	28 ee       	ldi	r18, 0xE8	; 232
    18ba:	33 e0       	ldi	r19, 0x03	; 3
    18bc:	b9 01       	movw	r22, r18
    18be:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    18c2:	9b 01       	movw	r18, r22
    18c4:	c9 01       	movw	r24, r18
    18c6:	90 93 17 03 	sts	0x0317, r25
    18ca:	80 93 16 03 	sts	0x0316, r24
		thousand = temp%10 + 48;
    18ce:	80 91 16 03 	lds	r24, 0x0316
    18d2:	90 91 17 03 	lds	r25, 0x0317
    18d6:	2a e0       	ldi	r18, 0x0A	; 10
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	b9 01       	movw	r22, r18
    18dc:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    18e0:	c0 96       	adiw	r24, 0x30	; 48
    18e2:	90 93 22 03 	sts	0x0322, r25
    18e6:	80 93 21 03 	sts	0x0321, r24
		lcd_wr_char(thousand);
    18ea:	80 91 21 03 	lds	r24, 0x0321
    18ee:	90 91 22 03 	lds	r25, 0x0322
    18f2:	0e 94 25 0a 	call	0x144a	; 0x144a <lcd_wr_char>
		flag=1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	9f 81       	ldd	r25, Y+7	; 0x07
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	91 05       	cpc	r25, r1
    1902:	19 f0       	breq	.+6      	; 0x190a <lcd_print+0xde>
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	19 f5       	brne	.+70     	; 0x1950 <lcd_print+0x124>
	{
		temp = value/100;
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	24 e6       	ldi	r18, 0x64	; 100
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	b9 01       	movw	r22, r18
    1914:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    1918:	9b 01       	movw	r18, r22
    191a:	c9 01       	movw	r24, r18
    191c:	90 93 17 03 	sts	0x0317, r25
    1920:	80 93 16 03 	sts	0x0316, r24
		hundred = temp%10 + 48;
    1924:	80 91 16 03 	lds	r24, 0x0316
    1928:	90 91 17 03 	lds	r25, 0x0317
    192c:	2a e0       	ldi	r18, 0x0A	; 10
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	b9 01       	movw	r22, r18
    1932:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    1936:	c0 96       	adiw	r24, 0x30	; 48
    1938:	90 93 1e 03 	sts	0x031E, r25
    193c:	80 93 1d 03 	sts	0x031D, r24
		lcd_wr_char(hundred);
    1940:	80 91 1d 03 	lds	r24, 0x031D
    1944:	90 91 1e 03 	lds	r25, 0x031E
    1948:	0e 94 25 0a 	call	0x144a	; 0x144a <lcd_wr_char>
		flag=1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1950:	8e 81       	ldd	r24, Y+6	; 0x06
    1952:	9f 81       	ldd	r25, Y+7	; 0x07
    1954:	82 30       	cpi	r24, 0x02	; 2
    1956:	91 05       	cpc	r25, r1
    1958:	19 f0       	breq	.+6      	; 0x1960 <lcd_print+0x134>
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	19 f5       	brne	.+70     	; 0x19a6 <lcd_print+0x17a>
	{
		temp = value/10;
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	9d 81       	ldd	r25, Y+5	; 0x05
    1964:	2a e0       	ldi	r18, 0x0A	; 10
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	b9 01       	movw	r22, r18
    196a:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    196e:	9b 01       	movw	r18, r22
    1970:	c9 01       	movw	r24, r18
    1972:	90 93 17 03 	sts	0x0317, r25
    1976:	80 93 16 03 	sts	0x0316, r24
		tens = temp%10 + 48;
    197a:	80 91 16 03 	lds	r24, 0x0316
    197e:	90 91 17 03 	lds	r25, 0x0317
    1982:	2a e0       	ldi	r18, 0x0A	; 10
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	b9 01       	movw	r22, r18
    1988:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    198c:	c0 96       	adiw	r24, 0x30	; 48
    198e:	90 93 1c 03 	sts	0x031C, r25
    1992:	80 93 1b 03 	sts	0x031B, r24
		lcd_wr_char(tens);
    1996:	80 91 1b 03 	lds	r24, 0x031B
    199a:	90 91 1c 03 	lds	r25, 0x031C
    199e:	0e 94 25 0a 	call	0x144a	; 0x144a <lcd_wr_char>
		flag=1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    19a6:	8e 81       	ldd	r24, Y+6	; 0x06
    19a8:	9f 81       	ldd	r25, Y+7	; 0x07
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 05       	cpc	r25, r1
    19ae:	19 f0       	breq	.+6      	; 0x19b6 <lcd_print+0x18a>
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 f4       	brne	.+36     	; 0x19da <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	2a e0       	ldi	r18, 0x0A	; 10
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	b9 01       	movw	r22, r18
    19c0:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    19c4:	c0 96       	adiw	r24, 0x30	; 48
    19c6:	90 93 20 03 	sts	0x0320, r25
    19ca:	80 93 1f 03 	sts	0x031F, r24
		lcd_wr_char(unit);
    19ce:	80 91 1f 03 	lds	r24, 0x031F
    19d2:	90 91 20 03 	lds	r25, 0x0320
    19d6:	0e 94 25 0a 	call	0x144a	; 0x144a <lcd_wr_char>
	}
	if(digits>5)
    19da:	8e 81       	ldd	r24, Y+6	; 0x06
    19dc:	9f 81       	ldd	r25, Y+7	; 0x07
    19de:	86 30       	cpi	r24, 0x06	; 6
    19e0:	91 05       	cpc	r25, r1
    19e2:	1c f0       	brlt	.+6      	; 0x19ea <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    19e4:	85 e4       	ldi	r24, 0x45	; 69
    19e6:	0e 94 25 0a 	call	0x144a	; 0x144a <lcd_wr_char>
	}
}
    19ea:	27 96       	adiw	r28, 0x07	; 7
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <lcd_port_config>:
volatile unsigned long int ShaftCountLeft = 0; //to keep track of left position encoder
volatile unsigned long int ShaftCountRight = 0; //to keep track of right position encoder

//Function to configure LCD port
void lcd_port_config (void)
{
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1a04:	87 e2       	ldi	r24, 0x27	; 39
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	27 e2       	ldi	r18, 0x27	; 39
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	20 81       	ld	r18, Z
    1a10:	27 6f       	ori	r18, 0xF7	; 247
    1a12:	fc 01       	movw	r30, r24
    1a14:	20 83       	st	Z, r18
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1a16:	88 e2       	ldi	r24, 0x28	; 40
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	28 e2       	ldi	r18, 0x28	; 40
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	f9 01       	movw	r30, r18
    1a20:	20 81       	ld	r18, Z
    1a22:	20 78       	andi	r18, 0x80	; 128
    1a24:	fc 01       	movw	r30, r24
    1a26:	20 83       	st	Z, r18
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00;
    1a36:	80 e3       	ldi	r24, 0x30	; 48
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	10 82       	st	Z, r1
 PORTF = 0x00;
    1a3e:	81 e3       	ldi	r24, 0x31	; 49
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	fc 01       	movw	r30, r24
    1a44:	10 82       	st	Z, r1
 DDRK = 0x00;
    1a46:	87 e0       	ldi	r24, 0x07	; 7
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	10 82       	st	Z, r1
 PORTK = 0x00;
    1a4e:	88 e0       	ldi	r24, 0x08	; 8
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	fc 01       	movw	r30, r24
    1a54:	10 82       	st	Z, r1
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1a64:	81 e2       	ldi	r24, 0x21	; 33
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	21 e2       	ldi	r18, 0x21	; 33
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	20 81       	ld	r18, Z
    1a70:	2f 60       	ori	r18, 0x0F	; 15
    1a72:	fc 01       	movw	r30, r24
    1a74:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
    1a76:	82 e2       	ldi	r24, 0x22	; 34
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	22 e2       	ldi	r18, 0x22	; 34
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	f9 01       	movw	r30, r18
    1a80:	20 81       	ld	r18, Z
    1a82:	20 7f       	andi	r18, 0xF0	; 240
    1a84:	fc 01       	movw	r30, r24
    1a86:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1a88:	8a e0       	ldi	r24, 0x0A	; 10
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	2a e0       	ldi	r18, 0x0A	; 10
    1a8e:	31 e0       	ldi	r19, 0x01	; 1
    1a90:	f9 01       	movw	r30, r18
    1a92:	20 81       	ld	r18, Z
    1a94:	28 61       	ori	r18, 0x18	; 24
    1a96:	fc 01       	movw	r30, r24
    1a98:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1a9a:	8b e0       	ldi	r24, 0x0B	; 11
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	2b e0       	ldi	r18, 0x0B	; 11
    1aa0:	31 e0       	ldi	r19, 0x01	; 1
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	20 81       	ld	r18, Z
    1aa6:	28 61       	ori	r18, 0x18	; 24
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	20 83       	st	Z, r18
}
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    1aba:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <lcd_port_config>
    left_encoder_pin_config();
    1abe:	80 e6       	ldi	r24, 0x60	; 96
    1ac0:	9e e0       	ldi	r25, 0x0E	; 14
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	19 95       	eicall
	right_encoder_pin_config();
    1ac6:	89 e7       	ldi	r24, 0x79	; 121
    1ac8:	9e e0       	ldi	r25, 0x0E	; 14
    1aca:	fc 01       	movw	r30, r24
    1acc:	19 95       	eicall
	adc_pin_config();
    1ace:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <adc_pin_config>
	motion_pin_config();
    1ad2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <motion_pin_config>
}
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1ae4:	81 e2       	ldi	r24, 0x21	; 33
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	fc 01       	movw	r30, r24
    1aea:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1aec:	85 e2       	ldi	r24, 0x25	; 37
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	2f ef       	ldi	r18, 0xFF	; 255
    1af2:	fc 01       	movw	r30, r24
    1af4:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1af6:	84 e2       	ldi	r24, 0x24	; 36
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	21 e0       	ldi	r18, 0x01	; 1
    1afc:	fc 01       	movw	r30, r24
    1afe:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1b00:	89 e2       	ldi	r24, 0x29	; 41
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	fc 01       	movw	r30, r24
    1b06:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1b08:	88 e2       	ldi	r24, 0x28	; 40
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	2f ef       	ldi	r18, 0xFF	; 255
    1b0e:	fc 01       	movw	r30, r24
    1b10:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1b12:	8b e2       	ldi	r24, 0x2B	; 43
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	fc 01       	movw	r30, r24
    1b18:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1b1a:	8a e2       	ldi	r24, 0x2A	; 42
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	2f ef       	ldi	r18, 0xFF	; 255
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1b24:	8d e2       	ldi	r24, 0x2D	; 45
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	fc 01       	movw	r30, r24
    1b2a:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1b2c:	8c e2       	ldi	r24, 0x2C	; 44
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	2f ef       	ldi	r18, 0xFF	; 255
    1b32:	fc 01       	movw	r30, r24
    1b34:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	//{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1b36:	80 e2       	ldi	r24, 0x20	; 32
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	29 ea       	ldi	r18, 0xA9	; 169
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	20 83       	st	Z, r18
 					 // For Overriding normal port functionality to OCRnA outputs.
				  	 // {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1b40:	81 e2       	ldi	r24, 0x21	; 33
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	2b e0       	ldi	r18, 0x0B	; 11
    1b46:	fc 01       	movw	r30, r24
    1b48:	20 83       	st	Z, r18
}
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <adc_init>:

void adc_init()
{
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1b58:	8a e7       	ldi	r24, 0x7A	; 122
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1b60:	8b e7       	ldi	r24, 0x7B	; 123
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	fc 01       	movw	r30, r24
    1b66:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1b68:	8c e7       	ldi	r24, 0x7C	; 124
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	20 e2       	ldi	r18, 0x20	; 32
    1b6e:	fc 01       	movw	r30, r24
    1b70:	20 83       	st	Z, r18
	ACSR = 0x80;
    1b72:	80 e5       	ldi	r24, 0x50	; 80
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	20 e8       	ldi	r18, 0x80	; 128
    1b78:	fc 01       	movw	r30, r24
    1b7a:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1b7c:	8a e7       	ldi	r24, 0x7A	; 122
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	26 e8       	ldi	r18, 0x86	; 134
    1b82:	fc 01       	movw	r30, r24
    1b84:	20 83       	st	Z, r18
}
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	0f 92       	push	r0
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	88 30       	cpi	r24, 0x08	; 8
    1b9e:	28 f0       	brcs	.+10     	; 0x1baa <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    1ba0:	8b e7       	ldi	r24, 0x7B	; 123
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	28 e0       	ldi	r18, 0x08	; 8
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	87 70       	andi	r24, 0x07	; 7
    1bae:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
    1bb0:	8c e7       	ldi	r24, 0x7C	; 124
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb6:	20 62       	ori	r18, 0x20	; 32
    1bb8:	fc 01       	movw	r30, r24
    1bba:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1bbc:	8a e7       	ldi	r24, 0x7A	; 122
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	2a e7       	ldi	r18, 0x7A	; 122
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	f9 01       	movw	r30, r18
    1bc6:	20 81       	ld	r18, Z
    1bc8:	20 64       	ori	r18, 0x40	; 64
    1bca:	fc 01       	movw	r30, r24
    1bcc:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1bce:	00 00       	nop
    1bd0:	8a e7       	ldi	r24, 0x7A	; 122
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	80 71       	andi	r24, 0x10	; 16
    1bde:	90 70       	andi	r25, 0x00	; 0
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	b1 f3       	breq	.-20     	; 0x1bd0 <ADC_Conversion+0x44>
	a=ADCH;
    1be4:	89 e7       	ldi	r24, 0x79	; 121
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	fc 01       	movw	r30, r24
    1bea:	80 81       	ld	r24, Z
    1bec:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1bee:	8a e7       	ldi	r24, 0x7A	; 122
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	2a e7       	ldi	r18, 0x7A	; 122
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	20 81       	ld	r18, Z
    1bfa:	20 61       	ori	r18, 0x10	; 16
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    1c00:	8b e7       	ldi	r24, 0x7B	; 123
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	fc 01       	movw	r30, r24
    1c06:	10 82       	st	Z, r1
	return a;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	08 95       	ret

00001c14 <print_sensor>:

//Function To Print Sensor Values At Desired Row And Column Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <print_sensor+0x6>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	6a 83       	std	Y+2, r22	; 0x02
    1c22:	4b 83       	std	Y+3, r20	; 0x03

	ADC_Value = ADC_Conversion(channel);
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    1c2a:	80 93 18 03 	sts	0x0318, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1c2e:	80 91 18 03 	lds	r24, 0x0318
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	6a 81       	ldd	r22, Y+2	; 0x02
    1c3a:	a9 01       	movw	r20, r18
    1c3c:	23 e0       	ldi	r18, 0x03	; 3
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	0e 94 16 0c 	call	0x182c	; 0x182c <lcd_print>
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	0f 92       	push	r0
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1c60:	88 e2       	ldi	r24, 0x28	; 40
    1c62:	91 e0       	ldi	r25, 0x01	; 1
    1c64:	29 81       	ldd	r18, Y+1	; 0x01
    1c66:	fc 01       	movw	r30, r24
    1c68:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
    1c6a:	8a e2       	ldi	r24, 0x2A	; 42
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 83       	st	Z, r18
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	0f 92       	push	r0
    1c84:	0f 92       	push	r0
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    1c8c:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	8f 70       	andi	r24, 0x0F	; 15
    1c92:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1c94:	82 e2       	ldi	r24, 0x22	; 34
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	fc 01       	movw	r30, r24
    1c9a:	80 81       	ld	r24, Z
    1c9c:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	80 7f       	andi	r24, 0xF0	; 240
    1ca2:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1ca4:	99 81       	ldd	r25, Y+1	; 0x01
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	89 2b       	or	r24, r25
    1caa:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    1cac:	82 e2       	ldi	r24, 0x22	; 34
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	29 81       	ldd	r18, Y+1	; 0x01
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	20 83       	st	Z, r18
}
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	08 95       	ret

00001cc0 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0xEF; //Set the direction of the PORTE 4 pin as input
    1cc8:	8d e2       	ldi	r24, 0x2D	; 45
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	2d e2       	ldi	r18, 0x2D	; 45
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	20 81       	ld	r18, Z
    1cd4:	2f 7e       	andi	r18, 0xEF	; 239
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	20 83       	st	Z, r18
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    1cda:	8e e2       	ldi	r24, 0x2E	; 46
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	2e e2       	ldi	r18, 0x2E	; 46
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	20 81       	ld	r18, Z
    1ce6:	20 61       	ori	r18, 0x10	; 16
    1ce8:	fc 01       	movw	r30, r24
    1cea:	20 83       	st	Z, r18
}
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <right_encoder_pin_config>:
//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0xDF; //Set the direction of the PORTE 4 pin as input
    1cfa:	8d e2       	ldi	r24, 0x2D	; 45
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	2d e2       	ldi	r18, 0x2D	; 45
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	f9 01       	movw	r30, r18
    1d04:	20 81       	ld	r18, Z
    1d06:	2f 7d       	andi	r18, 0xDF	; 223
    1d08:	fc 01       	movw	r30, r24
    1d0a:	20 83       	st	Z, r18
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1d0c:	8e e2       	ldi	r24, 0x2E	; 46
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	2e e2       	ldi	r18, 0x2E	; 46
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	f9 01       	movw	r30, r18
    1d16:	20 81       	ld	r18, Z
    1d18:	20 62       	ori	r18, 0x20	; 32
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 83       	st	Z, r18
}
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	08 95       	ret

00001d24 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1d2c:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1d2e:	8a e6       	ldi	r24, 0x6A	; 106
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	2a e6       	ldi	r18, 0x6A	; 106
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	f9 01       	movw	r30, r18
    1d38:	20 81       	ld	r18, Z
    1d3a:	22 60       	ori	r18, 0x02	; 2
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1d40:	8d e3       	ldi	r24, 0x3D	; 61
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	2d e3       	ldi	r18, 0x3D	; 61
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	f9 01       	movw	r30, r18
    1d4a:	20 81       	ld	r18, Z
    1d4c:	20 61       	ori	r18, 0x10	; 16
    1d4e:	fc 01       	movw	r30, r24
    1d50:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1d52:	78 94       	sei
}
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	08 95       	ret

00001d5a <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1d62:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1d64:	8a e6       	ldi	r24, 0x6A	; 106
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	2a e6       	ldi	r18, 0x6A	; 106
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	f9 01       	movw	r30, r18
    1d6e:	20 81       	ld	r18, Z
    1d70:	28 60       	ori	r18, 0x08	; 8
    1d72:	fc 01       	movw	r30, r24
    1d74:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1d76:	8d e3       	ldi	r24, 0x3D	; 61
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	2d e3       	ldi	r18, 0x3D	; 61
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	f9 01       	movw	r30, r18
    1d80:	20 81       	ld	r18, Z
    1d82:	20 62       	ori	r18, 0x20	; 32
    1d84:	fc 01       	movw	r30, r24
    1d86:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1d88:	78 94       	sei
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	08 95       	ret

00001d90 <__vector_6>:

ISR(INT5_vect)
{
    1d90:	1f 92       	push	r1
    1d92:	0f 92       	push	r0
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	0f 92       	push	r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	8f 93       	push	r24
    1d9c:	9f 93       	push	r25
    1d9e:	af 93       	push	r26
    1da0:	bf 93       	push	r27
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
    1daa:	80 91 a0 02 	lds	r24, 0x02A0
    1dae:	90 91 a1 02 	lds	r25, 0x02A1
    1db2:	a0 91 a2 02 	lds	r26, 0x02A2
    1db6:	b0 91 a3 02 	lds	r27, 0x02A3
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	b1 1d       	adc	r27, r1
    1dc0:	80 93 a0 02 	sts	0x02A0, r24
    1dc4:	90 93 a1 02 	sts	0x02A1, r25
    1dc8:	a0 93 a2 02 	sts	0x02A2, r26
    1dcc:	b0 93 a3 02 	sts	0x02A3, r27
}
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	bf 91       	pop	r27
    1dd6:	af 91       	pop	r26
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	0f 90       	pop	r0
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	0f 90       	pop	r0
    1de2:	1f 90       	pop	r1
    1de4:	18 95       	reti

00001de6 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    1de6:	1f 92       	push	r1
    1de8:	0f 92       	push	r0
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	0f 92       	push	r0
    1dee:	11 24       	eor	r1, r1
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	af 93       	push	r26
    1df6:	bf 93       	push	r27
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
    1e00:	80 91 9c 02 	lds	r24, 0x029C
    1e04:	90 91 9d 02 	lds	r25, 0x029D
    1e08:	a0 91 9e 02 	lds	r26, 0x029E
    1e0c:	b0 91 9f 02 	lds	r27, 0x029F
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	a1 1d       	adc	r26, r1
    1e14:	b1 1d       	adc	r27, r1
    1e16:	80 93 9c 02 	sts	0x029C, r24
    1e1a:	90 93 9d 02 	sts	0x029D, r25
    1e1e:	a0 93 9e 02 	sts	0x029E, r26
    1e22:	b0 93 9f 02 	sts	0x029F, r27
}
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	bf 91       	pop	r27
    1e2c:	af 91       	pop	r26
    1e2e:	9f 91       	pop	r25
    1e30:	8f 91       	pop	r24
    1e32:	0f 90       	pop	r0
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <linear_distance_mm>:

//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	2a 97       	sbiw	r28, 0x0a	; 10
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	9a 87       	std	Y+10, r25	; 0x0a
    1e52:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	dc 01       	movw	r26, r24
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	ab 83       	std	Y+3, r26	; 0x03
    1e60:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1e62:	1d 82       	std	Y+5, r1	; 0x05
    1e64:	1e 82       	std	Y+6, r1	; 0x06
    1e66:	1f 82       	std	Y+7, r1	; 0x07
    1e68:	18 86       	std	Y+8, r1	; 0x08
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	cc 01       	movw	r24, r24
    1e70:	a0 e0       	ldi	r26, 0x00	; 0
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 b6 1b 	call	0x376c	; 0x376c <__floatunsisf>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	25 ee       	ldi	r18, 0xE5	; 229
    1e86:	30 ed       	ldi	r19, 0xD0	; 208
    1e88:	4a ea       	ldi	r20, 0xAA	; 170
    1e8a:	50 e4       	ldi	r21, 0x40	; 64
    1e8c:	0e 94 22 1b 	call	0x3644	; 0x3644 <__divsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	ab 83       	std	Y+3, r26	; 0x03
    1e9a:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1e9c:	69 81       	ldd	r22, Y+1	; 0x01
    1e9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	af 83       	std	Y+7, r26	; 0x07
    1eb2:	b8 87       	std	Y+8, r27	; 0x08
	ShaftCountRight = 0;
    1eb4:	10 92 a0 02 	sts	0x02A0, r1
    1eb8:	10 92 a1 02 	sts	0x02A1, r1
    1ebc:	10 92 a2 02 	sts	0x02A2, r1
    1ec0:	10 92 a3 02 	sts	0x02A3, r1
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <linear_distance_mm+0x8c>
	{
		if(ShaftCountRight > ReqdShaftCountInt)
		{
			break;
		}
	}
    1ec6:	00 00       	nop
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	ShaftCountRight = 0;
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1ec8:	20 91 a0 02 	lds	r18, 0x02A0
    1ecc:	30 91 a1 02 	lds	r19, 0x02A1
    1ed0:	40 91 a2 02 	lds	r20, 0x02A2
    1ed4:	50 91 a3 02 	lds	r21, 0x02A3
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	af 81       	ldd	r26, Y+7	; 0x07
    1ede:	b8 85       	ldd	r27, Y+8	; 0x08
    1ee0:	82 17       	cp	r24, r18
    1ee2:	93 07       	cpc	r25, r19
    1ee4:	a4 07       	cpc	r26, r20
    1ee6:	b5 07       	cpc	r27, r21
    1ee8:	70 f7       	brcc	.-36     	; 0x1ec6 <linear_distance_mm+0x8a>
		{
			break;
    1eea:	00 00       	nop
		}
	}
	stop(); //Stop robot
    1eec:	8f ee       	ldi	r24, 0xEF	; 239
    1eee:	90 e1       	ldi	r25, 0x10	; 16
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	19 95       	eicall
}
    1ef4:	2a 96       	adiw	r28, 0x0a	; 10
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	08 95       	ret

00001f06 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	2a 97       	sbiw	r28, 0x0a	; 10
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	9a 87       	std	Y+10, r25	; 0x0a
    1f1c:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	dc 01       	movw	r26, r24
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	ab 83       	std	Y+3, r26	; 0x03
    1f2a:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1f2c:	1d 82       	std	Y+5, r1	; 0x05
    1f2e:	1e 82       	std	Y+6, r1	; 0x06
    1f30:	1f 82       	std	Y+7, r1	; 0x07
    1f32:	18 86       	std	Y+8, r1	; 0x08
	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	cc 01       	movw	r24, r24
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 b6 1b 	call	0x376c	; 0x376c <__floatunsisf>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	28 e4       	ldi	r18, 0x48	; 72
    1f50:	31 ee       	ldi	r19, 0xE1	; 225
    1f52:	42 e8       	ldi	r20, 0x82	; 130
    1f54:	50 e4       	ldi	r21, 0x40	; 64
    1f56:	0e 94 22 1b 	call	0x3644	; 0x3644 <__divsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	ab 83       	std	Y+3, r26	; 0x03
    1f64:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1f66:	69 81       	ldd	r22, Y+1	; 0x01
    1f68:	7a 81       	ldd	r23, Y+2	; 0x02
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	cc 01       	movw	r24, r24
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	af 83       	std	Y+7, r26	; 0x07
    1f82:	b8 87       	std	Y+8, r27	; 0x08
	ShaftCountRight = 0;
    1f84:	10 92 a0 02 	sts	0x02A0, r1
    1f88:	10 92 a1 02 	sts	0x02A1, r1
    1f8c:	10 92 a2 02 	sts	0x02A2, r1
    1f90:	10 92 a3 02 	sts	0x02A3, r1
	ShaftCountLeft = 0;
    1f94:	10 92 9c 02 	sts	0x029C, r1
    1f98:	10 92 9d 02 	sts	0x029D, r1
    1f9c:	10 92 9e 02 	sts	0x029E, r1
    1fa0:	10 92 9f 02 	sts	0x029F, r1
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <angle_rotate+0xa2>
	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
    1fa6:	00 00       	nop
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
	ShaftCountRight = 0;
	ShaftCountLeft = 0;
	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1fa8:	20 91 a0 02 	lds	r18, 0x02A0
    1fac:	30 91 a1 02 	lds	r19, 0x02A1
    1fb0:	40 91 a2 02 	lds	r20, 0x02A2
    1fb4:	50 91 a3 02 	lds	r21, 0x02A3
    1fb8:	71 e0       	ldi	r23, 0x01	; 1
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	af 81       	ldd	r26, Y+7	; 0x07
    1fc0:	b8 85       	ldd	r27, Y+8	; 0x08
    1fc2:	28 17       	cp	r18, r24
    1fc4:	39 07       	cpc	r19, r25
    1fc6:	4a 07       	cpc	r20, r26
    1fc8:	5b 07       	cpc	r21, r27
    1fca:	08 f4       	brcc	.+2      	; 0x1fce <angle_rotate+0xc8>
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	20 91 9c 02 	lds	r18, 0x029C
    1fd2:	30 91 9d 02 	lds	r19, 0x029D
    1fd6:	40 91 9e 02 	lds	r20, 0x029E
    1fda:	50 91 9f 02 	lds	r21, 0x029F
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	af 81       	ldd	r26, Y+7	; 0x07
    1fe6:	b8 85       	ldd	r27, Y+8	; 0x08
    1fe8:	28 17       	cp	r18, r24
    1fea:	39 07       	cpc	r19, r25
    1fec:	4a 07       	cpc	r20, r26
    1fee:	5b 07       	cpc	r21, r27
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <angle_rotate+0xee>
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	87 2f       	mov	r24, r23
    1ff6:	86 2b       	or	r24, r22
    1ff8:	88 23       	and	r24, r24
    1ffa:	a9 f2       	breq	.-86     	; 0x1fa6 <angle_rotate+0xa0>
		break;
    1ffc:	00 00       	nop
	}
	stop(); //Stop robot
    1ffe:	8f ee       	ldi	r24, 0xEF	; 239
    2000:	90 e1       	ldi	r25, 0x10	; 16
    2002:	fc 01       	movw	r30, r24
    2004:	19 95       	eicall
}
    2006:	2a 96       	adiw	r28, 0x0a	; 10
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	0f 92       	push	r0
    201e:	0f 92       	push	r0
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
	forward();
    2028:	81 e2       	ldi	r24, 0x21	; 33
    202a:	90 e1       	ldi	r25, 0x10	; 16
    202c:	fc 01       	movw	r30, r24
    202e:	19 95       	eicall
	linear_distance_mm(DistanceInMM);
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <linear_distance_mm>
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	08 95       	ret

00002042 <forward>:
void forward (void)
{
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    204a:	86 e0       	ldi	r24, 0x06	; 6
    204c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <motion_set>
}
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	08 95       	ret

00002056 <left>:


void left (void) //Left wheel backward, Right wheel forward
{
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x05);
    205e:	85 e0       	ldi	r24, 0x05	; 5
    2060:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <motion_set>
}
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	08 95       	ret

0000206a <soft_left>:
void soft_left (void) //Left wheel stationary, Right wheel forward
{
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x04);
    2072:	84 e0       	ldi	r24, 0x04	; 4
    2074:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <motion_set>
}
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	08 95       	ret

0000207e <left_degrees>:
void left_degrees(unsigned int Degrees)
{
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	0f 92       	push	r0
    2084:	0f 92       	push	r0
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    208e:	0e 94 2b 10 	call	0x2056	; 0x2056 <left>
	angle_rotate(Degrees);
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <angle_rotate>
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <adjust_left>:
void adjust_left()
{
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    20ac:	83 e0       	ldi	r24, 0x03	; 3
    20ae:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    20b2:	80 93 97 02 	sts	0x0297, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    20bc:	80 93 98 02 	sts	0x0298, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    20c6:	80 93 99 02 	sts	0x0299, r24

		if(Left_white_line<25 && Right_white_line<25 && Center_white_line>25) //this condition will check weather robot is on black line or not and if it is on black line than it will break the loop
    20ca:	80 91 97 02 	lds	r24, 0x0297
    20ce:	89 31       	cpi	r24, 0x19	; 25
    20d0:	40 f4       	brcc	.+16     	; 0x20e2 <adjust_left+0x3e>
    20d2:	80 91 99 02 	lds	r24, 0x0299
    20d6:	89 31       	cpi	r24, 0x19	; 25
    20d8:	20 f4       	brcc	.+8      	; 0x20e2 <adjust_left+0x3e>
    20da:	80 91 98 02 	lds	r24, 0x0298
    20de:	8a 31       	cpi	r24, 0x1A	; 26
    20e0:	38 f4       	brcc	.+14     	; 0x20f0 <adjust_left+0x4c>
		{
			break;
		}
		velocity(200,200);
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	68 ec       	ldi	r22, 0xC8	; 200
    20e6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <velocity>
		left();//this will take left turn until it find black line
    20ea:	0e 94 2b 10 	call	0x2056	; 0x2056 <left>


	}
    20ee:	de cf       	rjmp	.-68     	; 0x20ac <adjust_left+0x8>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor

		if(Left_white_line<25 && Right_white_line<25 && Center_white_line>25) //this condition will check weather robot is on black line or not and if it is on black line than it will break the loop
		{
			break;
    20f0:	00 00       	nop
		velocity(200,200);
		left();//this will take left turn until it find black line


	}
}
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	08 95       	ret

000020f8 <precision_left>:
void precision_left (void)
{
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
	
	forward_mm(60);
    2100:	8c e3       	ldi	r24, 0x3C	; 60
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 0c 10 	call	0x2018	; 0x2018 <forward_mm>
	left_degrees(70);
    2108:	86 e4       	ldi	r24, 0x46	; 70
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 3f 10 	call	0x207e	; 0x207e <left_degrees>
	adjust_left();
    2110:	0e 94 52 10 	call	0x20a4	; 0x20a4 <adjust_left>
}
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

0000211a <right>:


void right (void) //Left wheel forward, Right wheel backward
{
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0A);
    2122:	8a e0       	ldi	r24, 0x0A	; 10
    2124:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <motion_set>
}
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	08 95       	ret

0000212e <soft_right>:
void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x02);
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <motion_set>
}
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	08 95       	ret

00002142 <right_degrees>:
void right_degrees(unsigned int Degrees)
{
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	0f 92       	push	r0
    2148:	0f 92       	push	r0
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    2152:	0e 94 8d 10 	call	0x211a	; 0x211a <right>
	angle_rotate(Degrees);
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	9a 81       	ldd	r25, Y+2	; 0x02
    215a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <angle_rotate>
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <adjust_right>:
void adjust_right()
{
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{


		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    2176:	80 93 97 02 	sts	0x0297, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    2180:	80 93 98 02 	sts	0x0298, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    218a:	80 93 99 02 	sts	0x0299, r24

		if(Left_white_line<25 && Right_white_line<25 && Center_white_line>25)//this condition will check weather robot is on black line or not and if it is on black line than it will break the loop
    218e:	80 91 97 02 	lds	r24, 0x0297
    2192:	89 31       	cpi	r24, 0x19	; 25
    2194:	40 f4       	brcc	.+16     	; 0x21a6 <adjust_right+0x3e>
    2196:	80 91 99 02 	lds	r24, 0x0299
    219a:	89 31       	cpi	r24, 0x19	; 25
    219c:	20 f4       	brcc	.+8      	; 0x21a6 <adjust_right+0x3e>
    219e:	80 91 98 02 	lds	r24, 0x0298
    21a2:	8a 31       	cpi	r24, 0x1A	; 26
    21a4:	38 f4       	brcc	.+14     	; 0x21b4 <adjust_right+0x4c>
		{
			break;
		}
		velocity(200,200);
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	68 ec       	ldi	r22, 0xC8	; 200
    21aa:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <velocity>
		right(); //it will take right turn until it find black line
    21ae:	0e 94 8d 10 	call	0x211a	; 0x211a <right>

	}
    21b2:	de cf       	rjmp	.-68     	; 0x2170 <adjust_right+0x8>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor

		if(Left_white_line<25 && Right_white_line<25 && Center_white_line>25)//this condition will check weather robot is on black line or not and if it is on black line than it will break the loop
		{
			break;
    21b4:	00 00       	nop
		}
		velocity(200,200);
		right(); //it will take right turn until it find black line

	}
}
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <precision_right>:
void precision_right (void)
{
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
	
	forward_mm(60);
    21c4:	8c e3       	ldi	r24, 0x3C	; 60
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 0c 10 	call	0x2018	; 0x2018 <forward_mm>
	right_degrees(70);
    21cc:	86 e4       	ldi	r24, 0x46	; 70
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 a1 10 	call	0x2142	; 0x2142 <right_degrees>
	adjust_right();
    21d4:	0e 94 b4 10 	call	0x2168	; 0x2168 <adjust_right>
}
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	08 95       	ret

000021de <stop>:




void stop (void)
{
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <motion_set>
}
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	08 95       	ret

000021f2 <init_devices>:

void init_devices (void)
{
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    21fa:	f8 94       	cli
	port_init();
    21fc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <port_init>
	adc_init();
    2200:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <adc_init>
	timer5_init();
    2204:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <timer5_init>
	lcd_set_4bit();
    2208:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_set_4bit>
	lcd_init();
    220c:	0e 94 ed 07 	call	0xfda	; 0xfda <lcd_init>
    left_position_encoder_interrupt_init();
    2210:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init();
    2214:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
    2218:	78 94       	sei
}
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <run>:

void run(void){
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	01 c0       	rjmp	.+2      	; 0x222c <run+0xc>
			stop();
			
			break;
		}
		
	}
    222a:	00 00       	nop
}

void run(void){
	while(1)
	{
		fl=0;
    222c:	10 92 95 02 	sts	0x0295, r1
    2230:	10 92 94 02 	sts	0x0294, r1
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    2234:	83 e0       	ldi	r24, 0x03	; 3
    2236:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    223a:	80 93 97 02 	sts	0x0297, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    2244:	80 93 98 02 	sts	0x0298, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    224e:	80 93 99 02 	sts	0x0299, r24
		
		
        forward();
    2252:	0e 94 21 10 	call	0x2042	; 0x2042 <forward>
		/*lcd_print(1,9,Left_white_line,2);
		lcd_print(1,12,Center_white_line,2);
		lcd_print(1,15,Right_white_line,2);*/
		if(Left_white_line > 25 &&  Center_white_line <25 && Right_white_line <25)
    2256:	80 91 97 02 	lds	r24, 0x0297
    225a:	8a 31       	cpi	r24, 0x1A	; 26
    225c:	80 f0       	brcs	.+32     	; 0x227e <run+0x5e>
    225e:	80 91 98 02 	lds	r24, 0x0298
    2262:	89 31       	cpi	r24, 0x19	; 25
    2264:	60 f4       	brcc	.+24     	; 0x227e <run+0x5e>
    2266:	80 91 99 02 	lds	r24, 0x0299
    226a:	89 31       	cpi	r24, 0x19	; 25
    226c:	40 f4       	brcc	.+16     	; 0x227e <run+0x5e>
		{
			stop();
    226e:	0e 94 ef 10 	call	0x21de	; 0x21de <stop>
			velocity(220,250);
    2272:	8c ed       	ldi	r24, 0xDC	; 220
    2274:	6a ef       	ldi	r22, 0xFA	; 250
    2276:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <velocity>
			soft_left();
    227a:	0e 94 35 10 	call	0x206a	; 0x206a <soft_left>
		}


		if(Left_white_line<25 && Center_white_line >25 && Right_white_line <25)
    227e:	80 91 97 02 	lds	r24, 0x0297
    2282:	89 31       	cpi	r24, 0x19	; 25
    2284:	a0 f4       	brcc	.+40     	; 0x22ae <run+0x8e>
    2286:	80 91 98 02 	lds	r24, 0x0298
    228a:	8a 31       	cpi	r24, 0x1A	; 26
    228c:	80 f0       	brcs	.+32     	; 0x22ae <run+0x8e>
    228e:	80 91 99 02 	lds	r24, 0x0299
    2292:	89 31       	cpi	r24, 0x19	; 25
    2294:	60 f4       	brcc	.+24     	; 0x22ae <run+0x8e>
		{

			velocity(250,250);
    2296:	8a ef       	ldi	r24, 0xFA	; 250
    2298:	6a ef       	ldi	r22, 0xFA	; 250
    229a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <velocity>
			forward();
    229e:	0e 94 21 10 	call	0x2042	; 0x2042 <forward>
			fl=2;
    22a2:	82 e0       	ldi	r24, 0x02	; 2
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	90 93 95 02 	sts	0x0295, r25
    22aa:	80 93 94 02 	sts	0x0294, r24
		}

		if(Left_white_line< 25 && Center_white_line <25 && Right_white_line >25)
    22ae:	80 91 97 02 	lds	r24, 0x0297
    22b2:	89 31       	cpi	r24, 0x19	; 25
    22b4:	80 f4       	brcc	.+32     	; 0x22d6 <run+0xb6>
    22b6:	80 91 98 02 	lds	r24, 0x0298
    22ba:	89 31       	cpi	r24, 0x19	; 25
    22bc:	60 f4       	brcc	.+24     	; 0x22d6 <run+0xb6>
    22be:	80 91 99 02 	lds	r24, 0x0299
    22c2:	8a 31       	cpi	r24, 0x1A	; 26
    22c4:	40 f0       	brcs	.+16     	; 0x22d6 <run+0xb6>
		{
			
			stop();
    22c6:	0e 94 ef 10 	call	0x21de	; 0x21de <stop>
			velocity(250,220);
    22ca:	8a ef       	ldi	r24, 0xFA	; 250
    22cc:	6c ed       	ldi	r22, 0xDC	; 220
    22ce:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <velocity>
			soft_right();
    22d2:	0e 94 97 10 	call	0x212e	; 0x212e <soft_right>
		}

		if(((Left_white_line > 25 &&  Center_white_line > 25 ) || (Right_white_line> 25 && Center_white_line> 25 )) && (ShaftCountLeft>60 || ShaftCountRight>60))
    22d6:	80 91 97 02 	lds	r24, 0x0297
    22da:	8a 31       	cpi	r24, 0x1A	; 26
    22dc:	20 f0       	brcs	.+8      	; 0x22e6 <run+0xc6>
    22de:	80 91 98 02 	lds	r24, 0x0298
    22e2:	8a 31       	cpi	r24, 0x1A	; 26
    22e4:	50 f4       	brcc	.+20     	; 0x22fa <run+0xda>
    22e6:	80 91 99 02 	lds	r24, 0x0299
    22ea:	8a 31       	cpi	r24, 0x1A	; 26
    22ec:	08 f4       	brcc	.+2      	; 0x22f0 <run+0xd0>
    22ee:	9d cf       	rjmp	.-198    	; 0x222a <run+0xa>
    22f0:	80 91 98 02 	lds	r24, 0x0298
    22f4:	8a 31       	cpi	r24, 0x1A	; 26
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <run+0xda>
    22f8:	98 cf       	rjmp	.-208    	; 0x222a <run+0xa>
    22fa:	80 91 9c 02 	lds	r24, 0x029C
    22fe:	90 91 9d 02 	lds	r25, 0x029D
    2302:	a0 91 9e 02 	lds	r26, 0x029E
    2306:	b0 91 9f 02 	lds	r27, 0x029F
    230a:	8d 33       	cpi	r24, 0x3D	; 61
    230c:	91 05       	cpc	r25, r1
    230e:	a1 05       	cpc	r26, r1
    2310:	b1 05       	cpc	r27, r1
    2312:	70 f4       	brcc	.+28     	; 0x2330 <run+0x110>
    2314:	80 91 a0 02 	lds	r24, 0x02A0
    2318:	90 91 a1 02 	lds	r25, 0x02A1
    231c:	a0 91 a2 02 	lds	r26, 0x02A2
    2320:	b0 91 a3 02 	lds	r27, 0x02A3
    2324:	8d 33       	cpi	r24, 0x3D	; 61
    2326:	91 05       	cpc	r25, r1
    2328:	a1 05       	cpc	r26, r1
    232a:	b1 05       	cpc	r27, r1
    232c:	08 f4       	brcc	.+2      	; 0x2330 <run+0x110>
    232e:	7d cf       	rjmp	.-262    	; 0x222a <run+0xa>
		{
			node_count++;
    2330:	80 91 9a 02 	lds	r24, 0x029A
    2334:	90 91 9b 02 	lds	r25, 0x029B
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	90 93 9b 02 	sts	0x029B, r25
    233e:	80 93 9a 02 	sts	0x029A, r24
			ShaftCountRight=0,ShaftCountLeft=0;
    2342:	10 92 a0 02 	sts	0x02A0, r1
    2346:	10 92 a1 02 	sts	0x02A1, r1
    234a:	10 92 a2 02 	sts	0x02A2, r1
    234e:	10 92 a3 02 	sts	0x02A3, r1
    2352:	10 92 9c 02 	sts	0x029C, r1
    2356:	10 92 9d 02 	sts	0x029D, r1
    235a:	10 92 9e 02 	sts	0x029E, r1
    235e:	10 92 9f 02 	sts	0x029F, r1
			lcd_cursor(1,2);
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	62 e0       	ldi	r22, 0x02	; 2
    2366:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cursor>
			lcd_string(":");
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	92 e0       	ldi	r25, 0x02	; 2
    236e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <lcd_string>
			lcd_print(1,3,node_count,2);
    2372:	20 91 9a 02 	lds	r18, 0x029A
    2376:	30 91 9b 02 	lds	r19, 0x029B
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	63 e0       	ldi	r22, 0x03	; 3
    237e:	a9 01       	movw	r20, r18
    2380:	22 e0       	ldi	r18, 0x02	; 2
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	0e 94 16 0c 	call	0x182c	; 0x182c <lcd_print>
			stop();
    2388:	0e 94 ef 10 	call	0x21de	; 0x21de <stop>
			
			break;
    238c:	00 00       	nop
		}
		
	}
}
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <begin>:

void begin (void)
{
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <begin+0xc>
			ShaftCountRight=0,ShaftCountLeft=0;
			stop();
			
			break;
		}
	}
    239e:	00 00       	nop

void begin (void)
{
	while (1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    23a0:	83 e0       	ldi	r24, 0x03	; 3
    23a2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    23a6:	80 93 97 02 	sts	0x0297, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    23aa:	82 e0       	ldi	r24, 0x02	; 2
    23ac:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    23b0:	80 93 98 02 	sts	0x0298, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ADC_Conversion>
    23ba:	80 93 99 02 	sts	0x0299, r24
		forward();
    23be:	0e 94 21 10 	call	0x2042	; 0x2042 <forward>
		if(((Left_white_line > 40 &&  Center_white_line > 40 ) || (Right_white_line> 40&& Center_white_line> 40 )) && (ShaftCountLeft>15 || ShaftCountRight>15))
    23c2:	80 91 97 02 	lds	r24, 0x0297
    23c6:	89 32       	cpi	r24, 0x29	; 41
    23c8:	20 f0       	brcs	.+8      	; 0x23d2 <begin+0x3e>
    23ca:	80 91 98 02 	lds	r24, 0x0298
    23ce:	89 32       	cpi	r24, 0x29	; 41
    23d0:	40 f4       	brcc	.+16     	; 0x23e2 <begin+0x4e>
    23d2:	80 91 99 02 	lds	r24, 0x0299
    23d6:	89 32       	cpi	r24, 0x29	; 41
    23d8:	10 f3       	brcs	.-60     	; 0x239e <begin+0xa>
    23da:	80 91 98 02 	lds	r24, 0x0298
    23de:	89 32       	cpi	r24, 0x29	; 41
    23e0:	f0 f2       	brcs	.-68     	; 0x239e <begin+0xa>
    23e2:	80 91 9c 02 	lds	r24, 0x029C
    23e6:	90 91 9d 02 	lds	r25, 0x029D
    23ea:	a0 91 9e 02 	lds	r26, 0x029E
    23ee:	b0 91 9f 02 	lds	r27, 0x029F
    23f2:	80 31       	cpi	r24, 0x10	; 16
    23f4:	91 05       	cpc	r25, r1
    23f6:	a1 05       	cpc	r26, r1
    23f8:	b1 05       	cpc	r27, r1
    23fa:	68 f4       	brcc	.+26     	; 0x2416 <begin+0x82>
    23fc:	80 91 a0 02 	lds	r24, 0x02A0
    2400:	90 91 a1 02 	lds	r25, 0x02A1
    2404:	a0 91 a2 02 	lds	r26, 0x02A2
    2408:	b0 91 a3 02 	lds	r27, 0x02A3
    240c:	80 31       	cpi	r24, 0x10	; 16
    240e:	91 05       	cpc	r25, r1
    2410:	a1 05       	cpc	r26, r1
    2412:	b1 05       	cpc	r27, r1
    2414:	20 f2       	brcs	.-120    	; 0x239e <begin+0xa>
		{
			ShaftCountRight=0,ShaftCountLeft=0;
    2416:	10 92 a0 02 	sts	0x02A0, r1
    241a:	10 92 a1 02 	sts	0x02A1, r1
    241e:	10 92 a2 02 	sts	0x02A2, r1
    2422:	10 92 a3 02 	sts	0x02A3, r1
    2426:	10 92 9c 02 	sts	0x029C, r1
    242a:	10 92 9d 02 	sts	0x029D, r1
    242e:	10 92 9e 02 	sts	0x029E, r1
    2432:	10 92 9f 02 	sts	0x029F, r1
			stop();
    2436:	0e 94 ef 10 	call	0x21de	; 0x21de <stop>
			
			break;
    243a:	00 00       	nop
		}
	}
	
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	08 95       	ret

00002442 <detect>:
	  }
	  printf("\n");
	 }
}
*/
void detect(int s){
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	28 97       	sbiw	r28, 0x08	; 8
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	98 87       	std	Y+8, r25	; 0x08
    2458:	8f 83       	std	Y+7, r24	; 0x07
	int c=s;
    245a:	8f 81       	ldd	r24, Y+7	; 0x07
    245c:	98 85       	ldd	r25, Y+8	; 0x08
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
	int i=0,j=0;
    2462:	1a 82       	std	Y+2, r1	; 0x02
    2464:	19 82       	std	Y+1, r1	; 0x01
    2466:	1c 82       	std	Y+4, r1	; 0x04
    2468:	1b 82       	std	Y+3, r1	; 0x03

	for(i=0;i<ROWSIZE;i++){
    246a:	1a 82       	std	Y+2, r1	; 0x02
    246c:	19 82       	std	Y+1, r1	; 0x01
    246e:	5a c0       	rjmp	.+180    	; 0x2524 <detect+0xe2>
	   for(j=0;j<COLSIZE;j++){
    2470:	1c 82       	std	Y+4, r1	; 0x04
    2472:	1b 82       	std	Y+3, r1	; 0x03
    2474:	4c c0       	rjmp	.+152    	; 0x250e <detect+0xcc>
	      if(maze[i][j]==c){
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	9c 01       	movw	r18, r24
    247c:	22 0f       	add	r18, r18
    247e:	33 1f       	adc	r19, r19
    2480:	22 0f       	add	r18, r18
    2482:	33 1f       	adc	r19, r19
    2484:	22 0f       	add	r18, r18
    2486:	33 1f       	adc	r19, r19
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	82 0f       	add	r24, r18
    248e:	93 1f       	adc	r25, r19
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	84 5f       	subi	r24, 0xF4	; 244
    2496:	9d 4f       	sbci	r25, 0xFD	; 253
    2498:	fc 01       	movw	r30, r24
    249a:	20 81       	ld	r18, Z
    249c:	31 81       	ldd	r19, Z+1	; 0x01
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	28 17       	cp	r18, r24
    24a4:	39 07       	cpc	r19, r25
    24a6:	71 f5       	brne	.+92     	; 0x2504 <detect+0xc2>
		DX=i;
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	90 93 ad 02 	sts	0x02AD, r25
    24b0:	80 93 ac 02 	sts	0x02AC, r24
		DY=j;
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	90 93 af 02 	sts	0x02AF, r25
    24bc:	80 93 ae 02 	sts	0x02AE, r24
		maze[i][j]=count;
    24c0:	20 91 08 02 	lds	r18, 0x0208
    24c4:	30 91 09 02 	lds	r19, 0x0209
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	ac 01       	movw	r20, r24
    24ce:	44 0f       	add	r20, r20
    24d0:	55 1f       	adc	r21, r21
    24d2:	44 0f       	add	r20, r20
    24d4:	55 1f       	adc	r21, r21
    24d6:	44 0f       	add	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	84 0f       	add	r24, r20
    24e0:	95 1f       	adc	r25, r21
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	84 5f       	subi	r24, 0xF4	; 244
    24e8:	9d 4f       	sbci	r25, 0xFD	; 253
    24ea:	fc 01       	movw	r30, r24
    24ec:	31 83       	std	Z+1, r19	; 0x01
    24ee:	20 83       	st	Z, r18
		count++;
    24f0:	80 91 08 02 	lds	r24, 0x0208
    24f4:	90 91 09 02 	lds	r25, 0x0209
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	90 93 09 02 	sts	0x0209, r25
    24fe:	80 93 08 02 	sts	0x0208, r24
		break;
    2502:	0b c0       	rjmp	.+22     	; 0x251a <detect+0xd8>
void detect(int s){
	int c=s;
	int i=0,j=0;

	for(i=0;i<ROWSIZE;i++){
	   for(j=0;j<COLSIZE;j++){
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	8b 83       	std	Y+3, r24	; 0x03
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	88 30       	cpi	r24, 0x08	; 8
    2514:	91 05       	cpc	r25, r1
    2516:	0c f4       	brge	.+2      	; 0x251a <detect+0xd8>
    2518:	ae cf       	rjmp	.-164    	; 0x2476 <detect+0x34>
*/
void detect(int s){
	int c=s;
	int i=0,j=0;

	for(i=0;i<ROWSIZE;i++){
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	88 30       	cpi	r24, 0x08	; 8
    252a:	91 05       	cpc	r25, r1
    252c:	0c f4       	brge	.+2      	; 0x2530 <detect+0xee>
    252e:	a0 cf       	rjmp	.-192    	; 0x2470 <detect+0x2e>
		count++;
		break;
		}
	   }
	}
}
    2530:	28 96       	adiw	r28, 0x08	; 8
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <solve>:

void solve(int dX,int dY){
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	28 97       	sbiw	r28, 0x08	; 8
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	78 87       	std	Y+8, r23	; 0x08
    255c:	6f 83       	std	Y+7, r22	; 0x07

	int curX=0,curY=0;
    255e:	1a 82       	std	Y+2, r1	; 0x02
    2560:	19 82       	std	Y+1, r1	; 0x01
    2562:	1c 82       	std	Y+4, r1	; 0x04
    2564:	1b 82       	std	Y+3, r1	; 0x03
		curX=dX;
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	89 83       	std	Y+1, r24	; 0x01
		curY=dY;
    256e:	8f 81       	ldd	r24, Y+7	; 0x07
    2570:	98 85       	ldd	r25, Y+8	; 0x08
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03

		if(maze[curX-1][curY]==11){
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9c 01       	movw	r18, r24
    257e:	22 0f       	add	r18, r18
    2580:	33 1f       	adc	r19, r19
    2582:	22 0f       	add	r18, r18
    2584:	33 1f       	adc	r19, r19
    2586:	22 0f       	add	r18, r18
    2588:	33 1f       	adc	r19, r19
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	82 0f       	add	r24, r18
    2590:	93 1f       	adc	r25, r19
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	84 5f       	subi	r24, 0xF4	; 244
    2598:	9d 4f       	sbci	r25, 0xFD	; 253
    259a:	fc 01       	movw	r30, r24
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	8b 30       	cpi	r24, 0x0B	; 11
    25a2:	91 05       	cpc	r25, r1
    25a4:	f9 f4       	brne	.+62     	; 0x25e4 <solve+0xa2>
		maze[curX-1][curY]=count;
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	20 91 08 02 	lds	r18, 0x0208
    25b0:	30 91 09 02 	lds	r19, 0x0209
    25b4:	ac 01       	movw	r20, r24
    25b6:	44 0f       	add	r20, r20
    25b8:	55 1f       	adc	r21, r21
    25ba:	44 0f       	add	r20, r20
    25bc:	55 1f       	adc	r21, r21
    25be:	44 0f       	add	r20, r20
    25c0:	55 1f       	adc	r21, r21
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	84 0f       	add	r24, r20
    25c8:	95 1f       	adc	r25, r21
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	84 5f       	subi	r24, 0xF4	; 244
    25d0:	9d 4f       	sbci	r25, 0xFD	; 253
    25d2:	fc 01       	movw	r30, r24
    25d4:	31 83       	std	Z+1, r19	; 0x01
    25d6:	20 83       	st	Z, r18
		repeat=1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	90 93 a9 02 	sts	0x02A9, r25
    25e0:	80 93 a8 02 	sts	0x02A8, r24
		}
		if(maze[curX][curY-1]==11){
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	29 81       	ldd	r18, Y+1	; 0x01
    25ec:	3a 81       	ldd	r19, Y+2	; 0x02
    25ee:	22 0f       	add	r18, r18
    25f0:	33 1f       	adc	r19, r19
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	22 0f       	add	r18, r18
    25f8:	33 1f       	adc	r19, r19
    25fa:	82 0f       	add	r24, r18
    25fc:	93 1f       	adc	r25, r19
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	84 5f       	subi	r24, 0xF4	; 244
    2604:	9d 4f       	sbci	r25, 0xFD	; 253
    2606:	fc 01       	movw	r30, r24
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	8b 30       	cpi	r24, 0x0B	; 11
    260e:	91 05       	cpc	r25, r1
    2610:	f1 f4       	brne	.+60     	; 0x264e <solve+0x10c>
		maze[curX][curY-1]=count;
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	20 91 08 02 	lds	r18, 0x0208
    261c:	30 91 09 02 	lds	r19, 0x0209
    2620:	49 81       	ldd	r20, Y+1	; 0x01
    2622:	5a 81       	ldd	r21, Y+2	; 0x02
    2624:	44 0f       	add	r20, r20
    2626:	55 1f       	adc	r21, r21
    2628:	44 0f       	add	r20, r20
    262a:	55 1f       	adc	r21, r21
    262c:	44 0f       	add	r20, r20
    262e:	55 1f       	adc	r21, r21
    2630:	84 0f       	add	r24, r20
    2632:	95 1f       	adc	r25, r21
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	84 5f       	subi	r24, 0xF4	; 244
    263a:	9d 4f       	sbci	r25, 0xFD	; 253
    263c:	fc 01       	movw	r30, r24
    263e:	31 83       	std	Z+1, r19	; 0x01
    2640:	20 83       	st	Z, r18
		repeat=1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	90 93 a9 02 	sts	0x02A9, r25
    264a:	80 93 a8 02 	sts	0x02A8, r24
		}
		if(maze[curX][curY+1]==11){
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	29 81       	ldd	r18, Y+1	; 0x01
    2656:	3a 81       	ldd	r19, Y+2	; 0x02
    2658:	22 0f       	add	r18, r18
    265a:	33 1f       	adc	r19, r19
    265c:	22 0f       	add	r18, r18
    265e:	33 1f       	adc	r19, r19
    2660:	22 0f       	add	r18, r18
    2662:	33 1f       	adc	r19, r19
    2664:	82 0f       	add	r24, r18
    2666:	93 1f       	adc	r25, r19
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	84 5f       	subi	r24, 0xF4	; 244
    266e:	9d 4f       	sbci	r25, 0xFD	; 253
    2670:	fc 01       	movw	r30, r24
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	8b 30       	cpi	r24, 0x0B	; 11
    2678:	91 05       	cpc	r25, r1
    267a:	f1 f4       	brne	.+60     	; 0x26b8 <solve+0x176>
		maze[curX][curY+1]=count;
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	20 91 08 02 	lds	r18, 0x0208
    2686:	30 91 09 02 	lds	r19, 0x0209
    268a:	49 81       	ldd	r20, Y+1	; 0x01
    268c:	5a 81       	ldd	r21, Y+2	; 0x02
    268e:	44 0f       	add	r20, r20
    2690:	55 1f       	adc	r21, r21
    2692:	44 0f       	add	r20, r20
    2694:	55 1f       	adc	r21, r21
    2696:	44 0f       	add	r20, r20
    2698:	55 1f       	adc	r21, r21
    269a:	84 0f       	add	r24, r20
    269c:	95 1f       	adc	r25, r21
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	84 5f       	subi	r24, 0xF4	; 244
    26a4:	9d 4f       	sbci	r25, 0xFD	; 253
    26a6:	fc 01       	movw	r30, r24
    26a8:	31 83       	std	Z+1, r19	; 0x01
    26aa:	20 83       	st	Z, r18
		repeat=1;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	90 93 a9 02 	sts	0x02A9, r25
    26b4:	80 93 a8 02 	sts	0x02A8, r24
		}
		if(maze[curX+1][curY]==11){
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	9c 01       	movw	r18, r24
    26c0:	22 0f       	add	r18, r18
    26c2:	33 1f       	adc	r19, r19
    26c4:	22 0f       	add	r18, r18
    26c6:	33 1f       	adc	r19, r19
    26c8:	22 0f       	add	r18, r18
    26ca:	33 1f       	adc	r19, r19
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	82 0f       	add	r24, r18
    26d2:	93 1f       	adc	r25, r19
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	84 5f       	subi	r24, 0xF4	; 244
    26da:	9d 4f       	sbci	r25, 0xFD	; 253
    26dc:	fc 01       	movw	r30, r24
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	8b 30       	cpi	r24, 0x0B	; 11
    26e4:	91 05       	cpc	r25, r1
    26e6:	f9 f4       	brne	.+62     	; 0x2726 <solve+0x1e4>
		maze[curX+1][curY]=count;
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	20 91 08 02 	lds	r18, 0x0208
    26f2:	30 91 09 02 	lds	r19, 0x0209
    26f6:	ac 01       	movw	r20, r24
    26f8:	44 0f       	add	r20, r20
    26fa:	55 1f       	adc	r21, r21
    26fc:	44 0f       	add	r20, r20
    26fe:	55 1f       	adc	r21, r21
    2700:	44 0f       	add	r20, r20
    2702:	55 1f       	adc	r21, r21
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	9c 81       	ldd	r25, Y+4	; 0x04
    2708:	84 0f       	add	r24, r20
    270a:	95 1f       	adc	r25, r21
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	84 5f       	subi	r24, 0xF4	; 244
    2712:	9d 4f       	sbci	r25, 0xFD	; 253
    2714:	fc 01       	movw	r30, r24
    2716:	31 83       	std	Z+1, r19	; 0x01
    2718:	20 83       	st	Z, r18
		repeat=1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	90 93 a9 02 	sts	0x02A9, r25
    2722:	80 93 a8 02 	sts	0x02A8, r24
		}

}
    2726:	28 96       	adiw	r28, 0x08	; 8
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <detectnodes>:

void detectnodes(int e){
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	28 97       	sbiw	r28, 0x08	; 8
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	98 87       	std	Y+8, r25	; 0x08
    274e:	8f 83       	std	Y+7, r24	; 0x07
	int v=e;
    2750:	8f 81       	ldd	r24, Y+7	; 0x07
    2752:	98 85       	ldd	r25, Y+8	; 0x08
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05

	int i=0,j=0;
    2758:	1a 82       	std	Y+2, r1	; 0x02
    275a:	19 82       	std	Y+1, r1	; 0x01
    275c:	1c 82       	std	Y+4, r1	; 0x04
    275e:	1b 82       	std	Y+3, r1	; 0x03

	for(i=0;i<ROWSIZE;i++){
    2760:	1a 82       	std	Y+2, r1	; 0x02
    2762:	19 82       	std	Y+1, r1	; 0x01
    2764:	32 c0       	rjmp	.+100    	; 0x27ca <detectnodes+0x92>
	   for(j=0;j<COLSIZE;j++){
    2766:	1c 82       	std	Y+4, r1	; 0x04
    2768:	1b 82       	std	Y+3, r1	; 0x03
    276a:	25 c0       	rjmp	.+74     	; 0x27b6 <detectnodes+0x7e>
	      if(maze[i][j]==v){
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	9c 01       	movw	r18, r24
    2772:	22 0f       	add	r18, r18
    2774:	33 1f       	adc	r19, r19
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	22 0f       	add	r18, r18
    277c:	33 1f       	adc	r19, r19
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	82 0f       	add	r24, r18
    2784:	93 1f       	adc	r25, r19
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	84 5f       	subi	r24, 0xF4	; 244
    278c:	9d 4f       	sbci	r25, 0xFD	; 253
    278e:	fc 01       	movw	r30, r24
    2790:	20 81       	ld	r18, Z
    2792:	31 81       	ldd	r19, Z+1	; 0x01
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	28 17       	cp	r18, r24
    279a:	39 07       	cpc	r19, r25
    279c:	39 f4       	brne	.+14     	; 0x27ac <detectnodes+0x74>
		solve(i,j);
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	2b 81       	ldd	r18, Y+3	; 0x03
    27a4:	3c 81       	ldd	r19, Y+4	; 0x04
    27a6:	b9 01       	movw	r22, r18
    27a8:	0e 94 a1 12 	call	0x2542	; 0x2542 <solve>
	int v=e;

	int i=0,j=0;

	for(i=0;i<ROWSIZE;i++){
	   for(j=0;j<COLSIZE;j++){
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	9c 83       	std	Y+4, r25	; 0x04
    27b4:	8b 83       	std	Y+3, r24	; 0x03
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	88 30       	cpi	r24, 0x08	; 8
    27bc:	91 05       	cpc	r25, r1
    27be:	b4 f2       	brlt	.-84     	; 0x276c <detectnodes+0x34>
void detectnodes(int e){
	int v=e;

	int i=0,j=0;

	for(i=0;i<ROWSIZE;i++){
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	88 30       	cpi	r24, 0x08	; 8
    27d0:	91 05       	cpc	r25, r1
    27d2:	4c f2       	brlt	.-110    	; 0x2766 <detectnodes+0x2e>
	      if(maze[i][j]==v){
		solve(i,j);
		}
	   }
	}
	matcount++;
    27d4:	80 91 0a 02 	lds	r24, 0x020A
    27d8:	90 91 0b 02 	lds	r25, 0x020B
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	90 93 0b 02 	sts	0x020B, r25
    27e2:	80 93 0a 02 	sts	0x020A, r24

	if(repeat==1 && sourcefound==0){
    27e6:	80 91 a8 02 	lds	r24, 0x02A8
    27ea:	90 91 a9 02 	lds	r25, 0x02A9
    27ee:	81 30       	cpi	r24, 0x01	; 1
    27f0:	91 05       	cpc	r25, r1
    27f2:	d1 f4       	brne	.+52     	; 0x2828 <detectnodes+0xf0>
    27f4:	80 91 aa 02 	lds	r24, 0x02AA
    27f8:	90 91 ab 02 	lds	r25, 0x02AB
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	a1 f4       	brne	.+40     	; 0x2828 <detectnodes+0xf0>
		repeat=0;
    2800:	10 92 a9 02 	sts	0x02A9, r1
    2804:	10 92 a8 02 	sts	0x02A8, r1
		count++;
    2808:	80 91 08 02 	lds	r24, 0x0208
    280c:	90 91 09 02 	lds	r25, 0x0209
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	90 93 09 02 	sts	0x0209, r25
    2816:	80 93 08 02 	sts	0x0208, r24
		detectnodes(count-1);
    281a:	80 91 08 02 	lds	r24, 0x0208
    281e:	90 91 09 02 	lds	r25, 0x0209
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	0e 94 9c 13 	call	0x2738	; 0x2738 <detectnodes>
	}
}
    2828:	28 96       	adiw	r28, 0x08	; 8
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <chartoint>:

int chartoint(unsigned char chr){
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	00 d0       	rcall	.+0      	; 0x2840 <chartoint+0x6>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	8b 83       	std	Y+3, r24	; 0x03
	int x=0;
    2846:	1a 82       	std	Y+2, r1	; 0x02
    2848:	19 82       	std	Y+1, r1	; 0x01
	switch(chr){
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	88 2f       	mov	r24, r24
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	87 33       	cpi	r24, 0x37	; 55
    2852:	91 05       	cpc	r25, r1
    2854:	09 f4       	brne	.+2      	; 0x2858 <chartoint+0x1e>
    2856:	72 c0       	rjmp	.+228    	; 0x293c <chartoint+0x102>
    2858:	88 33       	cpi	r24, 0x38	; 56
    285a:	91 05       	cpc	r25, r1
    285c:	bc f4       	brge	.+46     	; 0x288c <chartoint+0x52>
    285e:	83 33       	cpi	r24, 0x33	; 51
    2860:	91 05       	cpc	r25, r1
    2862:	09 f4       	brne	.+2      	; 0x2866 <chartoint+0x2c>
    2864:	43 c0       	rjmp	.+134    	; 0x28ec <chartoint+0xb2>
    2866:	84 33       	cpi	r24, 0x34	; 52
    2868:	91 05       	cpc	r25, r1
    286a:	3c f4       	brge	.+14     	; 0x287a <chartoint+0x40>
    286c:	81 33       	cpi	r24, 0x31	; 49
    286e:	91 05       	cpc	r25, r1
    2870:	49 f1       	breq	.+82     	; 0x28c4 <chartoint+0x8a>
    2872:	82 33       	cpi	r24, 0x32	; 50
    2874:	91 05       	cpc	r25, r1
    2876:	81 f1       	breq	.+96     	; 0x28d8 <chartoint+0x9e>
    2878:	6b c0       	rjmp	.+214    	; 0x2950 <chartoint+0x116>
    287a:	85 33       	cpi	r24, 0x35	; 53
    287c:	91 05       	cpc	r25, r1
    287e:	09 f4       	brne	.+2      	; 0x2882 <chartoint+0x48>
    2880:	49 c0       	rjmp	.+146    	; 0x2914 <chartoint+0xda>
    2882:	86 33       	cpi	r24, 0x36	; 54
    2884:	91 05       	cpc	r25, r1
    2886:	0c f0       	brlt	.+2      	; 0x288a <chartoint+0x50>
    2888:	4f c0       	rjmp	.+158    	; 0x2928 <chartoint+0xee>
    288a:	3a c0       	rjmp	.+116    	; 0x2900 <chartoint+0xc6>
    288c:	84 34       	cpi	r24, 0x44	; 68
    288e:	91 05       	cpc	r25, r1
    2890:	e1 f1       	breq	.+120    	; 0x290a <chartoint+0xd0>
    2892:	85 34       	cpi	r24, 0x45	; 69
    2894:	91 05       	cpc	r25, r1
    2896:	54 f4       	brge	.+20     	; 0x28ac <chartoint+0x72>
    2898:	82 34       	cpi	r24, 0x42	; 66
    289a:	91 05       	cpc	r25, r1
    289c:	11 f1       	breq	.+68     	; 0x28e2 <chartoint+0xa8>
    289e:	83 34       	cpi	r24, 0x43	; 67
    28a0:	91 05       	cpc	r25, r1
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <chartoint+0xbc>
    28a4:	81 34       	cpi	r24, 0x41	; 65
    28a6:	91 05       	cpc	r25, r1
    28a8:	91 f0       	breq	.+36     	; 0x28ce <chartoint+0x94>
    28aa:	52 c0       	rjmp	.+164    	; 0x2950 <chartoint+0x116>
    28ac:	86 34       	cpi	r24, 0x46	; 70
    28ae:	91 05       	cpc	r25, r1
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <chartoint+0x7a>
    28b2:	3f c0       	rjmp	.+126    	; 0x2932 <chartoint+0xf8>
    28b4:	86 34       	cpi	r24, 0x46	; 70
    28b6:	91 05       	cpc	r25, r1
    28b8:	94 f1       	brlt	.+100    	; 0x291e <chartoint+0xe4>
    28ba:	87 34       	cpi	r24, 0x47	; 71
    28bc:	91 05       	cpc	r25, r1
    28be:	09 f4       	brne	.+2      	; 0x28c2 <chartoint+0x88>
    28c0:	42 c0       	rjmp	.+132    	; 0x2946 <chartoint+0x10c>
    28c2:	46 c0       	rjmp	.+140    	; 0x2950 <chartoint+0x116>
		case '1': x=1;	break;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	43 c0       	rjmp	.+134    	; 0x2954 <chartoint+0x11a>
		case 'A': x=1;	break;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	3e c0       	rjmp	.+124    	; 0x2954 <chartoint+0x11a>
		case '2': x=2;	break;
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	39 c0       	rjmp	.+114    	; 0x2954 <chartoint+0x11a>
		case 'B': x=2;	break;
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9a 83       	std	Y+2, r25	; 0x02
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	34 c0       	rjmp	.+104    	; 0x2954 <chartoint+0x11a>
		case '3': x=3;	break;
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	2f c0       	rjmp	.+94     	; 0x2954 <chartoint+0x11a>
		case 'C': x=3;	break;
    28f6:	83 e0       	ldi	r24, 0x03	; 3
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	2a c0       	rjmp	.+84     	; 0x2954 <chartoint+0x11a>
		case '4': x=4;	break;
    2900:	84 e0       	ldi	r24, 0x04	; 4
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01
    2908:	25 c0       	rjmp	.+74     	; 0x2954 <chartoint+0x11a>
		case 'D': x=4;	break;
    290a:	84 e0       	ldi	r24, 0x04	; 4
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	20 c0       	rjmp	.+64     	; 0x2954 <chartoint+0x11a>
		case '5': x=5;	break;
    2914:	85 e0       	ldi	r24, 0x05	; 5
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9a 83       	std	Y+2, r25	; 0x02
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	1b c0       	rjmp	.+54     	; 0x2954 <chartoint+0x11a>
		case 'E': x=5;	break;
    291e:	85 e0       	ldi	r24, 0x05	; 5
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	16 c0       	rjmp	.+44     	; 0x2954 <chartoint+0x11a>
		case '6': x=6;	break;
    2928:	86 e0       	ldi	r24, 0x06	; 6
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	11 c0       	rjmp	.+34     	; 0x2954 <chartoint+0x11a>
		case 'F': x=6;	break;
    2932:	86 e0       	ldi	r24, 0x06	; 6
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	0c c0       	rjmp	.+24     	; 0x2954 <chartoint+0x11a>
		case '7': x=7;	break;
    293c:	87 e0       	ldi	r24, 0x07	; 7
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	07 c0       	rjmp	.+14     	; 0x2954 <chartoint+0x11a>
		case 'G': x=7;	break;
    2946:	87 e0       	ldi	r24, 0x07	; 7
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <chartoint+0x11a>
		default : x=0;
    2950:	1a 82       	std	Y+2, r1	; 0x02
    2952:	19 82       	std	Y+1, r1	; 0x01
	}
	return x;
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	08 95       	ret

00002964 <placeobstacles>:

void placeobstacles(int xi,int yi){
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	00 d0       	rcall	.+0      	; 0x296a <placeobstacles+0x6>
    296a:	0f 92       	push	r0
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	7c 83       	std	Y+4, r23	; 0x04
    2976:	6b 83       	std	Y+3, r22	; 0x03
		maze[xi][yi]=10;
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	9c 01       	movw	r18, r24
    297e:	22 0f       	add	r18, r18
    2980:	33 1f       	adc	r19, r19
    2982:	22 0f       	add	r18, r18
    2984:	33 1f       	adc	r19, r19
    2986:	22 0f       	add	r18, r18
    2988:	33 1f       	adc	r19, r19
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	82 0f       	add	r24, r18
    2990:	93 1f       	adc	r25, r19
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	84 5f       	subi	r24, 0xF4	; 244
    2998:	9d 4f       	sbci	r25, 0xFD	; 253
    299a:	2a e0       	ldi	r18, 0x0A	; 10
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	fc 01       	movw	r30, r24
    29a0:	31 83       	std	Z+1, r19	; 0x01
    29a2:	20 83       	st	Z, r18
		lcd_print (2, 8, xi,1 );
    29a4:	29 81       	ldd	r18, Y+1	; 0x01
    29a6:	3a 81       	ldd	r19, Y+2	; 0x02
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	68 e0       	ldi	r22, 0x08	; 8
    29ac:	a9 01       	movw	r20, r18
    29ae:	21 e0       	ldi	r18, 0x01	; 1
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	0e 94 16 0c 	call	0x182c	; 0x182c <lcd_print>
		lcd_print (2, 9, yi,1 );
    29b6:	2b 81       	ldd	r18, Y+3	; 0x03
    29b8:	3c 81       	ldd	r19, Y+4	; 0x04
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	69 e0       	ldi	r22, 0x09	; 9
    29be:	a9 01       	movw	r20, r18
    29c0:	21 e0       	ldi	r18, 0x01	; 1
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	0e 94 16 0c 	call	0x182c	; 0x182c <lcd_print>
};
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	08 95       	ret

000029d6 <setDestination>:

void setDestination(int xj,int yj){
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	00 d0       	rcall	.+0      	; 0x29dc <setDestination+0x6>
    29dc:	0f 92       	push	r0
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	7c 83       	std	Y+4, r23	; 0x04
    29e8:	6b 83       	std	Y+3, r22	; 0x03
		DX=xj;
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	9a 81       	ldd	r25, Y+2	; 0x02
    29ee:	90 93 ad 02 	sts	0x02AD, r25
    29f2:	80 93 ac 02 	sts	0x02AC, r24
		DY=yj;
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	90 93 af 02 	sts	0x02AF, r25
    29fe:	80 93 ae 02 	sts	0x02AE, r24
		maze[xj][yj]=count;
    2a02:	20 91 08 02 	lds	r18, 0x0208
    2a06:	30 91 09 02 	lds	r19, 0x0209
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	ac 01       	movw	r20, r24
    2a10:	44 0f       	add	r20, r20
    2a12:	55 1f       	adc	r21, r21
    2a14:	44 0f       	add	r20, r20
    2a16:	55 1f       	adc	r21, r21
    2a18:	44 0f       	add	r20, r20
    2a1a:	55 1f       	adc	r21, r21
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a20:	84 0f       	add	r24, r20
    2a22:	95 1f       	adc	r25, r21
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	84 5f       	subi	r24, 0xF4	; 244
    2a2a:	9d 4f       	sbci	r25, 0xFD	; 253
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	31 83       	std	Z+1, r19	; 0x01
    2a30:	20 83       	st	Z, r18
		count++;
    2a32:	80 91 08 02 	lds	r24, 0x0208
    2a36:	90 91 09 02 	lds	r25, 0x0209
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	90 93 09 02 	sts	0x0209, r25
    2a40:	80 93 08 02 	sts	0x0208, r24
		lcd_print (2, 5, xj,1 );
    2a44:	29 81       	ldd	r18, Y+1	; 0x01
    2a46:	3a 81       	ldd	r19, Y+2	; 0x02
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	65 e0       	ldi	r22, 0x05	; 5
    2a4c:	a9 01       	movw	r20, r18
    2a4e:	21 e0       	ldi	r18, 0x01	; 1
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	0e 94 16 0c 	call	0x182c	; 0x182c <lcd_print>
		lcd_print (2, 6, yj,1 );
    2a56:	2b 81       	ldd	r18, Y+3	; 0x03
    2a58:	3c 81       	ldd	r19, Y+4	; 0x04
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	66 e0       	ldi	r22, 0x06	; 6
    2a5e:	a9 01       	movw	r20, r18
    2a60:	21 e0       	ldi	r18, 0x01	; 1
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	0e 94 16 0c 	call	0x182c	; 0x182c <lcd_print>
}
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	08 95       	ret

00002a76 <setSource>:

void setSource(int xk,int yk){
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <setSource+0x6>
    2a7c:	0f 92       	push	r0
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	7c 83       	std	Y+4, r23	; 0x04
    2a88:	6b 83       	std	Y+3, r22	; 0x03
		SX=xk;
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	90 93 03 02 	sts	0x0203, r25
    2a92:	80 93 02 02 	sts	0x0202, r24
		SY=yk;
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	90 93 05 02 	sts	0x0205, r25
    2a9e:	80 93 04 02 	sts	0x0204, r24
}
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	08 95       	ret

00002ab0 <refresh>:

void refresh(){
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <refresh+0x6>
    2ab6:	0f 92       	push	r0
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
	init_devices ();
    2abc:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <init_devices>
	stop();
    2ac0:	0e 94 ef 10 	call	0x21de	; 0x21de <stop>
	if (flag2==0)
    2ac4:	80 91 a4 02 	lds	r24, 0x02A4
    2ac8:	90 91 a5 02 	lds	r25, 0x02A5
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	41 f4       	brne	.+16     	; 0x2ae0 <refresh+0x30>
	{
		begin();
    2ad0:	0e 94 ca 11 	call	0x2394	; 0x2394 <begin>
		flag2=1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	90 93 a5 02 	sts	0x02A5, r25
    2adc:	80 93 a4 02 	sts	0x02A4, r24
	}
    int i=0,j=0;count=20;
    2ae0:	1a 82       	std	Y+2, r1	; 0x02
    2ae2:	19 82       	std	Y+1, r1	; 0x01
    2ae4:	1c 82       	std	Y+4, r1	; 0x04
    2ae6:	1b 82       	std	Y+3, r1	; 0x03
    2ae8:	84 e1       	ldi	r24, 0x14	; 20
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	90 93 09 02 	sts	0x0209, r25
    2af0:	80 93 08 02 	sts	0x0208, r24

	 for(i=0;i<ROWSIZE;i++){
    2af4:	1a 82       	std	Y+2, r1	; 0x02
    2af6:	19 82       	std	Y+1, r1	; 0x01
    2af8:	3f c0       	rjmp	.+126    	; 0x2b78 <refresh+0xc8>
	  for(j=0;j<COLSIZE;j++){
    2afa:	1c 82       	std	Y+4, r1	; 0x04
    2afc:	1b 82       	std	Y+3, r1	; 0x03
    2afe:	32 c0       	rjmp	.+100    	; 0x2b64 <refresh+0xb4>
	       if(maze[i][j]!=10){
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	9a 81       	ldd	r25, Y+2	; 0x02
    2b04:	9c 01       	movw	r18, r24
    2b06:	22 0f       	add	r18, r18
    2b08:	33 1f       	adc	r19, r19
    2b0a:	22 0f       	add	r18, r18
    2b0c:	33 1f       	adc	r19, r19
    2b0e:	22 0f       	add	r18, r18
    2b10:	33 1f       	adc	r19, r19
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	82 0f       	add	r24, r18
    2b18:	93 1f       	adc	r25, r19
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	84 5f       	subi	r24, 0xF4	; 244
    2b20:	9d 4f       	sbci	r25, 0xFD	; 253
    2b22:	fc 01       	movw	r30, r24
    2b24:	80 81       	ld	r24, Z
    2b26:	91 81       	ldd	r25, Z+1	; 0x01
    2b28:	8a 30       	cpi	r24, 0x0A	; 10
    2b2a:	91 05       	cpc	r25, r1
    2b2c:	b1 f0       	breq	.+44     	; 0x2b5a <refresh+0xaa>
                maze[i][j]=11;
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	9c 01       	movw	r18, r24
    2b34:	22 0f       	add	r18, r18
    2b36:	33 1f       	adc	r19, r19
    2b38:	22 0f       	add	r18, r18
    2b3a:	33 1f       	adc	r19, r19
    2b3c:	22 0f       	add	r18, r18
    2b3e:	33 1f       	adc	r19, r19
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	82 0f       	add	r24, r18
    2b46:	93 1f       	adc	r25, r19
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	84 5f       	subi	r24, 0xF4	; 244
    2b4e:	9d 4f       	sbci	r25, 0xFD	; 253
    2b50:	2b e0       	ldi	r18, 0x0B	; 11
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	fc 01       	movw	r30, r24
    2b56:	31 83       	std	Z+1, r19	; 0x01
    2b58:	20 83       	st	Z, r18
		flag2=1;
	}
    int i=0,j=0;count=20;

	 for(i=0;i<ROWSIZE;i++){
	  for(j=0;j<COLSIZE;j++){
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	01 96       	adiw	r24, 0x01	; 1
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	8b 83       	std	Y+3, r24	; 0x03
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
    2b68:	88 30       	cpi	r24, 0x08	; 8
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	4c f2       	brlt	.-110    	; 0x2b00 <refresh+0x50>
		begin();
		flag2=1;
	}
    int i=0,j=0;count=20;

	 for(i=0;i<ROWSIZE;i++){
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	01 96       	adiw	r24, 0x01	; 1
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	88 30       	cpi	r24, 0x08	; 8
    2b7e:	91 05       	cpc	r25, r1
    2b80:	0c f4       	brge	.+2      	; 0x2b84 <refresh+0xd4>
    2b82:	bb cf       	rjmp	.-138    	; 0x2afa <refresh+0x4a>
	       if(maze[i][j]!=10){
                maze[i][j]=11;
           }
       }
	 }
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	08 95       	ret

00002b92 <pathplotter>:

void pathplotter(){
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <pathplotter+0x6>
    2b98:	0f 92       	push	r0
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    src_value=maze[SX][SY];
    2b9e:	20 91 02 02 	lds	r18, 0x0202
    2ba2:	30 91 03 02 	lds	r19, 0x0203
    2ba6:	80 91 04 02 	lds	r24, 0x0204
    2baa:	90 91 05 02 	lds	r25, 0x0205
    2bae:	22 0f       	add	r18, r18
    2bb0:	33 1f       	adc	r19, r19
    2bb2:	22 0f       	add	r18, r18
    2bb4:	33 1f       	adc	r19, r19
    2bb6:	22 0f       	add	r18, r18
    2bb8:	33 1f       	adc	r19, r19
    2bba:	82 0f       	add	r24, r18
    2bbc:	93 1f       	adc	r25, r19
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	84 5f       	subi	r24, 0xF4	; 244
    2bc4:	9d 4f       	sbci	r25, 0xFD	; 253
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	90 93 a7 02 	sts	0x02A7, r25
    2bd0:	80 93 a6 02 	sts	0x02A6, r24

    int i=0;
    2bd4:	1a 82       	std	Y+2, r1	; 0x02
    2bd6:	19 82       	std	Y+1, r1	; 0x01
    while(src_value!=20){
    2bd8:	1d c2       	rjmp	.+1082   	; 0x3014 <pathplotter+0x482>
    src_value--;
    2bda:	80 91 a6 02 	lds	r24, 0x02A6
    2bde:	90 91 a7 02 	lds	r25, 0x02A7
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	90 93 a7 02 	sts	0x02A7, r25
    2be8:	80 93 a6 02 	sts	0x02A6, r24

    if(maze[SX-1][SY]==src_value){
    2bec:	80 91 02 02 	lds	r24, 0x0202
    2bf0:	90 91 03 02 	lds	r25, 0x0203
    2bf4:	9c 01       	movw	r18, r24
    2bf6:	21 50       	subi	r18, 0x01	; 1
    2bf8:	30 40       	sbci	r19, 0x00	; 0
    2bfa:	80 91 04 02 	lds	r24, 0x0204
    2bfe:	90 91 05 02 	lds	r25, 0x0205
    2c02:	22 0f       	add	r18, r18
    2c04:	33 1f       	adc	r19, r19
    2c06:	22 0f       	add	r18, r18
    2c08:	33 1f       	adc	r19, r19
    2c0a:	22 0f       	add	r18, r18
    2c0c:	33 1f       	adc	r19, r19
    2c0e:	82 0f       	add	r24, r18
    2c10:	93 1f       	adc	r25, r19
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	84 5f       	subi	r24, 0xF4	; 244
    2c18:	9d 4f       	sbci	r25, 0xFD	; 253
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	20 81       	ld	r18, Z
    2c1e:	31 81       	ldd	r19, Z+1	; 0x01
    2c20:	80 91 a6 02 	lds	r24, 0x02A6
    2c24:	90 91 a7 02 	lds	r25, 0x02A7
    2c28:	28 17       	cp	r18, r24
    2c2a:	39 07       	cpc	r19, r25
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <pathplotter+0x9e>
    2c2e:	63 c0       	rjmp	.+198    	; 0x2cf6 <pathplotter+0x164>
        if(dir==1){
    2c30:	80 91 06 02 	lds	r24, 0x0206
    2c34:	90 91 07 02 	lds	r25, 0x0207
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	61 f4       	brne	.+24     	; 0x2c56 <pathplotter+0xc4>
        path[i]=1;   }
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	80 55       	subi	r24, 0x50	; 80
    2c48:	9d 4f       	sbci	r25, 0xFD	; 253
    2c4a:	21 e0       	ldi	r18, 0x01	; 1
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	fc 01       	movw	r30, r24
    2c50:	31 83       	std	Z+1, r19	; 0x01
    2c52:	20 83       	st	Z, r18
    2c54:	38 c0       	rjmp	.+112    	; 0x2cc6 <pathplotter+0x134>
        else if(dir==2){
    2c56:	80 91 06 02 	lds	r24, 0x0206
    2c5a:	90 91 07 02 	lds	r25, 0x0207
    2c5e:	82 30       	cpi	r24, 0x02	; 2
    2c60:	91 05       	cpc	r25, r1
    2c62:	61 f4       	brne	.+24     	; 0x2c7c <pathplotter+0xea>
        path[i]=8;   }
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	9a 81       	ldd	r25, Y+2	; 0x02
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	80 55       	subi	r24, 0x50	; 80
    2c6e:	9d 4f       	sbci	r25, 0xFD	; 253
    2c70:	28 e0       	ldi	r18, 0x08	; 8
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	fc 01       	movw	r30, r24
    2c76:	31 83       	std	Z+1, r19	; 0x01
    2c78:	20 83       	st	Z, r18
    2c7a:	25 c0       	rjmp	.+74     	; 0x2cc6 <pathplotter+0x134>
        else if(dir==8){
    2c7c:	80 91 06 02 	lds	r24, 0x0206
    2c80:	90 91 07 02 	lds	r25, 0x0207
    2c84:	88 30       	cpi	r24, 0x08	; 8
    2c86:	91 05       	cpc	r25, r1
    2c88:	61 f4       	brne	.+24     	; 0x2ca2 <pathplotter+0x110>
        path[i]=2;   }
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8e:	88 0f       	add	r24, r24
    2c90:	99 1f       	adc	r25, r25
    2c92:	80 55       	subi	r24, 0x50	; 80
    2c94:	9d 4f       	sbci	r25, 0xFD	; 253
    2c96:	22 e0       	ldi	r18, 0x02	; 2
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	31 83       	std	Z+1, r19	; 0x01
    2c9e:	20 83       	st	Z, r18
    2ca0:	12 c0       	rjmp	.+36     	; 0x2cc6 <pathplotter+0x134>
        else if(dir==4){
    2ca2:	80 91 06 02 	lds	r24, 0x0206
    2ca6:	90 91 07 02 	lds	r25, 0x0207
    2caa:	84 30       	cpi	r24, 0x04	; 4
    2cac:	91 05       	cpc	r25, r1
    2cae:	59 f4       	brne	.+22     	; 0x2cc6 <pathplotter+0x134>
        path[i]=4;   }
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	80 55       	subi	r24, 0x50	; 80
    2cba:	9d 4f       	sbci	r25, 0xFD	; 253
    2cbc:	24 e0       	ldi	r18, 0x04	; 4
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	31 83       	std	Z+1, r19	; 0x01
    2cc4:	20 83       	st	Z, r18
        dir=1;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	90 93 07 02 	sts	0x0207, r25
    2cce:	80 93 06 02 	sts	0x0206, r24
        SX=SX-1;
    2cd2:	80 91 02 02 	lds	r24, 0x0202
    2cd6:	90 91 03 02 	lds	r25, 0x0203
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	90 93 03 02 	sts	0x0203, r25
    2ce0:	80 93 02 02 	sts	0x0202, r24
        SY=SY;
    2ce4:	80 91 04 02 	lds	r24, 0x0204
    2ce8:	90 91 05 02 	lds	r25, 0x0205
    2cec:	90 93 05 02 	sts	0x0205, r25
    2cf0:	80 93 04 02 	sts	0x0204, r24
    2cf4:	8a c1       	rjmp	.+788    	; 0x300a <pathplotter+0x478>
    }
    else if(maze[SX][SY+1]==src_value){
    2cf6:	20 91 02 02 	lds	r18, 0x0202
    2cfa:	30 91 03 02 	lds	r19, 0x0203
    2cfe:	80 91 04 02 	lds	r24, 0x0204
    2d02:	90 91 05 02 	lds	r25, 0x0205
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	22 0f       	add	r18, r18
    2d0a:	33 1f       	adc	r19, r19
    2d0c:	22 0f       	add	r18, r18
    2d0e:	33 1f       	adc	r19, r19
    2d10:	22 0f       	add	r18, r18
    2d12:	33 1f       	adc	r19, r19
    2d14:	82 0f       	add	r24, r18
    2d16:	93 1f       	adc	r25, r19
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	84 5f       	subi	r24, 0xF4	; 244
    2d1e:	9d 4f       	sbci	r25, 0xFD	; 253
    2d20:	fc 01       	movw	r30, r24
    2d22:	20 81       	ld	r18, Z
    2d24:	31 81       	ldd	r19, Z+1	; 0x01
    2d26:	80 91 a6 02 	lds	r24, 0x02A6
    2d2a:	90 91 a7 02 	lds	r25, 0x02A7
    2d2e:	28 17       	cp	r18, r24
    2d30:	39 07       	cpc	r19, r25
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <pathplotter+0x1a4>
    2d34:	63 c0       	rjmp	.+198    	; 0x2dfc <pathplotter+0x26a>
        if(dir==1){
    2d36:	80 91 06 02 	lds	r24, 0x0206
    2d3a:	90 91 07 02 	lds	r25, 0x0207
    2d3e:	81 30       	cpi	r24, 0x01	; 1
    2d40:	91 05       	cpc	r25, r1
    2d42:	61 f4       	brne	.+24     	; 0x2d5c <pathplotter+0x1ca>
        path[i]=2;   }
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	9a 81       	ldd	r25, Y+2	; 0x02
    2d48:	88 0f       	add	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	80 55       	subi	r24, 0x50	; 80
    2d4e:	9d 4f       	sbci	r25, 0xFD	; 253
    2d50:	22 e0       	ldi	r18, 0x02	; 2
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	fc 01       	movw	r30, r24
    2d56:	31 83       	std	Z+1, r19	; 0x01
    2d58:	20 83       	st	Z, r18
    2d5a:	38 c0       	rjmp	.+112    	; 0x2dcc <pathplotter+0x23a>
        else if(dir==2){
    2d5c:	80 91 06 02 	lds	r24, 0x0206
    2d60:	90 91 07 02 	lds	r25, 0x0207
    2d64:	82 30       	cpi	r24, 0x02	; 2
    2d66:	91 05       	cpc	r25, r1
    2d68:	61 f4       	brne	.+24     	; 0x2d82 <pathplotter+0x1f0>
        path[i]=1;   }
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	80 55       	subi	r24, 0x50	; 80
    2d74:	9d 4f       	sbci	r25, 0xFD	; 253
    2d76:	21 e0       	ldi	r18, 0x01	; 1
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	31 83       	std	Z+1, r19	; 0x01
    2d7e:	20 83       	st	Z, r18
    2d80:	25 c0       	rjmp	.+74     	; 0x2dcc <pathplotter+0x23a>
        else if(dir==4){
    2d82:	80 91 06 02 	lds	r24, 0x0206
    2d86:	90 91 07 02 	lds	r25, 0x0207
    2d8a:	84 30       	cpi	r24, 0x04	; 4
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	61 f4       	brne	.+24     	; 0x2da8 <pathplotter+0x216>
        path[i]=8;   }
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	88 0f       	add	r24, r24
    2d96:	99 1f       	adc	r25, r25
    2d98:	80 55       	subi	r24, 0x50	; 80
    2d9a:	9d 4f       	sbci	r25, 0xFD	; 253
    2d9c:	28 e0       	ldi	r18, 0x08	; 8
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	fc 01       	movw	r30, r24
    2da2:	31 83       	std	Z+1, r19	; 0x01
    2da4:	20 83       	st	Z, r18
    2da6:	12 c0       	rjmp	.+36     	; 0x2dcc <pathplotter+0x23a>
        else if(dir==8){
    2da8:	80 91 06 02 	lds	r24, 0x0206
    2dac:	90 91 07 02 	lds	r25, 0x0207
    2db0:	88 30       	cpi	r24, 0x08	; 8
    2db2:	91 05       	cpc	r25, r1
    2db4:	59 f4       	brne	.+22     	; 0x2dcc <pathplotter+0x23a>
        path[i]=4;   }
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	80 55       	subi	r24, 0x50	; 80
    2dc0:	9d 4f       	sbci	r25, 0xFD	; 253
    2dc2:	24 e0       	ldi	r18, 0x04	; 4
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	31 83       	std	Z+1, r19	; 0x01
    2dca:	20 83       	st	Z, r18
        dir=2;
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	90 93 07 02 	sts	0x0207, r25
    2dd4:	80 93 06 02 	sts	0x0206, r24
        SX=SX;
    2dd8:	80 91 02 02 	lds	r24, 0x0202
    2ddc:	90 91 03 02 	lds	r25, 0x0203
    2de0:	90 93 03 02 	sts	0x0203, r25
    2de4:	80 93 02 02 	sts	0x0202, r24
        SY=SY+1;
    2de8:	80 91 04 02 	lds	r24, 0x0204
    2dec:	90 91 05 02 	lds	r25, 0x0205
    2df0:	01 96       	adiw	r24, 0x01	; 1
    2df2:	90 93 05 02 	sts	0x0205, r25
    2df6:	80 93 04 02 	sts	0x0204, r24
    2dfa:	07 c1       	rjmp	.+526    	; 0x300a <pathplotter+0x478>
    }
    else if(maze[SX+1][SY]==src_value){
    2dfc:	80 91 02 02 	lds	r24, 0x0202
    2e00:	90 91 03 02 	lds	r25, 0x0203
    2e04:	9c 01       	movw	r18, r24
    2e06:	2f 5f       	subi	r18, 0xFF	; 255
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	80 91 04 02 	lds	r24, 0x0204
    2e0e:	90 91 05 02 	lds	r25, 0x0205
    2e12:	22 0f       	add	r18, r18
    2e14:	33 1f       	adc	r19, r19
    2e16:	22 0f       	add	r18, r18
    2e18:	33 1f       	adc	r19, r19
    2e1a:	22 0f       	add	r18, r18
    2e1c:	33 1f       	adc	r19, r19
    2e1e:	82 0f       	add	r24, r18
    2e20:	93 1f       	adc	r25, r19
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	84 5f       	subi	r24, 0xF4	; 244
    2e28:	9d 4f       	sbci	r25, 0xFD	; 253
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	20 81       	ld	r18, Z
    2e2e:	31 81       	ldd	r19, Z+1	; 0x01
    2e30:	80 91 a6 02 	lds	r24, 0x02A6
    2e34:	90 91 a7 02 	lds	r25, 0x02A7
    2e38:	28 17       	cp	r18, r24
    2e3a:	39 07       	cpc	r19, r25
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <pathplotter+0x2ae>
    2e3e:	63 c0       	rjmp	.+198    	; 0x2f06 <pathplotter+0x374>
        if(dir==2){
    2e40:	80 91 06 02 	lds	r24, 0x0206
    2e44:	90 91 07 02 	lds	r25, 0x0207
    2e48:	82 30       	cpi	r24, 0x02	; 2
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	61 f4       	brne	.+24     	; 0x2e66 <pathplotter+0x2d4>
        path[i]=2;   }
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	80 55       	subi	r24, 0x50	; 80
    2e58:	9d 4f       	sbci	r25, 0xFD	; 253
    2e5a:	22 e0       	ldi	r18, 0x02	; 2
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	fc 01       	movw	r30, r24
    2e60:	31 83       	std	Z+1, r19	; 0x01
    2e62:	20 83       	st	Z, r18
    2e64:	38 c0       	rjmp	.+112    	; 0x2ed6 <pathplotter+0x344>
        else if(dir==4){
    2e66:	80 91 06 02 	lds	r24, 0x0206
    2e6a:	90 91 07 02 	lds	r25, 0x0207
    2e6e:	84 30       	cpi	r24, 0x04	; 4
    2e70:	91 05       	cpc	r25, r1
    2e72:	61 f4       	brne	.+24     	; 0x2e8c <pathplotter+0x2fa>
        path[i]=1;   }
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	80 55       	subi	r24, 0x50	; 80
    2e7e:	9d 4f       	sbci	r25, 0xFD	; 253
    2e80:	21 e0       	ldi	r18, 0x01	; 1
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	fc 01       	movw	r30, r24
    2e86:	31 83       	std	Z+1, r19	; 0x01
    2e88:	20 83       	st	Z, r18
    2e8a:	25 c0       	rjmp	.+74     	; 0x2ed6 <pathplotter+0x344>
        else if(dir==8){
    2e8c:	80 91 06 02 	lds	r24, 0x0206
    2e90:	90 91 07 02 	lds	r25, 0x0207
    2e94:	88 30       	cpi	r24, 0x08	; 8
    2e96:	91 05       	cpc	r25, r1
    2e98:	61 f4       	brne	.+24     	; 0x2eb2 <pathplotter+0x320>
        path[i]=8;   }
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9e:	88 0f       	add	r24, r24
    2ea0:	99 1f       	adc	r25, r25
    2ea2:	80 55       	subi	r24, 0x50	; 80
    2ea4:	9d 4f       	sbci	r25, 0xFD	; 253
    2ea6:	28 e0       	ldi	r18, 0x08	; 8
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	fc 01       	movw	r30, r24
    2eac:	31 83       	std	Z+1, r19	; 0x01
    2eae:	20 83       	st	Z, r18
    2eb0:	12 c0       	rjmp	.+36     	; 0x2ed6 <pathplotter+0x344>
        else if(dir==1){
    2eb2:	80 91 06 02 	lds	r24, 0x0206
    2eb6:	90 91 07 02 	lds	r25, 0x0207
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	59 f4       	brne	.+22     	; 0x2ed6 <pathplotter+0x344>
        path[i]=4;   }
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	80 55       	subi	r24, 0x50	; 80
    2eca:	9d 4f       	sbci	r25, 0xFD	; 253
    2ecc:	24 e0       	ldi	r18, 0x04	; 4
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	31 83       	std	Z+1, r19	; 0x01
    2ed4:	20 83       	st	Z, r18
        dir=4;
    2ed6:	84 e0       	ldi	r24, 0x04	; 4
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	90 93 07 02 	sts	0x0207, r25
    2ede:	80 93 06 02 	sts	0x0206, r24
        SX=SX+1;
    2ee2:	80 91 02 02 	lds	r24, 0x0202
    2ee6:	90 91 03 02 	lds	r25, 0x0203
    2eea:	01 96       	adiw	r24, 0x01	; 1
    2eec:	90 93 03 02 	sts	0x0203, r25
    2ef0:	80 93 02 02 	sts	0x0202, r24
        SY=SY;
    2ef4:	80 91 04 02 	lds	r24, 0x0204
    2ef8:	90 91 05 02 	lds	r25, 0x0205
    2efc:	90 93 05 02 	sts	0x0205, r25
    2f00:	80 93 04 02 	sts	0x0204, r24
    2f04:	82 c0       	rjmp	.+260    	; 0x300a <pathplotter+0x478>
    }
    else if(maze[SX][SY-1]==src_value){
    2f06:	20 91 02 02 	lds	r18, 0x0202
    2f0a:	30 91 03 02 	lds	r19, 0x0203
    2f0e:	80 91 04 02 	lds	r24, 0x0204
    2f12:	90 91 05 02 	lds	r25, 0x0205
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	22 0f       	add	r18, r18
    2f1a:	33 1f       	adc	r19, r19
    2f1c:	22 0f       	add	r18, r18
    2f1e:	33 1f       	adc	r19, r19
    2f20:	22 0f       	add	r18, r18
    2f22:	33 1f       	adc	r19, r19
    2f24:	82 0f       	add	r24, r18
    2f26:	93 1f       	adc	r25, r19
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	84 5f       	subi	r24, 0xF4	; 244
    2f2e:	9d 4f       	sbci	r25, 0xFD	; 253
    2f30:	fc 01       	movw	r30, r24
    2f32:	20 81       	ld	r18, Z
    2f34:	31 81       	ldd	r19, Z+1	; 0x01
    2f36:	80 91 a6 02 	lds	r24, 0x02A6
    2f3a:	90 91 a7 02 	lds	r25, 0x02A7
    2f3e:	28 17       	cp	r18, r24
    2f40:	39 07       	cpc	r19, r25
    2f42:	09 f0       	breq	.+2      	; 0x2f46 <pathplotter+0x3b4>
    2f44:	62 c0       	rjmp	.+196    	; 0x300a <pathplotter+0x478>
        if(dir==1){
    2f46:	80 91 06 02 	lds	r24, 0x0206
    2f4a:	90 91 07 02 	lds	r25, 0x0207
    2f4e:	81 30       	cpi	r24, 0x01	; 1
    2f50:	91 05       	cpc	r25, r1
    2f52:	61 f4       	brne	.+24     	; 0x2f6c <pathplotter+0x3da>
        path[i]=8;   }
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	88 0f       	add	r24, r24
    2f5a:	99 1f       	adc	r25, r25
    2f5c:	80 55       	subi	r24, 0x50	; 80
    2f5e:	9d 4f       	sbci	r25, 0xFD	; 253
    2f60:	28 e0       	ldi	r18, 0x08	; 8
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	fc 01       	movw	r30, r24
    2f66:	31 83       	std	Z+1, r19	; 0x01
    2f68:	20 83       	st	Z, r18
    2f6a:	38 c0       	rjmp	.+112    	; 0x2fdc <pathplotter+0x44a>
        else if(dir==4){
    2f6c:	80 91 06 02 	lds	r24, 0x0206
    2f70:	90 91 07 02 	lds	r25, 0x0207
    2f74:	84 30       	cpi	r24, 0x04	; 4
    2f76:	91 05       	cpc	r25, r1
    2f78:	61 f4       	brne	.+24     	; 0x2f92 <pathplotter+0x400>
        path[i]=2;   }
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	80 55       	subi	r24, 0x50	; 80
    2f84:	9d 4f       	sbci	r25, 0xFD	; 253
    2f86:	22 e0       	ldi	r18, 0x02	; 2
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	31 83       	std	Z+1, r19	; 0x01
    2f8e:	20 83       	st	Z, r18
    2f90:	25 c0       	rjmp	.+74     	; 0x2fdc <pathplotter+0x44a>
        else if(dir==8){
    2f92:	80 91 06 02 	lds	r24, 0x0206
    2f96:	90 91 07 02 	lds	r25, 0x0207
    2f9a:	88 30       	cpi	r24, 0x08	; 8
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	61 f4       	brne	.+24     	; 0x2fb8 <pathplotter+0x426>
        path[i]=1;   }
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	80 55       	subi	r24, 0x50	; 80
    2faa:	9d 4f       	sbci	r25, 0xFD	; 253
    2fac:	21 e0       	ldi	r18, 0x01	; 1
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	31 83       	std	Z+1, r19	; 0x01
    2fb4:	20 83       	st	Z, r18
    2fb6:	12 c0       	rjmp	.+36     	; 0x2fdc <pathplotter+0x44a>
        else if(dir==2){
    2fb8:	80 91 06 02 	lds	r24, 0x0206
    2fbc:	90 91 07 02 	lds	r25, 0x0207
    2fc0:	82 30       	cpi	r24, 0x02	; 2
    2fc2:	91 05       	cpc	r25, r1
    2fc4:	59 f4       	brne	.+22     	; 0x2fdc <pathplotter+0x44a>
        path[i]=4;   }
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	80 55       	subi	r24, 0x50	; 80
    2fd0:	9d 4f       	sbci	r25, 0xFD	; 253
    2fd2:	24 e0       	ldi	r18, 0x04	; 4
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	31 83       	std	Z+1, r19	; 0x01
    2fda:	20 83       	st	Z, r18
        dir=8;
    2fdc:	88 e0       	ldi	r24, 0x08	; 8
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	90 93 07 02 	sts	0x0207, r25
    2fe4:	80 93 06 02 	sts	0x0206, r24
        SX=SX;
    2fe8:	80 91 02 02 	lds	r24, 0x0202
    2fec:	90 91 03 02 	lds	r25, 0x0203
    2ff0:	90 93 03 02 	sts	0x0203, r25
    2ff4:	80 93 02 02 	sts	0x0202, r24
        SY=SY-1;
    2ff8:	80 91 04 02 	lds	r24, 0x0204
    2ffc:	90 91 05 02 	lds	r25, 0x0205
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	90 93 05 02 	sts	0x0205, r25
    3006:	80 93 04 02 	sts	0x0204, r24
    }
    i++;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	9a 81       	ldd	r25, Y+2	; 0x02
    300e:	01 96       	adiw	r24, 0x01	; 1
    3010:	9a 83       	std	Y+2, r25	; 0x02
    3012:	89 83       	std	Y+1, r24	; 0x01

void pathplotter(){
    src_value=maze[SX][SY];

    int i=0;
    while(src_value!=20){
    3014:	80 91 a6 02 	lds	r24, 0x02A6
    3018:	90 91 a7 02 	lds	r25, 0x02A7
    301c:	84 31       	cpi	r24, 0x14	; 20
    301e:	91 05       	cpc	r25, r1
    3020:	09 f0       	breq	.+2      	; 0x3024 <pathplotter+0x492>
    3022:	db cd       	rjmp	.-1098   	; 0x2bda <pathplotter+0x48>
        SY=SY-1;
    }
    i++;
    }

    int j=0;
    3024:	1c 82       	std	Y+4, r1	; 0x04
    3026:	1b 82       	std	Y+3, r1	; 0x03
    for(j=0;j<i;j++){
    3028:	1c 82       	std	Y+4, r1	; 0x04
    302a:	1b 82       	std	Y+3, r1	; 0x03
    302c:	6e c0       	rjmp	.+220    	; 0x310a <pathplotter+0x578>
            if(path[j]==1) {
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	80 55       	subi	r24, 0x50	; 80
    3038:	9d 4f       	sbci	r25, 0xFD	; 253
    303a:	fc 01       	movw	r30, r24
    303c:	80 81       	ld	r24, Z
    303e:	91 81       	ldd	r25, Z+1	; 0x01
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	91 05       	cpc	r25, r1
    3044:	69 f4       	brne	.+26     	; 0x3060 <pathplotter+0x4ce>
				lcd_cursor(1,1);
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	61 e0       	ldi	r22, 0x01	; 1
    304a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cursor>
				lcd_string("1");
    304e:	8c e8       	ldi	r24, 0x8C	; 140
    3050:	92 e0       	ldi	r25, 0x02	; 2
    3052:	0e 94 c1 0b 	call	0x1782	; 0x1782 <lcd_string>
			stop();
    3056:	0e 94 ef 10 	call	0x21de	; 0x21de <stop>
			run();
    305a:	0e 94 10 11 	call	0x2220	; 0x2220 <run>
    305e:	50 c0       	rjmp	.+160    	; 0x3100 <pathplotter+0x56e>
			
            }
            else if(path[j]==2){
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	9c 81       	ldd	r25, Y+4	; 0x04
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	80 55       	subi	r24, 0x50	; 80
    306a:	9d 4f       	sbci	r25, 0xFD	; 253
    306c:	fc 01       	movw	r30, r24
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	82 30       	cpi	r24, 0x02	; 2
    3074:	91 05       	cpc	r25, r1
    3076:	69 f4       	brne	.+26     	; 0x3092 <pathplotter+0x500>
				lcd_cursor(1,1);
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	61 e0       	ldi	r22, 0x01	; 1
    307c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cursor>
				lcd_string("2");
    3080:	8e e8       	ldi	r24, 0x8E	; 142
    3082:	92 e0       	ldi	r25, 0x02	; 2
    3084:	0e 94 c1 0b 	call	0x1782	; 0x1782 <lcd_string>
		    precision_right();
    3088:	0e 94 de 10 	call	0x21bc	; 0x21bc <precision_right>
			run();
    308c:	0e 94 10 11 	call	0x2220	; 0x2220 <run>
    3090:	37 c0       	rjmp	.+110    	; 0x3100 <pathplotter+0x56e>
			
			}
            else if(path[j]==8){
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	80 55       	subi	r24, 0x50	; 80
    309c:	9d 4f       	sbci	r25, 0xFD	; 253
    309e:	fc 01       	movw	r30, r24
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	88 30       	cpi	r24, 0x08	; 8
    30a6:	91 05       	cpc	r25, r1
    30a8:	69 f4       	brne	.+26     	; 0x30c4 <pathplotter+0x532>
				lcd_cursor(1,1);
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cursor>
				lcd_string("8");
    30b2:	80 e9       	ldi	r24, 0x90	; 144
    30b4:	92 e0       	ldi	r25, 0x02	; 2
    30b6:	0e 94 c1 0b 	call	0x1782	; 0x1782 <lcd_string>
		    precision_left ();
    30ba:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <precision_left>
			run();
    30be:	0e 94 10 11 	call	0x2220	; 0x2220 <run>
    30c2:	1e c0       	rjmp	.+60     	; 0x3100 <pathplotter+0x56e>
			
			}
            else if(path[j]==4)
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	9c 81       	ldd	r25, Y+4	; 0x04
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	80 55       	subi	r24, 0x50	; 80
    30ce:	9d 4f       	sbci	r25, 0xFD	; 253
    30d0:	fc 01       	movw	r30, r24
    30d2:	80 81       	ld	r24, Z
    30d4:	91 81       	ldd	r25, Z+1	; 0x01
    30d6:	84 30       	cpi	r24, 0x04	; 4
    30d8:	91 05       	cpc	r25, r1
    30da:	91 f4       	brne	.+36     	; 0x3100 <pathplotter+0x56e>
            {
				lcd_cursor(1,1);
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	61 e0       	ldi	r22, 0x01	; 1
    30e0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cursor>
				lcd_string("4");
    30e4:	82 e9       	ldi	r24, 0x92	; 146
    30e6:	92 e0       	ldi	r25, 0x02	; 2
    30e8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <lcd_string>
				stop();
    30ec:	0e 94 ef 10 	call	0x21de	; 0x21de <stop>
            left_degrees(175);
    30f0:	8f ea       	ldi	r24, 0xAF	; 175
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 3f 10 	call	0x207e	; 0x207e <left_degrees>
            adjust_left();
    30f8:	0e 94 52 10 	call	0x20a4	; 0x20a4 <adjust_left>
			run();
    30fc:	0e 94 10 11 	call	0x2220	; 0x2220 <run>
    }
    i++;
    }

    int j=0;
    for(j=0;j<i;j++){
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	9c 81       	ldd	r25, Y+4	; 0x04
    3104:	01 96       	adiw	r24, 0x01	; 1
    3106:	9c 83       	std	Y+4, r25	; 0x04
    3108:	8b 83       	std	Y+3, r24	; 0x03
    310a:	2b 81       	ldd	r18, Y+3	; 0x03
    310c:	3c 81       	ldd	r19, Y+4	; 0x04
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	9a 81       	ldd	r25, Y+2	; 0x02
    3112:	28 17       	cp	r18, r24
    3114:	39 07       	cpc	r19, r25
    3116:	0c f4       	brge	.+2      	; 0x311a <pathplotter+0x588>
    3118:	8a cf       	rjmp	.-236    	; 0x302e <pathplotter+0x49c>
            adjust_left();
			run();
            }
    }

}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	08 95       	ret

00003128 <ReachDestinationAvoidingNode>:
#include "buzzer.h"
#include "solver.c"


void ReachDestinationAvoidingNode(unsigned char Xd,unsigned char Yd,unsigned char Xn,unsigned char Yn)
{   
    3128:	0f 93       	push	r16
    312a:	1f 93       	push	r17
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	00 d0       	rcall	.+0      	; 0x3132 <ReachDestinationAvoidingNode+0xa>
    3132:	0f 92       	push	r0
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	6a 83       	std	Y+2, r22	; 0x02
    313c:	4b 83       	std	Y+3, r20	; 0x03
    313e:	2c 83       	std	Y+4, r18	; 0x04
	
	
	refresh();
    3140:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <refresh>
	setDestination(Xd,chartoint(Yd));
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	08 2f       	mov	r16, r24
    3148:	10 e0       	ldi	r17, 0x00	; 0
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	0e 94 1d 14 	call	0x283a	; 0x283a <chartoint>
    3150:	9c 01       	movw	r18, r24
    3152:	c8 01       	movw	r24, r16
    3154:	b9 01       	movw	r22, r18
    3156:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <setDestination>
	placeobstacles(Xn,chartoint(Yn));
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	08 2f       	mov	r16, r24
    315e:	10 e0       	ldi	r17, 0x00	; 0
    3160:	8c 81       	ldd	r24, Y+4	; 0x04
    3162:	0e 94 1d 14 	call	0x283a	; 0x283a <chartoint>
    3166:	9c 01       	movw	r18, r24
    3168:	c8 01       	movw	r24, r16
    316a:	b9 01       	movw	r22, r18
    316c:	0e 94 b2 14 	call	0x2964	; 0x2964 <placeobstacles>
	detectnodes(count-1);
    3170:	80 91 08 02 	lds	r24, 0x0208
    3174:	90 91 09 02 	lds	r25, 0x0209
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	0e 94 9c 13 	call	0x2738	; 0x2738 <detectnodes>
	pathplotter();
    317e:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <pathplotter>
    setSource(DX,DY);
    3182:	80 91 ac 02 	lds	r24, 0x02AC
    3186:	90 91 ad 02 	lds	r25, 0x02AD
    318a:	20 91 ae 02 	lds	r18, 0x02AE
    318e:	30 91 af 02 	lds	r19, 0x02AF
    3192:	b9 01       	movw	r22, r18
    3194:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <setSource>
}
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	1f 91       	pop	r17
    31a6:	0f 91       	pop	r16
    31a8:	08 95       	ret

000031aa <main>:


//Do not make changes in main function

int main(void)
{
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	e8 97       	sbiw	r28, 0x38	; 56
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
       ReachDestinationAvoidingNode(5,'D',6,'D');
    31c2:	85 e0       	ldi	r24, 0x05	; 5
    31c4:	64 e4       	ldi	r22, 0x44	; 68
    31c6:	46 e0       	ldi	r20, 0x06	; 6
    31c8:	24 e4       	ldi	r18, 0x44	; 68
    31ca:	0e 94 94 18 	call	0x3128	; 0x3128 <ReachDestinationAvoidingNode>
	   buzzer_on();
    31ce:	0e 94 ae 00 	call	0x15c	; 0x15c <buzzer_on>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	aa ef       	ldi	r26, 0xFA	; 250
    31d8:	b3 e4       	ldi	r27, 0x43	; 67
    31da:	89 83       	std	Y+1, r24	; 0x01
    31dc:	9a 83       	std	Y+2, r25	; 0x02
    31de:	ab 83       	std	Y+3, r26	; 0x03
    31e0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    31e2:	69 81       	ldd	r22, Y+1	; 0x01
    31e4:	7a 81       	ldd	r23, Y+2	; 0x02
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ea:	26 e6       	ldi	r18, 0x66	; 102
    31ec:	36 e6       	ldi	r19, 0x66	; 102
    31ee:	46 e6       	ldi	r20, 0x66	; 102
    31f0:	55 e4       	ldi	r21, 0x45	; 69
    31f2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8d 83       	std	Y+5, r24	; 0x05
    31fc:	9e 83       	std	Y+6, r25	; 0x06
    31fe:	af 83       	std	Y+7, r26	; 0x07
    3200:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3202:	11 e0       	ldi	r17, 0x01	; 1
    3204:	6d 81       	ldd	r22, Y+5	; 0x05
    3206:	7e 81       	ldd	r23, Y+6	; 0x06
    3208:	8f 81       	ldd	r24, Y+7	; 0x07
    320a:	98 85       	ldd	r25, Y+8	; 0x08
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e8       	ldi	r20, 0x80	; 128
    3212:	5f e3       	ldi	r21, 0x3F	; 63
    3214:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    3218:	88 23       	and	r24, r24
    321a:	0c f0       	brlt	.+2      	; 0x321e <main+0x74>
    321c:	10 e0       	ldi	r17, 0x00	; 0
    321e:	11 23       	and	r17, r17
    3220:	29 f0       	breq	.+10     	; 0x322c <main+0x82>
		__ticks = 1;
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	9a 87       	std	Y+10, r25	; 0x0a
    3228:	89 87       	std	Y+9, r24	; 0x09
    322a:	46 c0       	rjmp	.+140    	; 0x32b8 <main+0x10e>
	else if (__tmp > 65535)
    322c:	11 e0       	ldi	r17, 0x01	; 1
    322e:	6d 81       	ldd	r22, Y+5	; 0x05
    3230:	7e 81       	ldd	r23, Y+6	; 0x06
    3232:	8f 81       	ldd	r24, Y+7	; 0x07
    3234:	98 85       	ldd	r25, Y+8	; 0x08
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    3242:	18 16       	cp	r1, r24
    3244:	0c f0       	brlt	.+2      	; 0x3248 <main+0x9e>
    3246:	10 e0       	ldi	r17, 0x00	; 0
    3248:	11 23       	and	r17, r17
    324a:	61 f1       	breq	.+88     	; 0x32a4 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324c:	69 81       	ldd	r22, Y+1	; 0x01
    324e:	7a 81       	ldd	r23, Y+2	; 0x02
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	9c 81       	ldd	r25, Y+4	; 0x04
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e2       	ldi	r20, 0x20	; 32
    325a:	51 e4       	ldi	r21, 0x41	; 65
    325c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	bc 01       	movw	r22, r24
    3266:	cd 01       	movw	r24, r26
    3268:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9a 87       	std	Y+10, r25	; 0x0a
    3272:	89 87       	std	Y+9, r24	; 0x09
    3274:	12 c0       	rjmp	.+36     	; 0x329a <main+0xf0>
    3276:	80 e7       	ldi	r24, 0x70	; 112
    3278:	91 e0       	ldi	r25, 0x01	; 1
    327a:	9c 87       	std	Y+12, r25	; 0x0c
    327c:	8b 87       	std	Y+11, r24	; 0x0b
    327e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3280:	9c 85       	ldd	r25, Y+12	; 0x0c
    3282:	8c 01       	movw	r16, r24
    3284:	c8 01       	movw	r24, r16
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <main+0xdc>
    328a:	8c 01       	movw	r16, r24
    328c:	1c 87       	std	Y+12, r17	; 0x0c
    328e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3290:	89 85       	ldd	r24, Y+9	; 0x09
    3292:	9a 85       	ldd	r25, Y+10	; 0x0a
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	9a 87       	std	Y+10, r25	; 0x0a
    3298:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329a:	89 85       	ldd	r24, Y+9	; 0x09
    329c:	9a 85       	ldd	r25, Y+10	; 0x0a
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	51 f7       	brne	.-44     	; 0x3276 <main+0xcc>
    32a2:	17 c0       	rjmp	.+46     	; 0x32d2 <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a4:	6d 81       	ldd	r22, Y+5	; 0x05
    32a6:	7e 81       	ldd	r23, Y+6	; 0x06
    32a8:	8f 81       	ldd	r24, Y+7	; 0x07
    32aa:	98 85       	ldd	r25, Y+8	; 0x08
    32ac:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9a 87       	std	Y+10, r25	; 0x0a
    32b6:	89 87       	std	Y+9, r24	; 0x09
    32b8:	89 85       	ldd	r24, Y+9	; 0x09
    32ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    32bc:	9e 87       	std	Y+14, r25	; 0x0e
    32be:	8d 87       	std	Y+13, r24	; 0x0d
    32c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c4:	8c 01       	movw	r16, r24
    32c6:	c8 01       	movw	r24, r16
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <main+0x11e>
    32cc:	8c 01       	movw	r16, r24
    32ce:	1e 87       	std	Y+14, r17	; 0x0e
    32d0:	0d 87       	std	Y+13, r16	; 0x0d
	   _delay_ms(500);
	   buzzer_off();
    32d2:	0e 94 c5 00 	call	0x18a	; 0x18a <buzzer_off>
	   ReachDestinationAvoidingNode(2,'F',2,'D');
    32d6:	82 e0       	ldi	r24, 0x02	; 2
    32d8:	66 e4       	ldi	r22, 0x46	; 70
    32da:	42 e0       	ldi	r20, 0x02	; 2
    32dc:	24 e4       	ldi	r18, 0x44	; 68
    32de:	0e 94 94 18 	call	0x3128	; 0x3128 <ReachDestinationAvoidingNode>
	   buzzer_on();
    32e2:	0e 94 ae 00 	call	0x15c	; 0x15c <buzzer_on>
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	aa ef       	ldi	r26, 0xFA	; 250
    32ec:	b3 e4       	ldi	r27, 0x43	; 67
    32ee:	8f 87       	std	Y+15, r24	; 0x0f
    32f0:	98 8b       	std	Y+16, r25	; 0x10
    32f2:	a9 8b       	std	Y+17, r26	; 0x11
    32f4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    32f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    32f8:	78 89       	ldd	r23, Y+16	; 0x10
    32fa:	89 89       	ldd	r24, Y+17	; 0x11
    32fc:	9a 89       	ldd	r25, Y+18	; 0x12
    32fe:	26 e6       	ldi	r18, 0x66	; 102
    3300:	36 e6       	ldi	r19, 0x66	; 102
    3302:	46 e6       	ldi	r20, 0x66	; 102
    3304:	55 e4       	ldi	r21, 0x45	; 69
    3306:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	8b 8b       	std	Y+19, r24	; 0x13
    3310:	9c 8b       	std	Y+20, r25	; 0x14
    3312:	ad 8b       	std	Y+21, r26	; 0x15
    3314:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3316:	11 e0       	ldi	r17, 0x01	; 1
    3318:	6b 89       	ldd	r22, Y+19	; 0x13
    331a:	7c 89       	ldd	r23, Y+20	; 0x14
    331c:	8d 89       	ldd	r24, Y+21	; 0x15
    331e:	9e 89       	ldd	r25, Y+22	; 0x16
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e8       	ldi	r20, 0x80	; 128
    3326:	5f e3       	ldi	r21, 0x3F	; 63
    3328:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    332c:	88 23       	and	r24, r24
    332e:	0c f0       	brlt	.+2      	; 0x3332 <main+0x188>
    3330:	10 e0       	ldi	r17, 0x00	; 0
    3332:	11 23       	and	r17, r17
    3334:	29 f0       	breq	.+10     	; 0x3340 <main+0x196>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	98 8f       	std	Y+24, r25	; 0x18
    333c:	8f 8b       	std	Y+23, r24	; 0x17
    333e:	46 c0       	rjmp	.+140    	; 0x33cc <main+0x222>
	else if (__tmp > 65535)
    3340:	11 e0       	ldi	r17, 0x01	; 1
    3342:	6b 89       	ldd	r22, Y+19	; 0x13
    3344:	7c 89       	ldd	r23, Y+20	; 0x14
    3346:	8d 89       	ldd	r24, Y+21	; 0x15
    3348:	9e 89       	ldd	r25, Y+22	; 0x16
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    3356:	18 16       	cp	r1, r24
    3358:	0c f0       	brlt	.+2      	; 0x335c <main+0x1b2>
    335a:	10 e0       	ldi	r17, 0x00	; 0
    335c:	11 23       	and	r17, r17
    335e:	61 f1       	breq	.+88     	; 0x33b8 <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3360:	6f 85       	ldd	r22, Y+15	; 0x0f
    3362:	78 89       	ldd	r23, Y+16	; 0x10
    3364:	89 89       	ldd	r24, Y+17	; 0x11
    3366:	9a 89       	ldd	r25, Y+18	; 0x12
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e2       	ldi	r20, 0x20	; 32
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	bc 01       	movw	r22, r24
    337a:	cd 01       	movw	r24, r26
    337c:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	98 8f       	std	Y+24, r25	; 0x18
    3386:	8f 8b       	std	Y+23, r24	; 0x17
    3388:	12 c0       	rjmp	.+36     	; 0x33ae <main+0x204>
    338a:	80 e7       	ldi	r24, 0x70	; 112
    338c:	91 e0       	ldi	r25, 0x01	; 1
    338e:	9a 8f       	std	Y+26, r25	; 0x1a
    3390:	89 8f       	std	Y+25, r24	; 0x19
    3392:	89 8d       	ldd	r24, Y+25	; 0x19
    3394:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3396:	8c 01       	movw	r16, r24
    3398:	c8 01       	movw	r24, r16
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <main+0x1f0>
    339e:	8c 01       	movw	r16, r24
    33a0:	1a 8f       	std	Y+26, r17	; 0x1a
    33a2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a4:	8f 89       	ldd	r24, Y+23	; 0x17
    33a6:	98 8d       	ldd	r25, Y+24	; 0x18
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	98 8f       	std	Y+24, r25	; 0x18
    33ac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ae:	8f 89       	ldd	r24, Y+23	; 0x17
    33b0:	98 8d       	ldd	r25, Y+24	; 0x18
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	51 f7       	brne	.-44     	; 0x338a <main+0x1e0>
    33b6:	17 c0       	rjmp	.+46     	; 0x33e6 <main+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b8:	6b 89       	ldd	r22, Y+19	; 0x13
    33ba:	7c 89       	ldd	r23, Y+20	; 0x14
    33bc:	8d 89       	ldd	r24, Y+21	; 0x15
    33be:	9e 89       	ldd	r25, Y+22	; 0x16
    33c0:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	98 8f       	std	Y+24, r25	; 0x18
    33ca:	8f 8b       	std	Y+23, r24	; 0x17
    33cc:	8f 89       	ldd	r24, Y+23	; 0x17
    33ce:	98 8d       	ldd	r25, Y+24	; 0x18
    33d0:	9c 8f       	std	Y+28, r25	; 0x1c
    33d2:	8b 8f       	std	Y+27, r24	; 0x1b
    33d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d8:	8c 01       	movw	r16, r24
    33da:	c8 01       	movw	r24, r16
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <main+0x232>
    33e0:	8c 01       	movw	r16, r24
    33e2:	1c 8f       	std	Y+28, r17	; 0x1c
    33e4:	0b 8f       	std	Y+27, r16	; 0x1b
	   _delay_ms(500);
	   buzzer_off();
    33e6:	0e 94 c5 00 	call	0x18a	; 0x18a <buzzer_off>
	   ReachDestinationAvoidingNode(2,'A',2,'C');
    33ea:	82 e0       	ldi	r24, 0x02	; 2
    33ec:	61 e4       	ldi	r22, 0x41	; 65
    33ee:	42 e0       	ldi	r20, 0x02	; 2
    33f0:	23 e4       	ldi	r18, 0x43	; 67
    33f2:	0e 94 94 18 	call	0x3128	; 0x3128 <ReachDestinationAvoidingNode>
	   buzzer_on();
    33f6:	0e 94 ae 00 	call	0x15c	; 0x15c <buzzer_on>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	aa ef       	ldi	r26, 0xFA	; 250
    3400:	b3 e4       	ldi	r27, 0x43	; 67
    3402:	8d 8f       	std	Y+29, r24	; 0x1d
    3404:	9e 8f       	std	Y+30, r25	; 0x1e
    3406:	af 8f       	std	Y+31, r26	; 0x1f
    3408:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    340a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    340c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    340e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3410:	98 a1       	lds	r25, 0x48
    3412:	26 e6       	ldi	r18, 0x66	; 102
    3414:	36 e6       	ldi	r19, 0x66	; 102
    3416:	46 e6       	ldi	r20, 0x66	; 102
    3418:	55 e4       	ldi	r21, 0x45	; 69
    341a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	89 a3       	lds	r24, 0x59
    3424:	9a a3       	lds	r25, 0x5a
    3426:	ab a3       	lds	r26, 0x5b
    3428:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    342a:	11 e0       	ldi	r17, 0x01	; 1
    342c:	69 a1       	lds	r22, 0x49
    342e:	7a a1       	lds	r23, 0x4a
    3430:	8b a1       	lds	r24, 0x4b
    3432:	9c a1       	lds	r25, 0x4c
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e8       	ldi	r20, 0x80	; 128
    343a:	5f e3       	ldi	r21, 0x3F	; 63
    343c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    3440:	88 23       	and	r24, r24
    3442:	0c f0       	brlt	.+2      	; 0x3446 <main+0x29c>
    3444:	10 e0       	ldi	r17, 0x00	; 0
    3446:	11 23       	and	r17, r17
    3448:	29 f0       	breq	.+10     	; 0x3454 <main+0x2aa>
		__ticks = 1;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	9e a3       	lds	r25, 0x5e
    3450:	8d a3       	lds	r24, 0x5d
    3452:	46 c0       	rjmp	.+140    	; 0x34e0 <main+0x336>
	else if (__tmp > 65535)
    3454:	11 e0       	ldi	r17, 0x01	; 1
    3456:	69 a1       	lds	r22, 0x49
    3458:	7a a1       	lds	r23, 0x4a
    345a:	8b a1       	lds	r24, 0x4b
    345c:	9c a1       	lds	r25, 0x4c
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	3f ef       	ldi	r19, 0xFF	; 255
    3462:	4f e7       	ldi	r20, 0x7F	; 127
    3464:	57 e4       	ldi	r21, 0x47	; 71
    3466:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    346a:	18 16       	cp	r1, r24
    346c:	0c f0       	brlt	.+2      	; 0x3470 <main+0x2c6>
    346e:	10 e0       	ldi	r17, 0x00	; 0
    3470:	11 23       	and	r17, r17
    3472:	61 f1       	breq	.+88     	; 0x34cc <main+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3474:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3476:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3478:	8f 8d       	ldd	r24, Y+31	; 0x1f
    347a:	98 a1       	lds	r25, 0x48
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	9e a3       	lds	r25, 0x5e
    349a:	8d a3       	lds	r24, 0x5d
    349c:	12 c0       	rjmp	.+36     	; 0x34c2 <main+0x318>
    349e:	80 e7       	ldi	r24, 0x70	; 112
    34a0:	91 e0       	ldi	r25, 0x01	; 1
    34a2:	98 a7       	lds	r25, 0x78
    34a4:	8f a3       	lds	r24, 0x5f
    34a6:	8f a1       	lds	r24, 0x4f
    34a8:	98 a5       	lds	r25, 0x68
    34aa:	8c 01       	movw	r16, r24
    34ac:	c8 01       	movw	r24, r16
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <main+0x304>
    34b2:	8c 01       	movw	r16, r24
    34b4:	18 a7       	lds	r17, 0x78
    34b6:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b8:	8d a1       	lds	r24, 0x4d
    34ba:	9e a1       	lds	r25, 0x4e
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	9e a3       	lds	r25, 0x5e
    34c0:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c2:	8d a1       	lds	r24, 0x4d
    34c4:	9e a1       	lds	r25, 0x4e
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	51 f7       	brne	.-44     	; 0x349e <main+0x2f4>
    34ca:	17 c0       	rjmp	.+46     	; 0x34fa <main+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34cc:	69 a1       	lds	r22, 0x49
    34ce:	7a a1       	lds	r23, 0x4a
    34d0:	8b a1       	lds	r24, 0x4b
    34d2:	9c a1       	lds	r25, 0x4c
    34d4:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9e a3       	lds	r25, 0x5e
    34de:	8d a3       	lds	r24, 0x5d
    34e0:	8d a1       	lds	r24, 0x4d
    34e2:	9e a1       	lds	r25, 0x4e
    34e4:	9a a7       	lds	r25, 0x7a
    34e6:	89 a7       	lds	r24, 0x79
    34e8:	89 a5       	lds	r24, 0x69
    34ea:	9a a5       	lds	r25, 0x6a
    34ec:	8c 01       	movw	r16, r24
    34ee:	c8 01       	movw	r24, r16
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <main+0x346>
    34f4:	8c 01       	movw	r16, r24
    34f6:	1a a7       	lds	r17, 0x7a
    34f8:	09 a7       	lds	r16, 0x79
	   _delay_ms(500);
	   buzzer_off();
    34fa:	0e 94 c5 00 	call	0x18a	; 0x18a <buzzer_off>
	   ReachDestinationAvoidingNode(5,'B',2,'D');
    34fe:	85 e0       	ldi	r24, 0x05	; 5
    3500:	62 e4       	ldi	r22, 0x42	; 66
    3502:	42 e0       	ldi	r20, 0x02	; 2
    3504:	24 e4       	ldi	r18, 0x44	; 68
    3506:	0e 94 94 18 	call	0x3128	; 0x3128 <ReachDestinationAvoidingNode>
	   buzzer_on();
    350a:	0e 94 ae 00 	call	0x15c	; 0x15c <buzzer_on>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	aa ef       	ldi	r26, 0xFA	; 250
    3514:	b3 e4       	ldi	r27, 0x43	; 67
    3516:	8b a7       	lds	r24, 0x7b
    3518:	9c a7       	lds	r25, 0x7c
    351a:	ad a7       	lds	r26, 0x7d
    351c:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    351e:	6b a5       	lds	r22, 0x6b
    3520:	7c a5       	lds	r23, 0x6c
    3522:	8d a5       	lds	r24, 0x6d
    3524:	9e a5       	lds	r25, 0x6e
    3526:	26 e6       	ldi	r18, 0x66	; 102
    3528:	36 e6       	ldi	r19, 0x66	; 102
    352a:	46 e6       	ldi	r20, 0x66	; 102
    352c:	55 e4       	ldi	r21, 0x45	; 69
    352e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	8f a7       	lds	r24, 0x7f
    3538:	98 ab       	sts	0x58, r25
    353a:	a9 ab       	sts	0x59, r26
    353c:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    353e:	11 e0       	ldi	r17, 0x01	; 1
    3540:	6f a5       	lds	r22, 0x6f
    3542:	78 a9       	sts	0x48, r23
    3544:	89 a9       	sts	0x49, r24
    3546:	9a a9       	sts	0x4a, r25
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e8       	ldi	r20, 0x80	; 128
    354e:	5f e3       	ldi	r21, 0x3F	; 63
    3550:	0e 94 1e 1b 	call	0x363c	; 0x363c <__cmpsf2>
    3554:	88 23       	and	r24, r24
    3556:	0c f0       	brlt	.+2      	; 0x355a <main+0x3b0>
    3558:	10 e0       	ldi	r17, 0x00	; 0
    355a:	11 23       	and	r17, r17
    355c:	29 f0       	breq	.+10     	; 0x3568 <main+0x3be>
		__ticks = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9c ab       	sts	0x5c, r25
    3564:	8b ab       	sts	0x5b, r24
    3566:	46 c0       	rjmp	.+140    	; 0x35f4 <main+0x44a>
	else if (__tmp > 65535)
    3568:	11 e0       	ldi	r17, 0x01	; 1
    356a:	6f a5       	lds	r22, 0x6f
    356c:	78 a9       	sts	0x48, r23
    356e:	89 a9       	sts	0x49, r24
    3570:	9a a9       	sts	0x4a, r25
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__gesf2>
    357e:	18 16       	cp	r1, r24
    3580:	0c f0       	brlt	.+2      	; 0x3584 <main+0x3da>
    3582:	10 e0       	ldi	r17, 0x00	; 0
    3584:	11 23       	and	r17, r17
    3586:	61 f1       	breq	.+88     	; 0x35e0 <main+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3588:	6b a5       	lds	r22, 0x6b
    358a:	7c a5       	lds	r23, 0x6c
    358c:	8d a5       	lds	r24, 0x6d
    358e:	9e a5       	lds	r25, 0x6e
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e2       	ldi	r20, 0x20	; 32
    3596:	51 e4       	ldi	r21, 0x41	; 65
    3598:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsf3>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	bc 01       	movw	r22, r24
    35a2:	cd 01       	movw	r24, r26
    35a4:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	9c ab       	sts	0x5c, r25
    35ae:	8b ab       	sts	0x5b, r24
    35b0:	12 c0       	rjmp	.+36     	; 0x35d6 <main+0x42c>
    35b2:	80 e7       	ldi	r24, 0x70	; 112
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	9e ab       	sts	0x5e, r25
    35b8:	8d ab       	sts	0x5d, r24
    35ba:	8d a9       	sts	0x4d, r24
    35bc:	9e a9       	sts	0x4e, r25
    35be:	8c 01       	movw	r16, r24
    35c0:	c8 01       	movw	r24, r16
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	f1 f7       	brne	.-4      	; 0x35c2 <main+0x418>
    35c6:	8c 01       	movw	r16, r24
    35c8:	1e ab       	sts	0x5e, r17
    35ca:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35cc:	8b a9       	sts	0x4b, r24
    35ce:	9c a9       	sts	0x4c, r25
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	9c ab       	sts	0x5c, r25
    35d4:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d6:	8b a9       	sts	0x4b, r24
    35d8:	9c a9       	sts	0x4c, r25
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	51 f7       	brne	.-44     	; 0x35b2 <main+0x408>
    35de:	17 c0       	rjmp	.+46     	; 0x360e <main+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e0:	6f a5       	lds	r22, 0x6f
    35e2:	78 a9       	sts	0x48, r23
    35e4:	89 a9       	sts	0x49, r24
    35e6:	9a a9       	sts	0x4a, r25
    35e8:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9c ab       	sts	0x5c, r25
    35f2:	8b ab       	sts	0x5b, r24
    35f4:	8b a9       	sts	0x4b, r24
    35f6:	9c a9       	sts	0x4c, r25
    35f8:	98 af       	sts	0x78, r25
    35fa:	8f ab       	sts	0x5f, r24
    35fc:	8f a9       	sts	0x4f, r24
    35fe:	98 ad       	sts	0x68, r25
    3600:	8c 01       	movw	r16, r24
    3602:	c8 01       	movw	r24, r16
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	f1 f7       	brne	.-4      	; 0x3604 <main+0x45a>
    3608:	8c 01       	movw	r16, r24
    360a:	18 af       	sts	0x78, r17
    360c:	0f ab       	sts	0x5f, r16
	   _delay_ms(500);
	   buzzer_off();
    360e:	0e 94 c5 00 	call	0x18a	; 0x18a <buzzer_off>
	   ReachDestinationAvoidingNode(4,'B',4,'A');
    3612:	84 e0       	ldi	r24, 0x04	; 4
    3614:	62 e4       	ldi	r22, 0x42	; 66
    3616:	44 e0       	ldi	r20, 0x04	; 4
    3618:	21 e4       	ldi	r18, 0x41	; 65
    361a:	0e 94 94 18 	call	0x3128	; 0x3128 <ReachDestinationAvoidingNode>
	   buzzer_on();
    361e:	0e 94 ae 00 	call	0x15c	; 0x15c <buzzer_on>
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	90 e0       	ldi	r25, 0x00	; 0
	   _delay_ms(500);
	   buzzer_off();
	   ReachDestinationAvoidingNode(6,'G',2,'D');
	   buzzer_on();
	   */
    3626:	e8 96       	adiw	r28, 0x38	; 56
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	08 95       	ret

0000363c <__cmpsf2>:
    363c:	d4 d0       	rcall	.+424    	; 0x37e6 <__fp_cmp>
    363e:	08 f4       	brcc	.+2      	; 0x3642 <__cmpsf2+0x6>
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	08 95       	ret

00003644 <__divsf3>:
    3644:	0c d0       	rcall	.+24     	; 0x365e <__divsf3x>
    3646:	0a c1       	rjmp	.+532    	; 0x385c <__fp_round>
    3648:	02 d1       	rcall	.+516    	; 0x384e <__fp_pscB>
    364a:	40 f0       	brcs	.+16     	; 0x365c <__divsf3+0x18>
    364c:	f9 d0       	rcall	.+498    	; 0x3840 <__fp_pscA>
    364e:	30 f0       	brcs	.+12     	; 0x365c <__divsf3+0x18>
    3650:	21 f4       	brne	.+8      	; 0x365a <__divsf3+0x16>
    3652:	5f 3f       	cpi	r21, 0xFF	; 255
    3654:	19 f0       	breq	.+6      	; 0x365c <__divsf3+0x18>
    3656:	eb c0       	rjmp	.+470    	; 0x382e <__fp_inf>
    3658:	51 11       	cpse	r21, r1
    365a:	34 c1       	rjmp	.+616    	; 0x38c4 <__fp_szero>
    365c:	ee c0       	rjmp	.+476    	; 0x383a <__fp_nan>

0000365e <__divsf3x>:
    365e:	0f d1       	rcall	.+542    	; 0x387e <__fp_split3>
    3660:	98 f3       	brcs	.-26     	; 0x3648 <__divsf3+0x4>

00003662 <__divsf3_pse>:
    3662:	99 23       	and	r25, r25
    3664:	c9 f3       	breq	.-14     	; 0x3658 <__divsf3+0x14>
    3666:	55 23       	and	r21, r21
    3668:	b1 f3       	breq	.-20     	; 0x3656 <__divsf3+0x12>
    366a:	95 1b       	sub	r25, r21
    366c:	55 0b       	sbc	r21, r21
    366e:	bb 27       	eor	r27, r27
    3670:	aa 27       	eor	r26, r26
    3672:	62 17       	cp	r22, r18
    3674:	73 07       	cpc	r23, r19
    3676:	84 07       	cpc	r24, r20
    3678:	38 f0       	brcs	.+14     	; 0x3688 <__divsf3_pse+0x26>
    367a:	9f 5f       	subi	r25, 0xFF	; 255
    367c:	5f 4f       	sbci	r21, 0xFF	; 255
    367e:	22 0f       	add	r18, r18
    3680:	33 1f       	adc	r19, r19
    3682:	44 1f       	adc	r20, r20
    3684:	aa 1f       	adc	r26, r26
    3686:	a9 f3       	breq	.-22     	; 0x3672 <__divsf3_pse+0x10>
    3688:	33 d0       	rcall	.+102    	; 0x36f0 <__divsf3_pse+0x8e>
    368a:	0e 2e       	mov	r0, r30
    368c:	3a f0       	brmi	.+14     	; 0x369c <__divsf3_pse+0x3a>
    368e:	e0 e8       	ldi	r30, 0x80	; 128
    3690:	30 d0       	rcall	.+96     	; 0x36f2 <__divsf3_pse+0x90>
    3692:	91 50       	subi	r25, 0x01	; 1
    3694:	50 40       	sbci	r21, 0x00	; 0
    3696:	e6 95       	lsr	r30
    3698:	00 1c       	adc	r0, r0
    369a:	ca f7       	brpl	.-14     	; 0x368e <__divsf3_pse+0x2c>
    369c:	29 d0       	rcall	.+82     	; 0x36f0 <__divsf3_pse+0x8e>
    369e:	fe 2f       	mov	r31, r30
    36a0:	27 d0       	rcall	.+78     	; 0x36f0 <__divsf3_pse+0x8e>
    36a2:	66 0f       	add	r22, r22
    36a4:	77 1f       	adc	r23, r23
    36a6:	88 1f       	adc	r24, r24
    36a8:	bb 1f       	adc	r27, r27
    36aa:	26 17       	cp	r18, r22
    36ac:	37 07       	cpc	r19, r23
    36ae:	48 07       	cpc	r20, r24
    36b0:	ab 07       	cpc	r26, r27
    36b2:	b0 e8       	ldi	r27, 0x80	; 128
    36b4:	09 f0       	breq	.+2      	; 0x36b8 <__divsf3_pse+0x56>
    36b6:	bb 0b       	sbc	r27, r27
    36b8:	80 2d       	mov	r24, r0
    36ba:	bf 01       	movw	r22, r30
    36bc:	ff 27       	eor	r31, r31
    36be:	93 58       	subi	r25, 0x83	; 131
    36c0:	5f 4f       	sbci	r21, 0xFF	; 255
    36c2:	2a f0       	brmi	.+10     	; 0x36ce <__divsf3_pse+0x6c>
    36c4:	9e 3f       	cpi	r25, 0xFE	; 254
    36c6:	51 05       	cpc	r21, r1
    36c8:	68 f0       	brcs	.+26     	; 0x36e4 <__divsf3_pse+0x82>
    36ca:	b1 c0       	rjmp	.+354    	; 0x382e <__fp_inf>
    36cc:	fb c0       	rjmp	.+502    	; 0x38c4 <__fp_szero>
    36ce:	5f 3f       	cpi	r21, 0xFF	; 255
    36d0:	ec f3       	brlt	.-6      	; 0x36cc <__divsf3_pse+0x6a>
    36d2:	98 3e       	cpi	r25, 0xE8	; 232
    36d4:	dc f3       	brlt	.-10     	; 0x36cc <__divsf3_pse+0x6a>
    36d6:	86 95       	lsr	r24
    36d8:	77 95       	ror	r23
    36da:	67 95       	ror	r22
    36dc:	b7 95       	ror	r27
    36de:	f7 95       	ror	r31
    36e0:	9f 5f       	subi	r25, 0xFF	; 255
    36e2:	c9 f7       	brne	.-14     	; 0x36d6 <__divsf3_pse+0x74>
    36e4:	88 0f       	add	r24, r24
    36e6:	91 1d       	adc	r25, r1
    36e8:	96 95       	lsr	r25
    36ea:	87 95       	ror	r24
    36ec:	97 f9       	bld	r25, 7
    36ee:	08 95       	ret
    36f0:	e1 e0       	ldi	r30, 0x01	; 1
    36f2:	66 0f       	add	r22, r22
    36f4:	77 1f       	adc	r23, r23
    36f6:	88 1f       	adc	r24, r24
    36f8:	bb 1f       	adc	r27, r27
    36fa:	62 17       	cp	r22, r18
    36fc:	73 07       	cpc	r23, r19
    36fe:	84 07       	cpc	r24, r20
    3700:	ba 07       	cpc	r27, r26
    3702:	20 f0       	brcs	.+8      	; 0x370c <__divsf3_pse+0xaa>
    3704:	62 1b       	sub	r22, r18
    3706:	73 0b       	sbc	r23, r19
    3708:	84 0b       	sbc	r24, r20
    370a:	ba 0b       	sbc	r27, r26
    370c:	ee 1f       	adc	r30, r30
    370e:	88 f7       	brcc	.-30     	; 0x36f2 <__divsf3_pse+0x90>
    3710:	e0 95       	com	r30
    3712:	08 95       	ret

00003714 <__fixunssfsi>:
    3714:	bc d0       	rcall	.+376    	; 0x388e <__fp_splitA>
    3716:	88 f0       	brcs	.+34     	; 0x373a <__fixunssfsi+0x26>
    3718:	9f 57       	subi	r25, 0x7F	; 127
    371a:	90 f0       	brcs	.+36     	; 0x3740 <__fixunssfsi+0x2c>
    371c:	b9 2f       	mov	r27, r25
    371e:	99 27       	eor	r25, r25
    3720:	b7 51       	subi	r27, 0x17	; 23
    3722:	a0 f0       	brcs	.+40     	; 0x374c <__fixunssfsi+0x38>
    3724:	d1 f0       	breq	.+52     	; 0x375a <__fixunssfsi+0x46>
    3726:	66 0f       	add	r22, r22
    3728:	77 1f       	adc	r23, r23
    372a:	88 1f       	adc	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	1a f0       	brmi	.+6      	; 0x3736 <__fixunssfsi+0x22>
    3730:	ba 95       	dec	r27
    3732:	c9 f7       	brne	.-14     	; 0x3726 <__fixunssfsi+0x12>
    3734:	12 c0       	rjmp	.+36     	; 0x375a <__fixunssfsi+0x46>
    3736:	b1 30       	cpi	r27, 0x01	; 1
    3738:	81 f0       	breq	.+32     	; 0x375a <__fixunssfsi+0x46>
    373a:	c3 d0       	rcall	.+390    	; 0x38c2 <__fp_zero>
    373c:	b1 e0       	ldi	r27, 0x01	; 1
    373e:	08 95       	ret
    3740:	c0 c0       	rjmp	.+384    	; 0x38c2 <__fp_zero>
    3742:	67 2f       	mov	r22, r23
    3744:	78 2f       	mov	r23, r24
    3746:	88 27       	eor	r24, r24
    3748:	b8 5f       	subi	r27, 0xF8	; 248
    374a:	39 f0       	breq	.+14     	; 0x375a <__fixunssfsi+0x46>
    374c:	b9 3f       	cpi	r27, 0xF9	; 249
    374e:	cc f3       	brlt	.-14     	; 0x3742 <__fixunssfsi+0x2e>
    3750:	86 95       	lsr	r24
    3752:	77 95       	ror	r23
    3754:	67 95       	ror	r22
    3756:	b3 95       	inc	r27
    3758:	d9 f7       	brne	.-10     	; 0x3750 <__fixunssfsi+0x3c>
    375a:	3e f4       	brtc	.+14     	; 0x376a <__fixunssfsi+0x56>
    375c:	90 95       	com	r25
    375e:	80 95       	com	r24
    3760:	70 95       	com	r23
    3762:	61 95       	neg	r22
    3764:	7f 4f       	sbci	r23, 0xFF	; 255
    3766:	8f 4f       	sbci	r24, 0xFF	; 255
    3768:	9f 4f       	sbci	r25, 0xFF	; 255
    376a:	08 95       	ret

0000376c <__floatunsisf>:
    376c:	e8 94       	clt
    376e:	09 c0       	rjmp	.+18     	; 0x3782 <__floatsisf+0x12>

00003770 <__floatsisf>:
    3770:	97 fb       	bst	r25, 7
    3772:	3e f4       	brtc	.+14     	; 0x3782 <__floatsisf+0x12>
    3774:	90 95       	com	r25
    3776:	80 95       	com	r24
    3778:	70 95       	com	r23
    377a:	61 95       	neg	r22
    377c:	7f 4f       	sbci	r23, 0xFF	; 255
    377e:	8f 4f       	sbci	r24, 0xFF	; 255
    3780:	9f 4f       	sbci	r25, 0xFF	; 255
    3782:	99 23       	and	r25, r25
    3784:	a9 f0       	breq	.+42     	; 0x37b0 <__floatsisf+0x40>
    3786:	f9 2f       	mov	r31, r25
    3788:	96 e9       	ldi	r25, 0x96	; 150
    378a:	bb 27       	eor	r27, r27
    378c:	93 95       	inc	r25
    378e:	f6 95       	lsr	r31
    3790:	87 95       	ror	r24
    3792:	77 95       	ror	r23
    3794:	67 95       	ror	r22
    3796:	b7 95       	ror	r27
    3798:	f1 11       	cpse	r31, r1
    379a:	f8 cf       	rjmp	.-16     	; 0x378c <__floatsisf+0x1c>
    379c:	fa f4       	brpl	.+62     	; 0x37dc <__floatsisf+0x6c>
    379e:	bb 0f       	add	r27, r27
    37a0:	11 f4       	brne	.+4      	; 0x37a6 <__floatsisf+0x36>
    37a2:	60 ff       	sbrs	r22, 0
    37a4:	1b c0       	rjmp	.+54     	; 0x37dc <__floatsisf+0x6c>
    37a6:	6f 5f       	subi	r22, 0xFF	; 255
    37a8:	7f 4f       	sbci	r23, 0xFF	; 255
    37aa:	8f 4f       	sbci	r24, 0xFF	; 255
    37ac:	9f 4f       	sbci	r25, 0xFF	; 255
    37ae:	16 c0       	rjmp	.+44     	; 0x37dc <__floatsisf+0x6c>
    37b0:	88 23       	and	r24, r24
    37b2:	11 f0       	breq	.+4      	; 0x37b8 <__floatsisf+0x48>
    37b4:	96 e9       	ldi	r25, 0x96	; 150
    37b6:	11 c0       	rjmp	.+34     	; 0x37da <__floatsisf+0x6a>
    37b8:	77 23       	and	r23, r23
    37ba:	21 f0       	breq	.+8      	; 0x37c4 <__floatsisf+0x54>
    37bc:	9e e8       	ldi	r25, 0x8E	; 142
    37be:	87 2f       	mov	r24, r23
    37c0:	76 2f       	mov	r23, r22
    37c2:	05 c0       	rjmp	.+10     	; 0x37ce <__floatsisf+0x5e>
    37c4:	66 23       	and	r22, r22
    37c6:	71 f0       	breq	.+28     	; 0x37e4 <__floatsisf+0x74>
    37c8:	96 e8       	ldi	r25, 0x86	; 134
    37ca:	86 2f       	mov	r24, r22
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	2a f0       	brmi	.+10     	; 0x37dc <__floatsisf+0x6c>
    37d2:	9a 95       	dec	r25
    37d4:	66 0f       	add	r22, r22
    37d6:	77 1f       	adc	r23, r23
    37d8:	88 1f       	adc	r24, r24
    37da:	da f7       	brpl	.-10     	; 0x37d2 <__floatsisf+0x62>
    37dc:	88 0f       	add	r24, r24
    37de:	96 95       	lsr	r25
    37e0:	87 95       	ror	r24
    37e2:	97 f9       	bld	r25, 7
    37e4:	08 95       	ret

000037e6 <__fp_cmp>:
    37e6:	99 0f       	add	r25, r25
    37e8:	00 08       	sbc	r0, r0
    37ea:	55 0f       	add	r21, r21
    37ec:	aa 0b       	sbc	r26, r26
    37ee:	e0 e8       	ldi	r30, 0x80	; 128
    37f0:	fe ef       	ldi	r31, 0xFE	; 254
    37f2:	16 16       	cp	r1, r22
    37f4:	17 06       	cpc	r1, r23
    37f6:	e8 07       	cpc	r30, r24
    37f8:	f9 07       	cpc	r31, r25
    37fa:	c0 f0       	brcs	.+48     	; 0x382c <__fp_cmp+0x46>
    37fc:	12 16       	cp	r1, r18
    37fe:	13 06       	cpc	r1, r19
    3800:	e4 07       	cpc	r30, r20
    3802:	f5 07       	cpc	r31, r21
    3804:	98 f0       	brcs	.+38     	; 0x382c <__fp_cmp+0x46>
    3806:	62 1b       	sub	r22, r18
    3808:	73 0b       	sbc	r23, r19
    380a:	84 0b       	sbc	r24, r20
    380c:	95 0b       	sbc	r25, r21
    380e:	39 f4       	brne	.+14     	; 0x381e <__fp_cmp+0x38>
    3810:	0a 26       	eor	r0, r26
    3812:	61 f0       	breq	.+24     	; 0x382c <__fp_cmp+0x46>
    3814:	23 2b       	or	r18, r19
    3816:	24 2b       	or	r18, r20
    3818:	25 2b       	or	r18, r21
    381a:	21 f4       	brne	.+8      	; 0x3824 <__fp_cmp+0x3e>
    381c:	08 95       	ret
    381e:	0a 26       	eor	r0, r26
    3820:	09 f4       	brne	.+2      	; 0x3824 <__fp_cmp+0x3e>
    3822:	a1 40       	sbci	r26, 0x01	; 1
    3824:	a6 95       	lsr	r26
    3826:	8f ef       	ldi	r24, 0xFF	; 255
    3828:	81 1d       	adc	r24, r1
    382a:	81 1d       	adc	r24, r1
    382c:	08 95       	ret

0000382e <__fp_inf>:
    382e:	97 f9       	bld	r25, 7
    3830:	9f 67       	ori	r25, 0x7F	; 127
    3832:	80 e8       	ldi	r24, 0x80	; 128
    3834:	70 e0       	ldi	r23, 0x00	; 0
    3836:	60 e0       	ldi	r22, 0x00	; 0
    3838:	08 95       	ret

0000383a <__fp_nan>:
    383a:	9f ef       	ldi	r25, 0xFF	; 255
    383c:	80 ec       	ldi	r24, 0xC0	; 192
    383e:	08 95       	ret

00003840 <__fp_pscA>:
    3840:	00 24       	eor	r0, r0
    3842:	0a 94       	dec	r0
    3844:	16 16       	cp	r1, r22
    3846:	17 06       	cpc	r1, r23
    3848:	18 06       	cpc	r1, r24
    384a:	09 06       	cpc	r0, r25
    384c:	08 95       	ret

0000384e <__fp_pscB>:
    384e:	00 24       	eor	r0, r0
    3850:	0a 94       	dec	r0
    3852:	12 16       	cp	r1, r18
    3854:	13 06       	cpc	r1, r19
    3856:	14 06       	cpc	r1, r20
    3858:	05 06       	cpc	r0, r21
    385a:	08 95       	ret

0000385c <__fp_round>:
    385c:	09 2e       	mov	r0, r25
    385e:	03 94       	inc	r0
    3860:	00 0c       	add	r0, r0
    3862:	11 f4       	brne	.+4      	; 0x3868 <__fp_round+0xc>
    3864:	88 23       	and	r24, r24
    3866:	52 f0       	brmi	.+20     	; 0x387c <__fp_round+0x20>
    3868:	bb 0f       	add	r27, r27
    386a:	40 f4       	brcc	.+16     	; 0x387c <__fp_round+0x20>
    386c:	bf 2b       	or	r27, r31
    386e:	11 f4       	brne	.+4      	; 0x3874 <__fp_round+0x18>
    3870:	60 ff       	sbrs	r22, 0
    3872:	04 c0       	rjmp	.+8      	; 0x387c <__fp_round+0x20>
    3874:	6f 5f       	subi	r22, 0xFF	; 255
    3876:	7f 4f       	sbci	r23, 0xFF	; 255
    3878:	8f 4f       	sbci	r24, 0xFF	; 255
    387a:	9f 4f       	sbci	r25, 0xFF	; 255
    387c:	08 95       	ret

0000387e <__fp_split3>:
    387e:	57 fd       	sbrc	r21, 7
    3880:	90 58       	subi	r25, 0x80	; 128
    3882:	44 0f       	add	r20, r20
    3884:	55 1f       	adc	r21, r21
    3886:	59 f0       	breq	.+22     	; 0x389e <__fp_splitA+0x10>
    3888:	5f 3f       	cpi	r21, 0xFF	; 255
    388a:	71 f0       	breq	.+28     	; 0x38a8 <__fp_splitA+0x1a>
    388c:	47 95       	ror	r20

0000388e <__fp_splitA>:
    388e:	88 0f       	add	r24, r24
    3890:	97 fb       	bst	r25, 7
    3892:	99 1f       	adc	r25, r25
    3894:	61 f0       	breq	.+24     	; 0x38ae <__fp_splitA+0x20>
    3896:	9f 3f       	cpi	r25, 0xFF	; 255
    3898:	79 f0       	breq	.+30     	; 0x38b8 <__fp_splitA+0x2a>
    389a:	87 95       	ror	r24
    389c:	08 95       	ret
    389e:	12 16       	cp	r1, r18
    38a0:	13 06       	cpc	r1, r19
    38a2:	14 06       	cpc	r1, r20
    38a4:	55 1f       	adc	r21, r21
    38a6:	f2 cf       	rjmp	.-28     	; 0x388c <__fp_split3+0xe>
    38a8:	46 95       	lsr	r20
    38aa:	f1 df       	rcall	.-30     	; 0x388e <__fp_splitA>
    38ac:	08 c0       	rjmp	.+16     	; 0x38be <__fp_splitA+0x30>
    38ae:	16 16       	cp	r1, r22
    38b0:	17 06       	cpc	r1, r23
    38b2:	18 06       	cpc	r1, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	f1 cf       	rjmp	.-30     	; 0x389a <__fp_splitA+0xc>
    38b8:	86 95       	lsr	r24
    38ba:	71 05       	cpc	r23, r1
    38bc:	61 05       	cpc	r22, r1
    38be:	08 94       	sec
    38c0:	08 95       	ret

000038c2 <__fp_zero>:
    38c2:	e8 94       	clt

000038c4 <__fp_szero>:
    38c4:	bb 27       	eor	r27, r27
    38c6:	66 27       	eor	r22, r22
    38c8:	77 27       	eor	r23, r23
    38ca:	cb 01       	movw	r24, r22
    38cc:	97 f9       	bld	r25, 7
    38ce:	08 95       	ret

000038d0 <__gesf2>:
    38d0:	8a df       	rcall	.-236    	; 0x37e6 <__fp_cmp>
    38d2:	08 f4       	brcc	.+2      	; 0x38d6 <__gesf2+0x6>
    38d4:	8f ef       	ldi	r24, 0xFF	; 255
    38d6:	08 95       	ret

000038d8 <__mulsf3>:
    38d8:	0b d0       	rcall	.+22     	; 0x38f0 <__mulsf3x>
    38da:	c0 cf       	rjmp	.-128    	; 0x385c <__fp_round>
    38dc:	b1 df       	rcall	.-158    	; 0x3840 <__fp_pscA>
    38de:	28 f0       	brcs	.+10     	; 0x38ea <__mulsf3+0x12>
    38e0:	b6 df       	rcall	.-148    	; 0x384e <__fp_pscB>
    38e2:	18 f0       	brcs	.+6      	; 0x38ea <__mulsf3+0x12>
    38e4:	95 23       	and	r25, r21
    38e6:	09 f0       	breq	.+2      	; 0x38ea <__mulsf3+0x12>
    38e8:	a2 cf       	rjmp	.-188    	; 0x382e <__fp_inf>
    38ea:	a7 cf       	rjmp	.-178    	; 0x383a <__fp_nan>
    38ec:	11 24       	eor	r1, r1
    38ee:	ea cf       	rjmp	.-44     	; 0x38c4 <__fp_szero>

000038f0 <__mulsf3x>:
    38f0:	c6 df       	rcall	.-116    	; 0x387e <__fp_split3>
    38f2:	a0 f3       	brcs	.-24     	; 0x38dc <__mulsf3+0x4>

000038f4 <__mulsf3_pse>:
    38f4:	95 9f       	mul	r25, r21
    38f6:	d1 f3       	breq	.-12     	; 0x38ec <__mulsf3+0x14>
    38f8:	95 0f       	add	r25, r21
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	55 1f       	adc	r21, r21
    38fe:	62 9f       	mul	r22, r18
    3900:	f0 01       	movw	r30, r0
    3902:	72 9f       	mul	r23, r18
    3904:	bb 27       	eor	r27, r27
    3906:	f0 0d       	add	r31, r0
    3908:	b1 1d       	adc	r27, r1
    390a:	63 9f       	mul	r22, r19
    390c:	aa 27       	eor	r26, r26
    390e:	f0 0d       	add	r31, r0
    3910:	b1 1d       	adc	r27, r1
    3912:	aa 1f       	adc	r26, r26
    3914:	64 9f       	mul	r22, r20
    3916:	66 27       	eor	r22, r22
    3918:	b0 0d       	add	r27, r0
    391a:	a1 1d       	adc	r26, r1
    391c:	66 1f       	adc	r22, r22
    391e:	82 9f       	mul	r24, r18
    3920:	22 27       	eor	r18, r18
    3922:	b0 0d       	add	r27, r0
    3924:	a1 1d       	adc	r26, r1
    3926:	62 1f       	adc	r22, r18
    3928:	73 9f       	mul	r23, r19
    392a:	b0 0d       	add	r27, r0
    392c:	a1 1d       	adc	r26, r1
    392e:	62 1f       	adc	r22, r18
    3930:	83 9f       	mul	r24, r19
    3932:	a0 0d       	add	r26, r0
    3934:	61 1d       	adc	r22, r1
    3936:	22 1f       	adc	r18, r18
    3938:	74 9f       	mul	r23, r20
    393a:	33 27       	eor	r19, r19
    393c:	a0 0d       	add	r26, r0
    393e:	61 1d       	adc	r22, r1
    3940:	23 1f       	adc	r18, r19
    3942:	84 9f       	mul	r24, r20
    3944:	60 0d       	add	r22, r0
    3946:	21 1d       	adc	r18, r1
    3948:	82 2f       	mov	r24, r18
    394a:	76 2f       	mov	r23, r22
    394c:	6a 2f       	mov	r22, r26
    394e:	11 24       	eor	r1, r1
    3950:	9f 57       	subi	r25, 0x7F	; 127
    3952:	50 40       	sbci	r21, 0x00	; 0
    3954:	8a f0       	brmi	.+34     	; 0x3978 <__mulsf3_pse+0x84>
    3956:	e1 f0       	breq	.+56     	; 0x3990 <__mulsf3_pse+0x9c>
    3958:	88 23       	and	r24, r24
    395a:	4a f0       	brmi	.+18     	; 0x396e <__mulsf3_pse+0x7a>
    395c:	ee 0f       	add	r30, r30
    395e:	ff 1f       	adc	r31, r31
    3960:	bb 1f       	adc	r27, r27
    3962:	66 1f       	adc	r22, r22
    3964:	77 1f       	adc	r23, r23
    3966:	88 1f       	adc	r24, r24
    3968:	91 50       	subi	r25, 0x01	; 1
    396a:	50 40       	sbci	r21, 0x00	; 0
    396c:	a9 f7       	brne	.-22     	; 0x3958 <__mulsf3_pse+0x64>
    396e:	9e 3f       	cpi	r25, 0xFE	; 254
    3970:	51 05       	cpc	r21, r1
    3972:	70 f0       	brcs	.+28     	; 0x3990 <__mulsf3_pse+0x9c>
    3974:	5c cf       	rjmp	.-328    	; 0x382e <__fp_inf>
    3976:	a6 cf       	rjmp	.-180    	; 0x38c4 <__fp_szero>
    3978:	5f 3f       	cpi	r21, 0xFF	; 255
    397a:	ec f3       	brlt	.-6      	; 0x3976 <__mulsf3_pse+0x82>
    397c:	98 3e       	cpi	r25, 0xE8	; 232
    397e:	dc f3       	brlt	.-10     	; 0x3976 <__mulsf3_pse+0x82>
    3980:	86 95       	lsr	r24
    3982:	77 95       	ror	r23
    3984:	67 95       	ror	r22
    3986:	b7 95       	ror	r27
    3988:	f7 95       	ror	r31
    398a:	e7 95       	ror	r30
    398c:	9f 5f       	subi	r25, 0xFF	; 255
    398e:	c1 f7       	brne	.-16     	; 0x3980 <__mulsf3_pse+0x8c>
    3990:	fe 2b       	or	r31, r30
    3992:	88 0f       	add	r24, r24
    3994:	91 1d       	adc	r25, r1
    3996:	96 95       	lsr	r25
    3998:	87 95       	ror	r24
    399a:	97 f9       	bld	r25, 7
    399c:	08 95       	ret

0000399e <__udivmodhi4>:
    399e:	aa 1b       	sub	r26, r26
    39a0:	bb 1b       	sub	r27, r27
    39a2:	51 e1       	ldi	r21, 0x11	; 17
    39a4:	07 c0       	rjmp	.+14     	; 0x39b4 <__udivmodhi4_ep>

000039a6 <__udivmodhi4_loop>:
    39a6:	aa 1f       	adc	r26, r26
    39a8:	bb 1f       	adc	r27, r27
    39aa:	a6 17       	cp	r26, r22
    39ac:	b7 07       	cpc	r27, r23
    39ae:	10 f0       	brcs	.+4      	; 0x39b4 <__udivmodhi4_ep>
    39b0:	a6 1b       	sub	r26, r22
    39b2:	b7 0b       	sbc	r27, r23

000039b4 <__udivmodhi4_ep>:
    39b4:	88 1f       	adc	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	5a 95       	dec	r21
    39ba:	a9 f7       	brne	.-22     	; 0x39a6 <__udivmodhi4_loop>
    39bc:	80 95       	com	r24
    39be:	90 95       	com	r25
    39c0:	bc 01       	movw	r22, r24
    39c2:	cd 01       	movw	r24, r26
    39c4:	08 95       	ret

000039c6 <_exit>:
    39c6:	f8 94       	cli

000039c8 <__stop_program>:
    39c8:	ff cf       	rjmp	.-2      	; 0x39c8 <__stop_program>
